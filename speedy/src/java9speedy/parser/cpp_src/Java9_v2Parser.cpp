
// Generated from D:/AnacondaProjects/CodART/grammars\Java9_v2.g4 by ANTLR 4.9


#include "Java9_v2Listener.h"
#include "Java9_v2Visitor.h"

#include "Java9_v2Parser.h"


using namespace antlrcpp;
using namespace antlr4;

Java9_v2Parser::Java9_v2Parser(TokenStream *input) : Parser(input) {
  _interpreter = new atn::ParserATNSimulator(this, _atn, _decisionToDFA, _sharedContextCache);
}

Java9_v2Parser::~Java9_v2Parser() {
  delete _interpreter;
}

std::string Java9_v2Parser::getGrammarFileName() const {
  return "Java9_v2.g4";
}

const std::vector<std::string>& Java9_v2Parser::getRuleNames() const {
  return _ruleNames;
}

dfa::Vocabulary& Java9_v2Parser::getVocabulary() const {
  return _vocabulary;
}


//----------------- LiteralContext ------------------------------------------------------------------

Java9_v2Parser::LiteralContext::LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::LiteralContext::IntegerLiteral() {
  return getToken(Java9_v2Parser::IntegerLiteral, 0);
}

tree::TerminalNode* Java9_v2Parser::LiteralContext::FloatingPointLiteral() {
  return getToken(Java9_v2Parser::FloatingPointLiteral, 0);
}

tree::TerminalNode* Java9_v2Parser::LiteralContext::BooleanLiteral() {
  return getToken(Java9_v2Parser::BooleanLiteral, 0);
}

tree::TerminalNode* Java9_v2Parser::LiteralContext::CharacterLiteral() {
  return getToken(Java9_v2Parser::CharacterLiteral, 0);
}

tree::TerminalNode* Java9_v2Parser::LiteralContext::StringLiteral() {
  return getToken(Java9_v2Parser::StringLiteral, 0);
}

tree::TerminalNode* Java9_v2Parser::LiteralContext::NullLiteral() {
  return getToken(Java9_v2Parser::NullLiteral, 0);
}


size_t Java9_v2Parser::LiteralContext::getRuleIndex() const {
  return Java9_v2Parser::RuleLiteral;
}

void Java9_v2Parser::LiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteral(this);
}

void Java9_v2Parser::LiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteral(this);
}


antlrcpp::Any Java9_v2Parser::LiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitLiteral(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::LiteralContext* Java9_v2Parser::literal() {
  LiteralContext *_localctx = _tracker.createInstance<LiteralContext>(_ctx, getState());
  enterRule(_localctx, 0, Java9_v2Parser::RuleLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(490);
    _la = _input->LA(1);
    if (!(((((_la - 62) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 62)) & ((1ULL << (Java9_v2Parser::IntegerLiteral - 62))
      | (1ULL << (Java9_v2Parser::FloatingPointLiteral - 62))
      | (1ULL << (Java9_v2Parser::BooleanLiteral - 62))
      | (1ULL << (Java9_v2Parser::CharacterLiteral - 62))
      | (1ULL << (Java9_v2Parser::StringLiteral - 62))
      | (1ULL << (Java9_v2Parser::NullLiteral - 62)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimitiveTypeContext ------------------------------------------------------------------

Java9_v2Parser::PrimitiveTypeContext::PrimitiveTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::PrimitiveTypeContext::getRuleIndex() const {
  return Java9_v2Parser::RulePrimitiveType;
}

void Java9_v2Parser::PrimitiveTypeContext::copyFrom(PrimitiveTypeContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- PrimitiveType1Context ------------------------------------------------------------------

Java9_v2Parser::NumericTypeContext* Java9_v2Parser::PrimitiveType1Context::numericType() {
  return getRuleContext<Java9_v2Parser::NumericTypeContext>(0);
}

std::vector<Java9_v2Parser::AnnotationContext *> Java9_v2Parser::PrimitiveType1Context::annotation() {
  return getRuleContexts<Java9_v2Parser::AnnotationContext>();
}

Java9_v2Parser::AnnotationContext* Java9_v2Parser::PrimitiveType1Context::annotation(size_t i) {
  return getRuleContext<Java9_v2Parser::AnnotationContext>(i);
}

Java9_v2Parser::PrimitiveType1Context::PrimitiveType1Context(PrimitiveTypeContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimitiveType1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimitiveType1(this);
}
void Java9_v2Parser::PrimitiveType1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimitiveType1(this);
}

antlrcpp::Any Java9_v2Parser::PrimitiveType1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimitiveType1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimitiveType2Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::PrimitiveType2Context::BOOLEAN() {
  return getToken(Java9_v2Parser::BOOLEAN, 0);
}

std::vector<Java9_v2Parser::AnnotationContext *> Java9_v2Parser::PrimitiveType2Context::annotation() {
  return getRuleContexts<Java9_v2Parser::AnnotationContext>();
}

Java9_v2Parser::AnnotationContext* Java9_v2Parser::PrimitiveType2Context::annotation(size_t i) {
  return getRuleContext<Java9_v2Parser::AnnotationContext>(i);
}

Java9_v2Parser::PrimitiveType2Context::PrimitiveType2Context(PrimitiveTypeContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimitiveType2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimitiveType2(this);
}
void Java9_v2Parser::PrimitiveType2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimitiveType2(this);
}

antlrcpp::Any Java9_v2Parser::PrimitiveType2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimitiveType2(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::PrimitiveTypeContext* Java9_v2Parser::primitiveType() {
  PrimitiveTypeContext *_localctx = _tracker.createInstance<PrimitiveTypeContext>(_ctx, getState());
  enterRule(_localctx, 2, Java9_v2Parser::RulePrimitiveType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(506);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<PrimitiveTypeContext *>(_tracker.createInstance<Java9_v2Parser::PrimitiveType1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(495);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Java9_v2Parser::AT) {
        setState(492);
        annotation();
        setState(497);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(498);
      numericType();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<PrimitiveTypeContext *>(_tracker.createInstance<Java9_v2Parser::PrimitiveType2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(502);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Java9_v2Parser::AT) {
        setState(499);
        annotation();
        setState(504);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(505);
      match(Java9_v2Parser::BOOLEAN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumericTypeContext ------------------------------------------------------------------

Java9_v2Parser::NumericTypeContext::NumericTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::NumericTypeContext::getRuleIndex() const {
  return Java9_v2Parser::RuleNumericType;
}

void Java9_v2Parser::NumericTypeContext::copyFrom(NumericTypeContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- NumericType1Context ------------------------------------------------------------------

Java9_v2Parser::IntegralTypeContext* Java9_v2Parser::NumericType1Context::integralType() {
  return getRuleContext<Java9_v2Parser::IntegralTypeContext>(0);
}

Java9_v2Parser::NumericType1Context::NumericType1Context(NumericTypeContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::NumericType1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNumericType1(this);
}
void Java9_v2Parser::NumericType1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNumericType1(this);
}

antlrcpp::Any Java9_v2Parser::NumericType1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitNumericType1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- NumericType2Context ------------------------------------------------------------------

Java9_v2Parser::FloatingPointTypeContext* Java9_v2Parser::NumericType2Context::floatingPointType() {
  return getRuleContext<Java9_v2Parser::FloatingPointTypeContext>(0);
}

Java9_v2Parser::NumericType2Context::NumericType2Context(NumericTypeContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::NumericType2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNumericType2(this);
}
void Java9_v2Parser::NumericType2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNumericType2(this);
}

antlrcpp::Any Java9_v2Parser::NumericType2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitNumericType2(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::NumericTypeContext* Java9_v2Parser::numericType() {
  NumericTypeContext *_localctx = _tracker.createInstance<NumericTypeContext>(_ctx, getState());
  enterRule(_localctx, 4, Java9_v2Parser::RuleNumericType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(510);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Java9_v2Parser::BYTE:
      case Java9_v2Parser::CHAR:
      case Java9_v2Parser::INT:
      case Java9_v2Parser::LONG:
      case Java9_v2Parser::SHORT: {
        _localctx = dynamic_cast<NumericTypeContext *>(_tracker.createInstance<Java9_v2Parser::NumericType1Context>(_localctx));
        enterOuterAlt(_localctx, 1);
        setState(508);
        integralType();
        break;
      }

      case Java9_v2Parser::DOUBLE:
      case Java9_v2Parser::FLOAT: {
        _localctx = dynamic_cast<NumericTypeContext *>(_tracker.createInstance<Java9_v2Parser::NumericType2Context>(_localctx));
        enterOuterAlt(_localctx, 2);
        setState(509);
        floatingPointType();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntegralTypeContext ------------------------------------------------------------------

Java9_v2Parser::IntegralTypeContext::IntegralTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::IntegralTypeContext::BYTE() {
  return getToken(Java9_v2Parser::BYTE, 0);
}

tree::TerminalNode* Java9_v2Parser::IntegralTypeContext::SHORT() {
  return getToken(Java9_v2Parser::SHORT, 0);
}

tree::TerminalNode* Java9_v2Parser::IntegralTypeContext::INT() {
  return getToken(Java9_v2Parser::INT, 0);
}

tree::TerminalNode* Java9_v2Parser::IntegralTypeContext::LONG() {
  return getToken(Java9_v2Parser::LONG, 0);
}

tree::TerminalNode* Java9_v2Parser::IntegralTypeContext::CHAR() {
  return getToken(Java9_v2Parser::CHAR, 0);
}


size_t Java9_v2Parser::IntegralTypeContext::getRuleIndex() const {
  return Java9_v2Parser::RuleIntegralType;
}

void Java9_v2Parser::IntegralTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIntegralType(this);
}

void Java9_v2Parser::IntegralTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIntegralType(this);
}


antlrcpp::Any Java9_v2Parser::IntegralTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitIntegralType(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::IntegralTypeContext* Java9_v2Parser::integralType() {
  IntegralTypeContext *_localctx = _tracker.createInstance<IntegralTypeContext>(_ctx, getState());
  enterRule(_localctx, 6, Java9_v2Parser::RuleIntegralType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(512);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << Java9_v2Parser::BYTE)
      | (1ULL << Java9_v2Parser::CHAR)
      | (1ULL << Java9_v2Parser::INT)
      | (1ULL << Java9_v2Parser::LONG)
      | (1ULL << Java9_v2Parser::SHORT))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FloatingPointTypeContext ------------------------------------------------------------------

Java9_v2Parser::FloatingPointTypeContext::FloatingPointTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::FloatingPointTypeContext::FLOAT() {
  return getToken(Java9_v2Parser::FLOAT, 0);
}

tree::TerminalNode* Java9_v2Parser::FloatingPointTypeContext::DOUBLE() {
  return getToken(Java9_v2Parser::DOUBLE, 0);
}


size_t Java9_v2Parser::FloatingPointTypeContext::getRuleIndex() const {
  return Java9_v2Parser::RuleFloatingPointType;
}

void Java9_v2Parser::FloatingPointTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFloatingPointType(this);
}

void Java9_v2Parser::FloatingPointTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFloatingPointType(this);
}


antlrcpp::Any Java9_v2Parser::FloatingPointTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitFloatingPointType(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::FloatingPointTypeContext* Java9_v2Parser::floatingPointType() {
  FloatingPointTypeContext *_localctx = _tracker.createInstance<FloatingPointTypeContext>(_ctx, getState());
  enterRule(_localctx, 8, Java9_v2Parser::RuleFloatingPointType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(514);
    _la = _input->LA(1);
    if (!(_la == Java9_v2Parser::DOUBLE

    || _la == Java9_v2Parser::FLOAT)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReferenceTypeContext ------------------------------------------------------------------

Java9_v2Parser::ReferenceTypeContext::ReferenceTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::ReferenceTypeContext::getRuleIndex() const {
  return Java9_v2Parser::RuleReferenceType;
}

void Java9_v2Parser::ReferenceTypeContext::copyFrom(ReferenceTypeContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ReferenceType3Context ------------------------------------------------------------------

Java9_v2Parser::ArrayTypeContext* Java9_v2Parser::ReferenceType3Context::arrayType() {
  return getRuleContext<Java9_v2Parser::ArrayTypeContext>(0);
}

Java9_v2Parser::ReferenceType3Context::ReferenceType3Context(ReferenceTypeContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ReferenceType3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReferenceType3(this);
}
void Java9_v2Parser::ReferenceType3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReferenceType3(this);
}

antlrcpp::Any Java9_v2Parser::ReferenceType3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitReferenceType3(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ReferenceType2Context ------------------------------------------------------------------

Java9_v2Parser::TypeVariableContext* Java9_v2Parser::ReferenceType2Context::typeVariable() {
  return getRuleContext<Java9_v2Parser::TypeVariableContext>(0);
}

Java9_v2Parser::ReferenceType2Context::ReferenceType2Context(ReferenceTypeContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ReferenceType2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReferenceType2(this);
}
void Java9_v2Parser::ReferenceType2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReferenceType2(this);
}

antlrcpp::Any Java9_v2Parser::ReferenceType2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitReferenceType2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ReferenceType1Context ------------------------------------------------------------------

Java9_v2Parser::ClassOrInterfaceTypeContext* Java9_v2Parser::ReferenceType1Context::classOrInterfaceType() {
  return getRuleContext<Java9_v2Parser::ClassOrInterfaceTypeContext>(0);
}

Java9_v2Parser::ReferenceType1Context::ReferenceType1Context(ReferenceTypeContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ReferenceType1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReferenceType1(this);
}
void Java9_v2Parser::ReferenceType1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReferenceType1(this);
}

antlrcpp::Any Java9_v2Parser::ReferenceType1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitReferenceType1(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::ReferenceTypeContext* Java9_v2Parser::referenceType() {
  ReferenceTypeContext *_localctx = _tracker.createInstance<ReferenceTypeContext>(_ctx, getState());
  enterRule(_localctx, 10, Java9_v2Parser::RuleReferenceType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(519);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 4, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<ReferenceTypeContext *>(_tracker.createInstance<Java9_v2Parser::ReferenceType1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(516);
      classOrInterfaceType();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<ReferenceTypeContext *>(_tracker.createInstance<Java9_v2Parser::ReferenceType2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(517);
      typeVariable();
      break;
    }

    case 3: {
      _localctx = dynamic_cast<ReferenceTypeContext *>(_tracker.createInstance<Java9_v2Parser::ReferenceType3Context>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(518);
      arrayType();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassOrInterfaceTypeContext ------------------------------------------------------------------

Java9_v2Parser::ClassOrInterfaceTypeContext::ClassOrInterfaceTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::ClassType_lfno_classOrInterfaceTypeContext* Java9_v2Parser::ClassOrInterfaceTypeContext::classType_lfno_classOrInterfaceType() {
  return getRuleContext<Java9_v2Parser::ClassType_lfno_classOrInterfaceTypeContext>(0);
}

Java9_v2Parser::InterfaceType_lfno_classOrInterfaceTypeContext* Java9_v2Parser::ClassOrInterfaceTypeContext::interfaceType_lfno_classOrInterfaceType() {
  return getRuleContext<Java9_v2Parser::InterfaceType_lfno_classOrInterfaceTypeContext>(0);
}

std::vector<Java9_v2Parser::ClassType_lf_classOrInterfaceTypeContext *> Java9_v2Parser::ClassOrInterfaceTypeContext::classType_lf_classOrInterfaceType() {
  return getRuleContexts<Java9_v2Parser::ClassType_lf_classOrInterfaceTypeContext>();
}

Java9_v2Parser::ClassType_lf_classOrInterfaceTypeContext* Java9_v2Parser::ClassOrInterfaceTypeContext::classType_lf_classOrInterfaceType(size_t i) {
  return getRuleContext<Java9_v2Parser::ClassType_lf_classOrInterfaceTypeContext>(i);
}

std::vector<Java9_v2Parser::InterfaceType_lf_classOrInterfaceTypeContext *> Java9_v2Parser::ClassOrInterfaceTypeContext::interfaceType_lf_classOrInterfaceType() {
  return getRuleContexts<Java9_v2Parser::InterfaceType_lf_classOrInterfaceTypeContext>();
}

Java9_v2Parser::InterfaceType_lf_classOrInterfaceTypeContext* Java9_v2Parser::ClassOrInterfaceTypeContext::interfaceType_lf_classOrInterfaceType(size_t i) {
  return getRuleContext<Java9_v2Parser::InterfaceType_lf_classOrInterfaceTypeContext>(i);
}


size_t Java9_v2Parser::ClassOrInterfaceTypeContext::getRuleIndex() const {
  return Java9_v2Parser::RuleClassOrInterfaceType;
}

void Java9_v2Parser::ClassOrInterfaceTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassOrInterfaceType(this);
}

void Java9_v2Parser::ClassOrInterfaceTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassOrInterfaceType(this);
}


antlrcpp::Any Java9_v2Parser::ClassOrInterfaceTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitClassOrInterfaceType(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::ClassOrInterfaceTypeContext* Java9_v2Parser::classOrInterfaceType() {
  ClassOrInterfaceTypeContext *_localctx = _tracker.createInstance<ClassOrInterfaceTypeContext>(_ctx, getState());
  enterRule(_localctx, 12, Java9_v2Parser::RuleClassOrInterfaceType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(523);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 5, _ctx)) {
    case 1: {
      setState(521);
      classType_lfno_classOrInterfaceType();
      break;
    }

    case 2: {
      setState(522);
      interfaceType_lfno_classOrInterfaceType();
      break;
    }

    default:
      break;
    }
    setState(529);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(527);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 6, _ctx)) {
        case 1: {
          setState(525);
          classType_lf_classOrInterfaceType();
          break;
        }

        case 2: {
          setState(526);
          interfaceType_lf_classOrInterfaceType();
          break;
        }

        default:
          break;
        } 
      }
      setState(531);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassTypeContext ------------------------------------------------------------------

Java9_v2Parser::ClassTypeContext::ClassTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::ClassTypeContext::getRuleIndex() const {
  return Java9_v2Parser::RuleClassType;
}

void Java9_v2Parser::ClassTypeContext::copyFrom(ClassTypeContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ClassType1Context ------------------------------------------------------------------

Java9_v2Parser::IdentifierContext* Java9_v2Parser::ClassType1Context::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

std::vector<Java9_v2Parser::AnnotationContext *> Java9_v2Parser::ClassType1Context::annotation() {
  return getRuleContexts<Java9_v2Parser::AnnotationContext>();
}

Java9_v2Parser::AnnotationContext* Java9_v2Parser::ClassType1Context::annotation(size_t i) {
  return getRuleContext<Java9_v2Parser::AnnotationContext>(i);
}

Java9_v2Parser::TypeArgumentsContext* Java9_v2Parser::ClassType1Context::typeArguments() {
  return getRuleContext<Java9_v2Parser::TypeArgumentsContext>(0);
}

Java9_v2Parser::ClassType1Context::ClassType1Context(ClassTypeContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ClassType1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassType1(this);
}
void Java9_v2Parser::ClassType1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassType1(this);
}

antlrcpp::Any Java9_v2Parser::ClassType1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitClassType1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ClassType2Context ------------------------------------------------------------------

Java9_v2Parser::ClassOrInterfaceTypeContext* Java9_v2Parser::ClassType2Context::classOrInterfaceType() {
  return getRuleContext<Java9_v2Parser::ClassOrInterfaceTypeContext>(0);
}

tree::TerminalNode* Java9_v2Parser::ClassType2Context::DOT() {
  return getToken(Java9_v2Parser::DOT, 0);
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::ClassType2Context::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

std::vector<Java9_v2Parser::AnnotationContext *> Java9_v2Parser::ClassType2Context::annotation() {
  return getRuleContexts<Java9_v2Parser::AnnotationContext>();
}

Java9_v2Parser::AnnotationContext* Java9_v2Parser::ClassType2Context::annotation(size_t i) {
  return getRuleContext<Java9_v2Parser::AnnotationContext>(i);
}

Java9_v2Parser::TypeArgumentsContext* Java9_v2Parser::ClassType2Context::typeArguments() {
  return getRuleContext<Java9_v2Parser::TypeArgumentsContext>(0);
}

Java9_v2Parser::ClassType2Context::ClassType2Context(ClassTypeContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ClassType2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassType2(this);
}
void Java9_v2Parser::ClassType2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassType2(this);
}

antlrcpp::Any Java9_v2Parser::ClassType2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitClassType2(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::ClassTypeContext* Java9_v2Parser::classType() {
  ClassTypeContext *_localctx = _tracker.createInstance<ClassTypeContext>(_ctx, getState());
  enterRule(_localctx, 14, Java9_v2Parser::RuleClassType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(554);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 12, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<ClassTypeContext *>(_tracker.createInstance<Java9_v2Parser::ClassType1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(535);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Java9_v2Parser::AT) {
        setState(532);
        annotation();
        setState(537);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(538);
      identifier();
      setState(540);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java9_v2Parser::LT) {
        setState(539);
        typeArguments();
      }
      break;
    }

    case 2: {
      _localctx = dynamic_cast<ClassTypeContext *>(_tracker.createInstance<Java9_v2Parser::ClassType2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(542);
      classOrInterfaceType();
      setState(543);
      match(Java9_v2Parser::DOT);
      setState(547);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Java9_v2Parser::AT) {
        setState(544);
        annotation();
        setState(549);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(550);
      identifier();
      setState(552);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java9_v2Parser::LT) {
        setState(551);
        typeArguments();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassType_lf_classOrInterfaceTypeContext ------------------------------------------------------------------

Java9_v2Parser::ClassType_lf_classOrInterfaceTypeContext::ClassType_lf_classOrInterfaceTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::ClassType_lf_classOrInterfaceTypeContext::DOT() {
  return getToken(Java9_v2Parser::DOT, 0);
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::ClassType_lf_classOrInterfaceTypeContext::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

std::vector<Java9_v2Parser::AnnotationContext *> Java9_v2Parser::ClassType_lf_classOrInterfaceTypeContext::annotation() {
  return getRuleContexts<Java9_v2Parser::AnnotationContext>();
}

Java9_v2Parser::AnnotationContext* Java9_v2Parser::ClassType_lf_classOrInterfaceTypeContext::annotation(size_t i) {
  return getRuleContext<Java9_v2Parser::AnnotationContext>(i);
}

Java9_v2Parser::TypeArgumentsContext* Java9_v2Parser::ClassType_lf_classOrInterfaceTypeContext::typeArguments() {
  return getRuleContext<Java9_v2Parser::TypeArgumentsContext>(0);
}


size_t Java9_v2Parser::ClassType_lf_classOrInterfaceTypeContext::getRuleIndex() const {
  return Java9_v2Parser::RuleClassType_lf_classOrInterfaceType;
}

void Java9_v2Parser::ClassType_lf_classOrInterfaceTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassType_lf_classOrInterfaceType(this);
}

void Java9_v2Parser::ClassType_lf_classOrInterfaceTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassType_lf_classOrInterfaceType(this);
}


antlrcpp::Any Java9_v2Parser::ClassType_lf_classOrInterfaceTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitClassType_lf_classOrInterfaceType(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::ClassType_lf_classOrInterfaceTypeContext* Java9_v2Parser::classType_lf_classOrInterfaceType() {
  ClassType_lf_classOrInterfaceTypeContext *_localctx = _tracker.createInstance<ClassType_lf_classOrInterfaceTypeContext>(_ctx, getState());
  enterRule(_localctx, 16, Java9_v2Parser::RuleClassType_lf_classOrInterfaceType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(556);
    match(Java9_v2Parser::DOT);
    setState(560);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java9_v2Parser::AT) {
      setState(557);
      annotation();
      setState(562);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(563);
    identifier();
    setState(565);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 14, _ctx)) {
    case 1: {
      setState(564);
      typeArguments();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassType_lfno_classOrInterfaceTypeContext ------------------------------------------------------------------

Java9_v2Parser::ClassType_lfno_classOrInterfaceTypeContext::ClassType_lfno_classOrInterfaceTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::ClassType_lfno_classOrInterfaceTypeContext::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

std::vector<Java9_v2Parser::AnnotationContext *> Java9_v2Parser::ClassType_lfno_classOrInterfaceTypeContext::annotation() {
  return getRuleContexts<Java9_v2Parser::AnnotationContext>();
}

Java9_v2Parser::AnnotationContext* Java9_v2Parser::ClassType_lfno_classOrInterfaceTypeContext::annotation(size_t i) {
  return getRuleContext<Java9_v2Parser::AnnotationContext>(i);
}

Java9_v2Parser::TypeArgumentsContext* Java9_v2Parser::ClassType_lfno_classOrInterfaceTypeContext::typeArguments() {
  return getRuleContext<Java9_v2Parser::TypeArgumentsContext>(0);
}


size_t Java9_v2Parser::ClassType_lfno_classOrInterfaceTypeContext::getRuleIndex() const {
  return Java9_v2Parser::RuleClassType_lfno_classOrInterfaceType;
}

void Java9_v2Parser::ClassType_lfno_classOrInterfaceTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassType_lfno_classOrInterfaceType(this);
}

void Java9_v2Parser::ClassType_lfno_classOrInterfaceTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassType_lfno_classOrInterfaceType(this);
}


antlrcpp::Any Java9_v2Parser::ClassType_lfno_classOrInterfaceTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitClassType_lfno_classOrInterfaceType(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::ClassType_lfno_classOrInterfaceTypeContext* Java9_v2Parser::classType_lfno_classOrInterfaceType() {
  ClassType_lfno_classOrInterfaceTypeContext *_localctx = _tracker.createInstance<ClassType_lfno_classOrInterfaceTypeContext>(_ctx, getState());
  enterRule(_localctx, 18, Java9_v2Parser::RuleClassType_lfno_classOrInterfaceType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(570);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java9_v2Parser::AT) {
      setState(567);
      annotation();
      setState(572);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(573);
    identifier();
    setState(575);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 16, _ctx)) {
    case 1: {
      setState(574);
      typeArguments();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceTypeContext ------------------------------------------------------------------

Java9_v2Parser::InterfaceTypeContext::InterfaceTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::ClassTypeContext* Java9_v2Parser::InterfaceTypeContext::classType() {
  return getRuleContext<Java9_v2Parser::ClassTypeContext>(0);
}


size_t Java9_v2Parser::InterfaceTypeContext::getRuleIndex() const {
  return Java9_v2Parser::RuleInterfaceType;
}

void Java9_v2Parser::InterfaceTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterfaceType(this);
}

void Java9_v2Parser::InterfaceTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterfaceType(this);
}


antlrcpp::Any Java9_v2Parser::InterfaceTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitInterfaceType(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::InterfaceTypeContext* Java9_v2Parser::interfaceType() {
  InterfaceTypeContext *_localctx = _tracker.createInstance<InterfaceTypeContext>(_ctx, getState());
  enterRule(_localctx, 20, Java9_v2Parser::RuleInterfaceType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(577);
    classType();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceType_lf_classOrInterfaceTypeContext ------------------------------------------------------------------

Java9_v2Parser::InterfaceType_lf_classOrInterfaceTypeContext::InterfaceType_lf_classOrInterfaceTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::ClassType_lf_classOrInterfaceTypeContext* Java9_v2Parser::InterfaceType_lf_classOrInterfaceTypeContext::classType_lf_classOrInterfaceType() {
  return getRuleContext<Java9_v2Parser::ClassType_lf_classOrInterfaceTypeContext>(0);
}


size_t Java9_v2Parser::InterfaceType_lf_classOrInterfaceTypeContext::getRuleIndex() const {
  return Java9_v2Parser::RuleInterfaceType_lf_classOrInterfaceType;
}

void Java9_v2Parser::InterfaceType_lf_classOrInterfaceTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterfaceType_lf_classOrInterfaceType(this);
}

void Java9_v2Parser::InterfaceType_lf_classOrInterfaceTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterfaceType_lf_classOrInterfaceType(this);
}


antlrcpp::Any Java9_v2Parser::InterfaceType_lf_classOrInterfaceTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitInterfaceType_lf_classOrInterfaceType(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::InterfaceType_lf_classOrInterfaceTypeContext* Java9_v2Parser::interfaceType_lf_classOrInterfaceType() {
  InterfaceType_lf_classOrInterfaceTypeContext *_localctx = _tracker.createInstance<InterfaceType_lf_classOrInterfaceTypeContext>(_ctx, getState());
  enterRule(_localctx, 22, Java9_v2Parser::RuleInterfaceType_lf_classOrInterfaceType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(579);
    classType_lf_classOrInterfaceType();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceType_lfno_classOrInterfaceTypeContext ------------------------------------------------------------------

Java9_v2Parser::InterfaceType_lfno_classOrInterfaceTypeContext::InterfaceType_lfno_classOrInterfaceTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::ClassType_lfno_classOrInterfaceTypeContext* Java9_v2Parser::InterfaceType_lfno_classOrInterfaceTypeContext::classType_lfno_classOrInterfaceType() {
  return getRuleContext<Java9_v2Parser::ClassType_lfno_classOrInterfaceTypeContext>(0);
}


size_t Java9_v2Parser::InterfaceType_lfno_classOrInterfaceTypeContext::getRuleIndex() const {
  return Java9_v2Parser::RuleInterfaceType_lfno_classOrInterfaceType;
}

void Java9_v2Parser::InterfaceType_lfno_classOrInterfaceTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterfaceType_lfno_classOrInterfaceType(this);
}

void Java9_v2Parser::InterfaceType_lfno_classOrInterfaceTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterfaceType_lfno_classOrInterfaceType(this);
}


antlrcpp::Any Java9_v2Parser::InterfaceType_lfno_classOrInterfaceTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitInterfaceType_lfno_classOrInterfaceType(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::InterfaceType_lfno_classOrInterfaceTypeContext* Java9_v2Parser::interfaceType_lfno_classOrInterfaceType() {
  InterfaceType_lfno_classOrInterfaceTypeContext *_localctx = _tracker.createInstance<InterfaceType_lfno_classOrInterfaceTypeContext>(_ctx, getState());
  enterRule(_localctx, 24, Java9_v2Parser::RuleInterfaceType_lfno_classOrInterfaceType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(581);
    classType_lfno_classOrInterfaceType();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeVariableContext ------------------------------------------------------------------

Java9_v2Parser::TypeVariableContext::TypeVariableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::TypeVariableContext::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

std::vector<Java9_v2Parser::AnnotationContext *> Java9_v2Parser::TypeVariableContext::annotation() {
  return getRuleContexts<Java9_v2Parser::AnnotationContext>();
}

Java9_v2Parser::AnnotationContext* Java9_v2Parser::TypeVariableContext::annotation(size_t i) {
  return getRuleContext<Java9_v2Parser::AnnotationContext>(i);
}


size_t Java9_v2Parser::TypeVariableContext::getRuleIndex() const {
  return Java9_v2Parser::RuleTypeVariable;
}

void Java9_v2Parser::TypeVariableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeVariable(this);
}

void Java9_v2Parser::TypeVariableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeVariable(this);
}


antlrcpp::Any Java9_v2Parser::TypeVariableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitTypeVariable(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::TypeVariableContext* Java9_v2Parser::typeVariable() {
  TypeVariableContext *_localctx = _tracker.createInstance<TypeVariableContext>(_ctx, getState());
  enterRule(_localctx, 26, Java9_v2Parser::RuleTypeVariable);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(586);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java9_v2Parser::AT) {
      setState(583);
      annotation();
      setState(588);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(589);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayTypeContext ------------------------------------------------------------------

Java9_v2Parser::ArrayTypeContext::ArrayTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::ArrayTypeContext::getRuleIndex() const {
  return Java9_v2Parser::RuleArrayType;
}

void Java9_v2Parser::ArrayTypeContext::copyFrom(ArrayTypeContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ArrayTyp3Context ------------------------------------------------------------------

Java9_v2Parser::TypeVariableContext* Java9_v2Parser::ArrayTyp3Context::typeVariable() {
  return getRuleContext<Java9_v2Parser::TypeVariableContext>(0);
}

Java9_v2Parser::DimsContext* Java9_v2Parser::ArrayTyp3Context::dims() {
  return getRuleContext<Java9_v2Parser::DimsContext>(0);
}

Java9_v2Parser::ArrayTyp3Context::ArrayTyp3Context(ArrayTypeContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ArrayTyp3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayTyp3(this);
}
void Java9_v2Parser::ArrayTyp3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayTyp3(this);
}

antlrcpp::Any Java9_v2Parser::ArrayTyp3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitArrayTyp3(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ArrayType1Context ------------------------------------------------------------------

Java9_v2Parser::PrimitiveTypeContext* Java9_v2Parser::ArrayType1Context::primitiveType() {
  return getRuleContext<Java9_v2Parser::PrimitiveTypeContext>(0);
}

Java9_v2Parser::DimsContext* Java9_v2Parser::ArrayType1Context::dims() {
  return getRuleContext<Java9_v2Parser::DimsContext>(0);
}

Java9_v2Parser::ArrayType1Context::ArrayType1Context(ArrayTypeContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ArrayType1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayType1(this);
}
void Java9_v2Parser::ArrayType1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayType1(this);
}

antlrcpp::Any Java9_v2Parser::ArrayType1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitArrayType1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ArrayType2Context ------------------------------------------------------------------

Java9_v2Parser::ClassOrInterfaceTypeContext* Java9_v2Parser::ArrayType2Context::classOrInterfaceType() {
  return getRuleContext<Java9_v2Parser::ClassOrInterfaceTypeContext>(0);
}

Java9_v2Parser::DimsContext* Java9_v2Parser::ArrayType2Context::dims() {
  return getRuleContext<Java9_v2Parser::DimsContext>(0);
}

Java9_v2Parser::ArrayType2Context::ArrayType2Context(ArrayTypeContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ArrayType2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayType2(this);
}
void Java9_v2Parser::ArrayType2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayType2(this);
}

antlrcpp::Any Java9_v2Parser::ArrayType2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitArrayType2(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::ArrayTypeContext* Java9_v2Parser::arrayType() {
  ArrayTypeContext *_localctx = _tracker.createInstance<ArrayTypeContext>(_ctx, getState());
  enterRule(_localctx, 28, Java9_v2Parser::RuleArrayType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(600);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 18, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<ArrayTypeContext *>(_tracker.createInstance<Java9_v2Parser::ArrayType1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(591);
      primitiveType();
      setState(592);
      dims();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<ArrayTypeContext *>(_tracker.createInstance<Java9_v2Parser::ArrayType2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(594);
      classOrInterfaceType();
      setState(595);
      dims();
      break;
    }

    case 3: {
      _localctx = dynamic_cast<ArrayTypeContext *>(_tracker.createInstance<Java9_v2Parser::ArrayTyp3Context>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(597);
      typeVariable();
      setState(598);
      dims();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DimsContext ------------------------------------------------------------------

Java9_v2Parser::DimsContext::DimsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> Java9_v2Parser::DimsContext::LBRACK() {
  return getTokens(Java9_v2Parser::LBRACK);
}

tree::TerminalNode* Java9_v2Parser::DimsContext::LBRACK(size_t i) {
  return getToken(Java9_v2Parser::LBRACK, i);
}

std::vector<tree::TerminalNode *> Java9_v2Parser::DimsContext::RBRACK() {
  return getTokens(Java9_v2Parser::RBRACK);
}

tree::TerminalNode* Java9_v2Parser::DimsContext::RBRACK(size_t i) {
  return getToken(Java9_v2Parser::RBRACK, i);
}

std::vector<Java9_v2Parser::AnnotationContext *> Java9_v2Parser::DimsContext::annotation() {
  return getRuleContexts<Java9_v2Parser::AnnotationContext>();
}

Java9_v2Parser::AnnotationContext* Java9_v2Parser::DimsContext::annotation(size_t i) {
  return getRuleContext<Java9_v2Parser::AnnotationContext>(i);
}


size_t Java9_v2Parser::DimsContext::getRuleIndex() const {
  return Java9_v2Parser::RuleDims;
}

void Java9_v2Parser::DimsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDims(this);
}

void Java9_v2Parser::DimsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDims(this);
}


antlrcpp::Any Java9_v2Parser::DimsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitDims(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::DimsContext* Java9_v2Parser::dims() {
  DimsContext *_localctx = _tracker.createInstance<DimsContext>(_ctx, getState());
  enterRule(_localctx, 30, Java9_v2Parser::RuleDims);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(605);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java9_v2Parser::AT) {
      setState(602);
      annotation();
      setState(607);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(608);
    match(Java9_v2Parser::LBRACK);
    setState(609);
    match(Java9_v2Parser::RBRACK);
    setState(620);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 21, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(613);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == Java9_v2Parser::AT) {
          setState(610);
          annotation();
          setState(615);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(616);
        match(Java9_v2Parser::LBRACK);
        setState(617);
        match(Java9_v2Parser::RBRACK); 
      }
      setState(622);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 21, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeParameterContext ------------------------------------------------------------------

Java9_v2Parser::TypeParameterContext::TypeParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::TypeParameterContext::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

std::vector<Java9_v2Parser::TypeParameterModifierContext *> Java9_v2Parser::TypeParameterContext::typeParameterModifier() {
  return getRuleContexts<Java9_v2Parser::TypeParameterModifierContext>();
}

Java9_v2Parser::TypeParameterModifierContext* Java9_v2Parser::TypeParameterContext::typeParameterModifier(size_t i) {
  return getRuleContext<Java9_v2Parser::TypeParameterModifierContext>(i);
}

Java9_v2Parser::TypeBoundContext* Java9_v2Parser::TypeParameterContext::typeBound() {
  return getRuleContext<Java9_v2Parser::TypeBoundContext>(0);
}


size_t Java9_v2Parser::TypeParameterContext::getRuleIndex() const {
  return Java9_v2Parser::RuleTypeParameter;
}

void Java9_v2Parser::TypeParameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeParameter(this);
}

void Java9_v2Parser::TypeParameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeParameter(this);
}


antlrcpp::Any Java9_v2Parser::TypeParameterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitTypeParameter(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::TypeParameterContext* Java9_v2Parser::typeParameter() {
  TypeParameterContext *_localctx = _tracker.createInstance<TypeParameterContext>(_ctx, getState());
  enterRule(_localctx, 32, Java9_v2Parser::RuleTypeParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(626);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java9_v2Parser::AT) {
      setState(623);
      typeParameterModifier();
      setState(628);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(629);
    identifier();
    setState(631);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java9_v2Parser::EXTENDS) {
      setState(630);
      typeBound();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeParameterModifierContext ------------------------------------------------------------------

Java9_v2Parser::TypeParameterModifierContext::TypeParameterModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::AnnotationContext* Java9_v2Parser::TypeParameterModifierContext::annotation() {
  return getRuleContext<Java9_v2Parser::AnnotationContext>(0);
}


size_t Java9_v2Parser::TypeParameterModifierContext::getRuleIndex() const {
  return Java9_v2Parser::RuleTypeParameterModifier;
}

void Java9_v2Parser::TypeParameterModifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeParameterModifier(this);
}

void Java9_v2Parser::TypeParameterModifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeParameterModifier(this);
}


antlrcpp::Any Java9_v2Parser::TypeParameterModifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitTypeParameterModifier(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::TypeParameterModifierContext* Java9_v2Parser::typeParameterModifier() {
  TypeParameterModifierContext *_localctx = _tracker.createInstance<TypeParameterModifierContext>(_ctx, getState());
  enterRule(_localctx, 34, Java9_v2Parser::RuleTypeParameterModifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(633);
    annotation();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeBoundContext ------------------------------------------------------------------

Java9_v2Parser::TypeBoundContext::TypeBoundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::TypeBoundContext::getRuleIndex() const {
  return Java9_v2Parser::RuleTypeBound;
}

void Java9_v2Parser::TypeBoundContext::copyFrom(TypeBoundContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- TypeBound2Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::TypeBound2Context::EXTENDS() {
  return getToken(Java9_v2Parser::EXTENDS, 0);
}

Java9_v2Parser::ClassOrInterfaceTypeContext* Java9_v2Parser::TypeBound2Context::classOrInterfaceType() {
  return getRuleContext<Java9_v2Parser::ClassOrInterfaceTypeContext>(0);
}

std::vector<Java9_v2Parser::AdditionalBoundContext *> Java9_v2Parser::TypeBound2Context::additionalBound() {
  return getRuleContexts<Java9_v2Parser::AdditionalBoundContext>();
}

Java9_v2Parser::AdditionalBoundContext* Java9_v2Parser::TypeBound2Context::additionalBound(size_t i) {
  return getRuleContext<Java9_v2Parser::AdditionalBoundContext>(i);
}

Java9_v2Parser::TypeBound2Context::TypeBound2Context(TypeBoundContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::TypeBound2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeBound2(this);
}
void Java9_v2Parser::TypeBound2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeBound2(this);
}

antlrcpp::Any Java9_v2Parser::TypeBound2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitTypeBound2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TypeBound1Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::TypeBound1Context::EXTENDS() {
  return getToken(Java9_v2Parser::EXTENDS, 0);
}

Java9_v2Parser::TypeVariableContext* Java9_v2Parser::TypeBound1Context::typeVariable() {
  return getRuleContext<Java9_v2Parser::TypeVariableContext>(0);
}

Java9_v2Parser::TypeBound1Context::TypeBound1Context(TypeBoundContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::TypeBound1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeBound1(this);
}
void Java9_v2Parser::TypeBound1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeBound1(this);
}

antlrcpp::Any Java9_v2Parser::TypeBound1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitTypeBound1(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::TypeBoundContext* Java9_v2Parser::typeBound() {
  TypeBoundContext *_localctx = _tracker.createInstance<TypeBoundContext>(_ctx, getState());
  enterRule(_localctx, 36, Java9_v2Parser::RuleTypeBound);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(645);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 25, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<TypeBoundContext *>(_tracker.createInstance<Java9_v2Parser::TypeBound1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(635);
      match(Java9_v2Parser::EXTENDS);
      setState(636);
      typeVariable();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<TypeBoundContext *>(_tracker.createInstance<Java9_v2Parser::TypeBound2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(637);
      match(Java9_v2Parser::EXTENDS);
      setState(638);
      classOrInterfaceType();
      setState(642);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Java9_v2Parser::BITAND) {
        setState(639);
        additionalBound();
        setState(644);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AdditionalBoundContext ------------------------------------------------------------------

Java9_v2Parser::AdditionalBoundContext::AdditionalBoundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::AdditionalBoundContext::BITAND() {
  return getToken(Java9_v2Parser::BITAND, 0);
}

Java9_v2Parser::InterfaceTypeContext* Java9_v2Parser::AdditionalBoundContext::interfaceType() {
  return getRuleContext<Java9_v2Parser::InterfaceTypeContext>(0);
}


size_t Java9_v2Parser::AdditionalBoundContext::getRuleIndex() const {
  return Java9_v2Parser::RuleAdditionalBound;
}

void Java9_v2Parser::AdditionalBoundContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAdditionalBound(this);
}

void Java9_v2Parser::AdditionalBoundContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAdditionalBound(this);
}


antlrcpp::Any Java9_v2Parser::AdditionalBoundContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitAdditionalBound(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::AdditionalBoundContext* Java9_v2Parser::additionalBound() {
  AdditionalBoundContext *_localctx = _tracker.createInstance<AdditionalBoundContext>(_ctx, getState());
  enterRule(_localctx, 38, Java9_v2Parser::RuleAdditionalBound);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(647);
    match(Java9_v2Parser::BITAND);
    setState(648);
    interfaceType();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeArgumentsContext ------------------------------------------------------------------

Java9_v2Parser::TypeArgumentsContext::TypeArgumentsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::TypeArgumentsContext::LT() {
  return getToken(Java9_v2Parser::LT, 0);
}

Java9_v2Parser::TypeArgumentListContext* Java9_v2Parser::TypeArgumentsContext::typeArgumentList() {
  return getRuleContext<Java9_v2Parser::TypeArgumentListContext>(0);
}

tree::TerminalNode* Java9_v2Parser::TypeArgumentsContext::GT() {
  return getToken(Java9_v2Parser::GT, 0);
}


size_t Java9_v2Parser::TypeArgumentsContext::getRuleIndex() const {
  return Java9_v2Parser::RuleTypeArguments;
}

void Java9_v2Parser::TypeArgumentsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeArguments(this);
}

void Java9_v2Parser::TypeArgumentsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeArguments(this);
}


antlrcpp::Any Java9_v2Parser::TypeArgumentsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitTypeArguments(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::TypeArgumentsContext* Java9_v2Parser::typeArguments() {
  TypeArgumentsContext *_localctx = _tracker.createInstance<TypeArgumentsContext>(_ctx, getState());
  enterRule(_localctx, 40, Java9_v2Parser::RuleTypeArguments);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(650);
    match(Java9_v2Parser::LT);
    setState(651);
    typeArgumentList();
    setState(652);
    match(Java9_v2Parser::GT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeArgumentListContext ------------------------------------------------------------------

Java9_v2Parser::TypeArgumentListContext::TypeArgumentListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Java9_v2Parser::TypeArgumentContext *> Java9_v2Parser::TypeArgumentListContext::typeArgument() {
  return getRuleContexts<Java9_v2Parser::TypeArgumentContext>();
}

Java9_v2Parser::TypeArgumentContext* Java9_v2Parser::TypeArgumentListContext::typeArgument(size_t i) {
  return getRuleContext<Java9_v2Parser::TypeArgumentContext>(i);
}

std::vector<tree::TerminalNode *> Java9_v2Parser::TypeArgumentListContext::COMMA() {
  return getTokens(Java9_v2Parser::COMMA);
}

tree::TerminalNode* Java9_v2Parser::TypeArgumentListContext::COMMA(size_t i) {
  return getToken(Java9_v2Parser::COMMA, i);
}


size_t Java9_v2Parser::TypeArgumentListContext::getRuleIndex() const {
  return Java9_v2Parser::RuleTypeArgumentList;
}

void Java9_v2Parser::TypeArgumentListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeArgumentList(this);
}

void Java9_v2Parser::TypeArgumentListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeArgumentList(this);
}


antlrcpp::Any Java9_v2Parser::TypeArgumentListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitTypeArgumentList(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::TypeArgumentListContext* Java9_v2Parser::typeArgumentList() {
  TypeArgumentListContext *_localctx = _tracker.createInstance<TypeArgumentListContext>(_ctx, getState());
  enterRule(_localctx, 42, Java9_v2Parser::RuleTypeArgumentList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(654);
    typeArgument();
    setState(659);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java9_v2Parser::COMMA) {
      setState(655);
      match(Java9_v2Parser::COMMA);
      setState(656);
      typeArgument();
      setState(661);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeArgumentContext ------------------------------------------------------------------

Java9_v2Parser::TypeArgumentContext::TypeArgumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::TypeArgumentContext::getRuleIndex() const {
  return Java9_v2Parser::RuleTypeArgument;
}

void Java9_v2Parser::TypeArgumentContext::copyFrom(TypeArgumentContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- TypeArgument1Context ------------------------------------------------------------------

Java9_v2Parser::ReferenceTypeContext* Java9_v2Parser::TypeArgument1Context::referenceType() {
  return getRuleContext<Java9_v2Parser::ReferenceTypeContext>(0);
}

Java9_v2Parser::TypeArgument1Context::TypeArgument1Context(TypeArgumentContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::TypeArgument1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeArgument1(this);
}
void Java9_v2Parser::TypeArgument1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeArgument1(this);
}

antlrcpp::Any Java9_v2Parser::TypeArgument1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitTypeArgument1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TypeArgument2Context ------------------------------------------------------------------

Java9_v2Parser::WildcardContext* Java9_v2Parser::TypeArgument2Context::wildcard() {
  return getRuleContext<Java9_v2Parser::WildcardContext>(0);
}

Java9_v2Parser::TypeArgument2Context::TypeArgument2Context(TypeArgumentContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::TypeArgument2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeArgument2(this);
}
void Java9_v2Parser::TypeArgument2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeArgument2(this);
}

antlrcpp::Any Java9_v2Parser::TypeArgument2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitTypeArgument2(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::TypeArgumentContext* Java9_v2Parser::typeArgument() {
  TypeArgumentContext *_localctx = _tracker.createInstance<TypeArgumentContext>(_ctx, getState());
  enterRule(_localctx, 44, Java9_v2Parser::RuleTypeArgument);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(664);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 27, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<TypeArgumentContext *>(_tracker.createInstance<Java9_v2Parser::TypeArgument1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(662);
      referenceType();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<TypeArgumentContext *>(_tracker.createInstance<Java9_v2Parser::TypeArgument2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(663);
      wildcard();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WildcardContext ------------------------------------------------------------------

Java9_v2Parser::WildcardContext::WildcardContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::WildcardContext::QUESTION() {
  return getToken(Java9_v2Parser::QUESTION, 0);
}

std::vector<Java9_v2Parser::AnnotationContext *> Java9_v2Parser::WildcardContext::annotation() {
  return getRuleContexts<Java9_v2Parser::AnnotationContext>();
}

Java9_v2Parser::AnnotationContext* Java9_v2Parser::WildcardContext::annotation(size_t i) {
  return getRuleContext<Java9_v2Parser::AnnotationContext>(i);
}

Java9_v2Parser::WildcardBoundsContext* Java9_v2Parser::WildcardContext::wildcardBounds() {
  return getRuleContext<Java9_v2Parser::WildcardBoundsContext>(0);
}


size_t Java9_v2Parser::WildcardContext::getRuleIndex() const {
  return Java9_v2Parser::RuleWildcard;
}

void Java9_v2Parser::WildcardContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWildcard(this);
}

void Java9_v2Parser::WildcardContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWildcard(this);
}


antlrcpp::Any Java9_v2Parser::WildcardContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitWildcard(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::WildcardContext* Java9_v2Parser::wildcard() {
  WildcardContext *_localctx = _tracker.createInstance<WildcardContext>(_ctx, getState());
  enterRule(_localctx, 46, Java9_v2Parser::RuleWildcard);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(669);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java9_v2Parser::AT) {
      setState(666);
      annotation();
      setState(671);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(672);
    match(Java9_v2Parser::QUESTION);
    setState(674);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java9_v2Parser::EXTENDS

    || _la == Java9_v2Parser::SUPER) {
      setState(673);
      wildcardBounds();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WildcardBoundsContext ------------------------------------------------------------------

Java9_v2Parser::WildcardBoundsContext::WildcardBoundsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::WildcardBoundsContext::getRuleIndex() const {
  return Java9_v2Parser::RuleWildcardBounds;
}

void Java9_v2Parser::WildcardBoundsContext::copyFrom(WildcardBoundsContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- WildcardBound2Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::WildcardBound2Context::SUPER() {
  return getToken(Java9_v2Parser::SUPER, 0);
}

Java9_v2Parser::ReferenceTypeContext* Java9_v2Parser::WildcardBound2Context::referenceType() {
  return getRuleContext<Java9_v2Parser::ReferenceTypeContext>(0);
}

Java9_v2Parser::WildcardBound2Context::WildcardBound2Context(WildcardBoundsContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::WildcardBound2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWildcardBound2(this);
}
void Java9_v2Parser::WildcardBound2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWildcardBound2(this);
}

antlrcpp::Any Java9_v2Parser::WildcardBound2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitWildcardBound2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- WildcardBounds1Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::WildcardBounds1Context::EXTENDS() {
  return getToken(Java9_v2Parser::EXTENDS, 0);
}

Java9_v2Parser::ReferenceTypeContext* Java9_v2Parser::WildcardBounds1Context::referenceType() {
  return getRuleContext<Java9_v2Parser::ReferenceTypeContext>(0);
}

Java9_v2Parser::WildcardBounds1Context::WildcardBounds1Context(WildcardBoundsContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::WildcardBounds1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWildcardBounds1(this);
}
void Java9_v2Parser::WildcardBounds1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWildcardBounds1(this);
}

antlrcpp::Any Java9_v2Parser::WildcardBounds1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitWildcardBounds1(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::WildcardBoundsContext* Java9_v2Parser::wildcardBounds() {
  WildcardBoundsContext *_localctx = _tracker.createInstance<WildcardBoundsContext>(_ctx, getState());
  enterRule(_localctx, 48, Java9_v2Parser::RuleWildcardBounds);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(680);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Java9_v2Parser::EXTENDS: {
        _localctx = dynamic_cast<WildcardBoundsContext *>(_tracker.createInstance<Java9_v2Parser::WildcardBounds1Context>(_localctx));
        enterOuterAlt(_localctx, 1);
        setState(676);
        match(Java9_v2Parser::EXTENDS);
        setState(677);
        referenceType();
        break;
      }

      case Java9_v2Parser::SUPER: {
        _localctx = dynamic_cast<WildcardBoundsContext *>(_tracker.createInstance<Java9_v2Parser::WildcardBound2Context>(_localctx));
        enterOuterAlt(_localctx, 2);
        setState(678);
        match(Java9_v2Parser::SUPER);
        setState(679);
        referenceType();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleNameContext ------------------------------------------------------------------

Java9_v2Parser::ModuleNameContext::ModuleNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::ModuleNameContext::getRuleIndex() const {
  return Java9_v2Parser::RuleModuleName;
}

void Java9_v2Parser::ModuleNameContext::copyFrom(ModuleNameContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ModuleName1Context ------------------------------------------------------------------

Java9_v2Parser::IdentifierContext* Java9_v2Parser::ModuleName1Context::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

Java9_v2Parser::ModuleName1Context::ModuleName1Context(ModuleNameContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ModuleName1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModuleName1(this);
}
void Java9_v2Parser::ModuleName1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModuleName1(this);
}

antlrcpp::Any Java9_v2Parser::ModuleName1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitModuleName1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ModuleName2Context ------------------------------------------------------------------

Java9_v2Parser::ModuleNameContext* Java9_v2Parser::ModuleName2Context::moduleName() {
  return getRuleContext<Java9_v2Parser::ModuleNameContext>(0);
}

tree::TerminalNode* Java9_v2Parser::ModuleName2Context::DOT() {
  return getToken(Java9_v2Parser::DOT, 0);
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::ModuleName2Context::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

Java9_v2Parser::ModuleName2Context::ModuleName2Context(ModuleNameContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ModuleName2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModuleName2(this);
}
void Java9_v2Parser::ModuleName2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModuleName2(this);
}

antlrcpp::Any Java9_v2Parser::ModuleName2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitModuleName2(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::ModuleNameContext* Java9_v2Parser::moduleName() {
   return moduleName(0);
}

Java9_v2Parser::ModuleNameContext* Java9_v2Parser::moduleName(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Java9_v2Parser::ModuleNameContext *_localctx = _tracker.createInstance<ModuleNameContext>(_ctx, parentState);
  Java9_v2Parser::ModuleNameContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 50;
  enterRecursionRule(_localctx, 50, Java9_v2Parser::RuleModuleName, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    _localctx = _tracker.createInstance<ModuleName1Context>(_localctx);
    _ctx = _localctx;
    previousContext = _localctx;

    setState(683);
    identifier();
    _ctx->stop = _input->LT(-1);
    setState(690);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 31, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        auto newContext = _tracker.createInstance<ModuleName2Context>(_tracker.createInstance<ModuleNameContext>(parentContext, parentState));
        _localctx = newContext;
        pushNewRecursionContext(newContext, startState, RuleModuleName);
        setState(685);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(686);
        match(Java9_v2Parser::DOT);
        setState(687);
        identifier(); 
      }
      setState(692);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 31, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- PackageNameContext ------------------------------------------------------------------

Java9_v2Parser::PackageNameContext::PackageNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::PackageNameContext::getRuleIndex() const {
  return Java9_v2Parser::RulePackageName;
}

void Java9_v2Parser::PackageNameContext::copyFrom(PackageNameContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- PackageName2Context ------------------------------------------------------------------

Java9_v2Parser::PackageNameContext* Java9_v2Parser::PackageName2Context::packageName() {
  return getRuleContext<Java9_v2Parser::PackageNameContext>(0);
}

tree::TerminalNode* Java9_v2Parser::PackageName2Context::DOT() {
  return getToken(Java9_v2Parser::DOT, 0);
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::PackageName2Context::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

Java9_v2Parser::PackageName2Context::PackageName2Context(PackageNameContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PackageName2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPackageName2(this);
}
void Java9_v2Parser::PackageName2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPackageName2(this);
}

antlrcpp::Any Java9_v2Parser::PackageName2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPackageName2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PackageName1Context ------------------------------------------------------------------

Java9_v2Parser::IdentifierContext* Java9_v2Parser::PackageName1Context::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

Java9_v2Parser::PackageName1Context::PackageName1Context(PackageNameContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PackageName1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPackageName1(this);
}
void Java9_v2Parser::PackageName1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPackageName1(this);
}

antlrcpp::Any Java9_v2Parser::PackageName1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPackageName1(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::PackageNameContext* Java9_v2Parser::packageName() {
   return packageName(0);
}

Java9_v2Parser::PackageNameContext* Java9_v2Parser::packageName(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Java9_v2Parser::PackageNameContext *_localctx = _tracker.createInstance<PackageNameContext>(_ctx, parentState);
  Java9_v2Parser::PackageNameContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 52;
  enterRecursionRule(_localctx, 52, Java9_v2Parser::RulePackageName, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    _localctx = _tracker.createInstance<PackageName1Context>(_localctx);
    _ctx = _localctx;
    previousContext = _localctx;

    setState(694);
    identifier();
    _ctx->stop = _input->LT(-1);
    setState(701);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 32, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        auto newContext = _tracker.createInstance<PackageName2Context>(_tracker.createInstance<PackageNameContext>(parentContext, parentState));
        _localctx = newContext;
        pushNewRecursionContext(newContext, startState, RulePackageName);
        setState(696);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(697);
        match(Java9_v2Parser::DOT);
        setState(698);
        identifier(); 
      }
      setState(703);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 32, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- TypeNameContext ------------------------------------------------------------------

Java9_v2Parser::TypeNameContext::TypeNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::TypeNameContext::getRuleIndex() const {
  return Java9_v2Parser::RuleTypeName;
}

void Java9_v2Parser::TypeNameContext::copyFrom(TypeNameContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- TypeName1Context ------------------------------------------------------------------

Java9_v2Parser::IdentifierContext* Java9_v2Parser::TypeName1Context::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

Java9_v2Parser::TypeName1Context::TypeName1Context(TypeNameContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::TypeName1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeName1(this);
}
void Java9_v2Parser::TypeName1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeName1(this);
}

antlrcpp::Any Java9_v2Parser::TypeName1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitTypeName1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TypeName2Context ------------------------------------------------------------------

Java9_v2Parser::PackageOrTypeNameContext* Java9_v2Parser::TypeName2Context::packageOrTypeName() {
  return getRuleContext<Java9_v2Parser::PackageOrTypeNameContext>(0);
}

tree::TerminalNode* Java9_v2Parser::TypeName2Context::DOT() {
  return getToken(Java9_v2Parser::DOT, 0);
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::TypeName2Context::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

Java9_v2Parser::TypeName2Context::TypeName2Context(TypeNameContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::TypeName2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeName2(this);
}
void Java9_v2Parser::TypeName2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeName2(this);
}

antlrcpp::Any Java9_v2Parser::TypeName2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitTypeName2(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::TypeNameContext* Java9_v2Parser::typeName() {
  TypeNameContext *_localctx = _tracker.createInstance<TypeNameContext>(_ctx, getState());
  enterRule(_localctx, 54, Java9_v2Parser::RuleTypeName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(709);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<TypeNameContext *>(_tracker.createInstance<Java9_v2Parser::TypeName1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(704);
      identifier();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<TypeNameContext *>(_tracker.createInstance<Java9_v2Parser::TypeName2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(705);
      packageOrTypeName(0);
      setState(706);
      match(Java9_v2Parser::DOT);
      setState(707);
      identifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PackageOrTypeNameContext ------------------------------------------------------------------

Java9_v2Parser::PackageOrTypeNameContext::PackageOrTypeNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::PackageOrTypeNameContext::getRuleIndex() const {
  return Java9_v2Parser::RulePackageOrTypeName;
}

void Java9_v2Parser::PackageOrTypeNameContext::copyFrom(PackageOrTypeNameContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- PackageOrTypeName1Context ------------------------------------------------------------------

Java9_v2Parser::IdentifierContext* Java9_v2Parser::PackageOrTypeName1Context::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

Java9_v2Parser::PackageOrTypeName1Context::PackageOrTypeName1Context(PackageOrTypeNameContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PackageOrTypeName1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPackageOrTypeName1(this);
}
void Java9_v2Parser::PackageOrTypeName1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPackageOrTypeName1(this);
}

antlrcpp::Any Java9_v2Parser::PackageOrTypeName1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPackageOrTypeName1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PackageOrTypeName2Context ------------------------------------------------------------------

Java9_v2Parser::PackageOrTypeNameContext* Java9_v2Parser::PackageOrTypeName2Context::packageOrTypeName() {
  return getRuleContext<Java9_v2Parser::PackageOrTypeNameContext>(0);
}

tree::TerminalNode* Java9_v2Parser::PackageOrTypeName2Context::DOT() {
  return getToken(Java9_v2Parser::DOT, 0);
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::PackageOrTypeName2Context::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

Java9_v2Parser::PackageOrTypeName2Context::PackageOrTypeName2Context(PackageOrTypeNameContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PackageOrTypeName2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPackageOrTypeName2(this);
}
void Java9_v2Parser::PackageOrTypeName2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPackageOrTypeName2(this);
}

antlrcpp::Any Java9_v2Parser::PackageOrTypeName2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPackageOrTypeName2(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::PackageOrTypeNameContext* Java9_v2Parser::packageOrTypeName() {
   return packageOrTypeName(0);
}

Java9_v2Parser::PackageOrTypeNameContext* Java9_v2Parser::packageOrTypeName(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Java9_v2Parser::PackageOrTypeNameContext *_localctx = _tracker.createInstance<PackageOrTypeNameContext>(_ctx, parentState);
  Java9_v2Parser::PackageOrTypeNameContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 56;
  enterRecursionRule(_localctx, 56, Java9_v2Parser::RulePackageOrTypeName, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    _localctx = _tracker.createInstance<PackageOrTypeName1Context>(_localctx);
    _ctx = _localctx;
    previousContext = _localctx;

    setState(712);
    identifier();
    _ctx->stop = _input->LT(-1);
    setState(719);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 34, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        auto newContext = _tracker.createInstance<PackageOrTypeName2Context>(_tracker.createInstance<PackageOrTypeNameContext>(parentContext, parentState));
        _localctx = newContext;
        pushNewRecursionContext(newContext, startState, RulePackageOrTypeName);
        setState(714);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(715);
        match(Java9_v2Parser::DOT);
        setState(716);
        identifier(); 
      }
      setState(721);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 34, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ExpressionNameContext ------------------------------------------------------------------

Java9_v2Parser::ExpressionNameContext::ExpressionNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::ExpressionNameContext::getRuleIndex() const {
  return Java9_v2Parser::RuleExpressionName;
}

void Java9_v2Parser::ExpressionNameContext::copyFrom(ExpressionNameContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ExpressionName2Context ------------------------------------------------------------------

Java9_v2Parser::AmbiguousNameContext* Java9_v2Parser::ExpressionName2Context::ambiguousName() {
  return getRuleContext<Java9_v2Parser::AmbiguousNameContext>(0);
}

tree::TerminalNode* Java9_v2Parser::ExpressionName2Context::DOT() {
  return getToken(Java9_v2Parser::DOT, 0);
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::ExpressionName2Context::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

Java9_v2Parser::ExpressionName2Context::ExpressionName2Context(ExpressionNameContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ExpressionName2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpressionName2(this);
}
void Java9_v2Parser::ExpressionName2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpressionName2(this);
}

antlrcpp::Any Java9_v2Parser::ExpressionName2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitExpressionName2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ExpressionName1Context ------------------------------------------------------------------

Java9_v2Parser::IdentifierContext* Java9_v2Parser::ExpressionName1Context::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

Java9_v2Parser::ExpressionName1Context::ExpressionName1Context(ExpressionNameContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ExpressionName1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpressionName1(this);
}
void Java9_v2Parser::ExpressionName1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpressionName1(this);
}

antlrcpp::Any Java9_v2Parser::ExpressionName1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitExpressionName1(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::ExpressionNameContext* Java9_v2Parser::expressionName() {
  ExpressionNameContext *_localctx = _tracker.createInstance<ExpressionNameContext>(_ctx, getState());
  enterRule(_localctx, 58, Java9_v2Parser::RuleExpressionName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(727);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 35, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<ExpressionNameContext *>(_tracker.createInstance<Java9_v2Parser::ExpressionName1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(722);
      identifier();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<ExpressionNameContext *>(_tracker.createInstance<Java9_v2Parser::ExpressionName2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(723);
      ambiguousName(0);
      setState(724);
      match(Java9_v2Parser::DOT);
      setState(725);
      identifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodNameContext ------------------------------------------------------------------

Java9_v2Parser::MethodNameContext::MethodNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::MethodNameContext::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}


size_t Java9_v2Parser::MethodNameContext::getRuleIndex() const {
  return Java9_v2Parser::RuleMethodName;
}

void Java9_v2Parser::MethodNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodName(this);
}

void Java9_v2Parser::MethodNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodName(this);
}


antlrcpp::Any Java9_v2Parser::MethodNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitMethodName(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::MethodNameContext* Java9_v2Parser::methodName() {
  MethodNameContext *_localctx = _tracker.createInstance<MethodNameContext>(_ctx, getState());
  enterRule(_localctx, 60, Java9_v2Parser::RuleMethodName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(729);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AmbiguousNameContext ------------------------------------------------------------------

Java9_v2Parser::AmbiguousNameContext::AmbiguousNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::AmbiguousNameContext::getRuleIndex() const {
  return Java9_v2Parser::RuleAmbiguousName;
}

void Java9_v2Parser::AmbiguousNameContext::copyFrom(AmbiguousNameContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- AmbiguousName1Context ------------------------------------------------------------------

Java9_v2Parser::IdentifierContext* Java9_v2Parser::AmbiguousName1Context::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

Java9_v2Parser::AmbiguousName1Context::AmbiguousName1Context(AmbiguousNameContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::AmbiguousName1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAmbiguousName1(this);
}
void Java9_v2Parser::AmbiguousName1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAmbiguousName1(this);
}

antlrcpp::Any Java9_v2Parser::AmbiguousName1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitAmbiguousName1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AmbiguousName2Context ------------------------------------------------------------------

Java9_v2Parser::AmbiguousNameContext* Java9_v2Parser::AmbiguousName2Context::ambiguousName() {
  return getRuleContext<Java9_v2Parser::AmbiguousNameContext>(0);
}

tree::TerminalNode* Java9_v2Parser::AmbiguousName2Context::DOT() {
  return getToken(Java9_v2Parser::DOT, 0);
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::AmbiguousName2Context::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

Java9_v2Parser::AmbiguousName2Context::AmbiguousName2Context(AmbiguousNameContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::AmbiguousName2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAmbiguousName2(this);
}
void Java9_v2Parser::AmbiguousName2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAmbiguousName2(this);
}

antlrcpp::Any Java9_v2Parser::AmbiguousName2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitAmbiguousName2(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::AmbiguousNameContext* Java9_v2Parser::ambiguousName() {
   return ambiguousName(0);
}

Java9_v2Parser::AmbiguousNameContext* Java9_v2Parser::ambiguousName(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Java9_v2Parser::AmbiguousNameContext *_localctx = _tracker.createInstance<AmbiguousNameContext>(_ctx, parentState);
  Java9_v2Parser::AmbiguousNameContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 62;
  enterRecursionRule(_localctx, 62, Java9_v2Parser::RuleAmbiguousName, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    _localctx = _tracker.createInstance<AmbiguousName1Context>(_localctx);
    _ctx = _localctx;
    previousContext = _localctx;

    setState(732);
    identifier();
    _ctx->stop = _input->LT(-1);
    setState(739);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 36, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        auto newContext = _tracker.createInstance<AmbiguousName2Context>(_tracker.createInstance<AmbiguousNameContext>(parentContext, parentState));
        _localctx = newContext;
        pushNewRecursionContext(newContext, startState, RuleAmbiguousName);
        setState(734);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(735);
        match(Java9_v2Parser::DOT);
        setState(736);
        identifier(); 
      }
      setState(741);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 36, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- CompilationUnitContext ------------------------------------------------------------------

Java9_v2Parser::CompilationUnitContext::CompilationUnitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::CompilationUnitContext::getRuleIndex() const {
  return Java9_v2Parser::RuleCompilationUnit;
}

void Java9_v2Parser::CompilationUnitContext::copyFrom(CompilationUnitContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- CompilationUnit2Context ------------------------------------------------------------------

Java9_v2Parser::ModularCompilationContext* Java9_v2Parser::CompilationUnit2Context::modularCompilation() {
  return getRuleContext<Java9_v2Parser::ModularCompilationContext>(0);
}

Java9_v2Parser::CompilationUnit2Context::CompilationUnit2Context(CompilationUnitContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::CompilationUnit2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCompilationUnit2(this);
}
void Java9_v2Parser::CompilationUnit2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCompilationUnit2(this);
}

antlrcpp::Any Java9_v2Parser::CompilationUnit2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitCompilationUnit2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- CompilationUnit1Context ------------------------------------------------------------------

Java9_v2Parser::OrdinaryCompilationContext* Java9_v2Parser::CompilationUnit1Context::ordinaryCompilation() {
  return getRuleContext<Java9_v2Parser::OrdinaryCompilationContext>(0);
}

Java9_v2Parser::CompilationUnit1Context::CompilationUnit1Context(CompilationUnitContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::CompilationUnit1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCompilationUnit1(this);
}
void Java9_v2Parser::CompilationUnit1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCompilationUnit1(this);
}

antlrcpp::Any Java9_v2Parser::CompilationUnit1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitCompilationUnit1(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::CompilationUnitContext* Java9_v2Parser::compilationUnit() {
  CompilationUnitContext *_localctx = _tracker.createInstance<CompilationUnitContext>(_ctx, getState());
  enterRule(_localctx, 64, Java9_v2Parser::RuleCompilationUnit);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(744);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 37, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<CompilationUnitContext *>(_tracker.createInstance<Java9_v2Parser::CompilationUnit1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(742);
      ordinaryCompilation();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<CompilationUnitContext *>(_tracker.createInstance<Java9_v2Parser::CompilationUnit2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(743);
      modularCompilation();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrdinaryCompilationContext ------------------------------------------------------------------

Java9_v2Parser::OrdinaryCompilationContext::OrdinaryCompilationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::OrdinaryCompilationContext::EOF() {
  return getToken(Java9_v2Parser::EOF, 0);
}

Java9_v2Parser::PackageDeclarationContext* Java9_v2Parser::OrdinaryCompilationContext::packageDeclaration() {
  return getRuleContext<Java9_v2Parser::PackageDeclarationContext>(0);
}

std::vector<Java9_v2Parser::ImportDeclarationContext *> Java9_v2Parser::OrdinaryCompilationContext::importDeclaration() {
  return getRuleContexts<Java9_v2Parser::ImportDeclarationContext>();
}

Java9_v2Parser::ImportDeclarationContext* Java9_v2Parser::OrdinaryCompilationContext::importDeclaration(size_t i) {
  return getRuleContext<Java9_v2Parser::ImportDeclarationContext>(i);
}

std::vector<Java9_v2Parser::TypeDeclarationContext *> Java9_v2Parser::OrdinaryCompilationContext::typeDeclaration() {
  return getRuleContexts<Java9_v2Parser::TypeDeclarationContext>();
}

Java9_v2Parser::TypeDeclarationContext* Java9_v2Parser::OrdinaryCompilationContext::typeDeclaration(size_t i) {
  return getRuleContext<Java9_v2Parser::TypeDeclarationContext>(i);
}


size_t Java9_v2Parser::OrdinaryCompilationContext::getRuleIndex() const {
  return Java9_v2Parser::RuleOrdinaryCompilation;
}

void Java9_v2Parser::OrdinaryCompilationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOrdinaryCompilation(this);
}

void Java9_v2Parser::OrdinaryCompilationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOrdinaryCompilation(this);
}


antlrcpp::Any Java9_v2Parser::OrdinaryCompilationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitOrdinaryCompilation(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::OrdinaryCompilationContext* Java9_v2Parser::ordinaryCompilation() {
  OrdinaryCompilationContext *_localctx = _tracker.createInstance<OrdinaryCompilationContext>(_ctx, getState());
  enterRule(_localctx, 66, Java9_v2Parser::RuleOrdinaryCompilation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(747);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 38, _ctx)) {
    case 1: {
      setState(746);
      packageDeclaration();
      break;
    }

    default:
      break;
    }
    setState(752);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java9_v2Parser::IMPORT) {
      setState(749);
      importDeclaration();
      setState(754);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(758);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << Java9_v2Parser::ABSTRACT)
      | (1ULL << Java9_v2Parser::CLASS)
      | (1ULL << Java9_v2Parser::ENUM)
      | (1ULL << Java9_v2Parser::FINAL)
      | (1ULL << Java9_v2Parser::INTERFACE)
      | (1ULL << Java9_v2Parser::PRIVATE)
      | (1ULL << Java9_v2Parser::PROTECTED)
      | (1ULL << Java9_v2Parser::PUBLIC)
      | (1ULL << Java9_v2Parser::STATIC)
      | (1ULL << Java9_v2Parser::STRICTFP))) != 0) || _la == Java9_v2Parser::SEMI

    || _la == Java9_v2Parser::AT) {
      setState(755);
      typeDeclaration();
      setState(760);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(761);
    match(Java9_v2Parser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModularCompilationContext ------------------------------------------------------------------

Java9_v2Parser::ModularCompilationContext::ModularCompilationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::ModuleDeclarationContext* Java9_v2Parser::ModularCompilationContext::moduleDeclaration() {
  return getRuleContext<Java9_v2Parser::ModuleDeclarationContext>(0);
}

std::vector<Java9_v2Parser::ImportDeclarationContext *> Java9_v2Parser::ModularCompilationContext::importDeclaration() {
  return getRuleContexts<Java9_v2Parser::ImportDeclarationContext>();
}

Java9_v2Parser::ImportDeclarationContext* Java9_v2Parser::ModularCompilationContext::importDeclaration(size_t i) {
  return getRuleContext<Java9_v2Parser::ImportDeclarationContext>(i);
}


size_t Java9_v2Parser::ModularCompilationContext::getRuleIndex() const {
  return Java9_v2Parser::RuleModularCompilation;
}

void Java9_v2Parser::ModularCompilationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModularCompilation(this);
}

void Java9_v2Parser::ModularCompilationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModularCompilation(this);
}


antlrcpp::Any Java9_v2Parser::ModularCompilationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitModularCompilation(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::ModularCompilationContext* Java9_v2Parser::modularCompilation() {
  ModularCompilationContext *_localctx = _tracker.createInstance<ModularCompilationContext>(_ctx, getState());
  enterRule(_localctx, 68, Java9_v2Parser::RuleModularCompilation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(766);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java9_v2Parser::IMPORT) {
      setState(763);
      importDeclaration();
      setState(768);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(769);
    moduleDeclaration();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PackageDeclarationContext ------------------------------------------------------------------

Java9_v2Parser::PackageDeclarationContext::PackageDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::PackageDeclarationContext::PACKAGE() {
  return getToken(Java9_v2Parser::PACKAGE, 0);
}

Java9_v2Parser::PackageNameContext* Java9_v2Parser::PackageDeclarationContext::packageName() {
  return getRuleContext<Java9_v2Parser::PackageNameContext>(0);
}

tree::TerminalNode* Java9_v2Parser::PackageDeclarationContext::SEMI() {
  return getToken(Java9_v2Parser::SEMI, 0);
}

std::vector<Java9_v2Parser::PackageModifierContext *> Java9_v2Parser::PackageDeclarationContext::packageModifier() {
  return getRuleContexts<Java9_v2Parser::PackageModifierContext>();
}

Java9_v2Parser::PackageModifierContext* Java9_v2Parser::PackageDeclarationContext::packageModifier(size_t i) {
  return getRuleContext<Java9_v2Parser::PackageModifierContext>(i);
}


size_t Java9_v2Parser::PackageDeclarationContext::getRuleIndex() const {
  return Java9_v2Parser::RulePackageDeclaration;
}

void Java9_v2Parser::PackageDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPackageDeclaration(this);
}

void Java9_v2Parser::PackageDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPackageDeclaration(this);
}


antlrcpp::Any Java9_v2Parser::PackageDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPackageDeclaration(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::PackageDeclarationContext* Java9_v2Parser::packageDeclaration() {
  PackageDeclarationContext *_localctx = _tracker.createInstance<PackageDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 70, Java9_v2Parser::RulePackageDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(774);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java9_v2Parser::AT) {
      setState(771);
      packageModifier();
      setState(776);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(777);
    match(Java9_v2Parser::PACKAGE);
    setState(778);
    packageName(0);
    setState(779);
    match(Java9_v2Parser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PackageModifierContext ------------------------------------------------------------------

Java9_v2Parser::PackageModifierContext::PackageModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::AnnotationContext* Java9_v2Parser::PackageModifierContext::annotation() {
  return getRuleContext<Java9_v2Parser::AnnotationContext>(0);
}


size_t Java9_v2Parser::PackageModifierContext::getRuleIndex() const {
  return Java9_v2Parser::RulePackageModifier;
}

void Java9_v2Parser::PackageModifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPackageModifier(this);
}

void Java9_v2Parser::PackageModifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPackageModifier(this);
}


antlrcpp::Any Java9_v2Parser::PackageModifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPackageModifier(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::PackageModifierContext* Java9_v2Parser::packageModifier() {
  PackageModifierContext *_localctx = _tracker.createInstance<PackageModifierContext>(_ctx, getState());
  enterRule(_localctx, 72, Java9_v2Parser::RulePackageModifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(781);
    annotation();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImportDeclarationContext ------------------------------------------------------------------

Java9_v2Parser::ImportDeclarationContext::ImportDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::ImportDeclarationContext::getRuleIndex() const {
  return Java9_v2Parser::RuleImportDeclaration;
}

void Java9_v2Parser::ImportDeclarationContext::copyFrom(ImportDeclarationContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ImportDeclaration3Context ------------------------------------------------------------------

Java9_v2Parser::SingleStaticImportDeclarationContext* Java9_v2Parser::ImportDeclaration3Context::singleStaticImportDeclaration() {
  return getRuleContext<Java9_v2Parser::SingleStaticImportDeclarationContext>(0);
}

Java9_v2Parser::ImportDeclaration3Context::ImportDeclaration3Context(ImportDeclarationContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ImportDeclaration3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImportDeclaration3(this);
}
void Java9_v2Parser::ImportDeclaration3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImportDeclaration3(this);
}

antlrcpp::Any Java9_v2Parser::ImportDeclaration3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitImportDeclaration3(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ImportDeclaration4Context ------------------------------------------------------------------

Java9_v2Parser::StaticImportOnDemandDeclarationContext* Java9_v2Parser::ImportDeclaration4Context::staticImportOnDemandDeclaration() {
  return getRuleContext<Java9_v2Parser::StaticImportOnDemandDeclarationContext>(0);
}

Java9_v2Parser::ImportDeclaration4Context::ImportDeclaration4Context(ImportDeclarationContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ImportDeclaration4Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImportDeclaration4(this);
}
void Java9_v2Parser::ImportDeclaration4Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImportDeclaration4(this);
}

antlrcpp::Any Java9_v2Parser::ImportDeclaration4Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitImportDeclaration4(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ImportDeclaration1Context ------------------------------------------------------------------

Java9_v2Parser::SingleTypeImportDeclarationContext* Java9_v2Parser::ImportDeclaration1Context::singleTypeImportDeclaration() {
  return getRuleContext<Java9_v2Parser::SingleTypeImportDeclarationContext>(0);
}

Java9_v2Parser::ImportDeclaration1Context::ImportDeclaration1Context(ImportDeclarationContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ImportDeclaration1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImportDeclaration1(this);
}
void Java9_v2Parser::ImportDeclaration1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImportDeclaration1(this);
}

antlrcpp::Any Java9_v2Parser::ImportDeclaration1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitImportDeclaration1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ImportDeclaration2Context ------------------------------------------------------------------

Java9_v2Parser::TypeImportOnDemandDeclarationContext* Java9_v2Parser::ImportDeclaration2Context::typeImportOnDemandDeclaration() {
  return getRuleContext<Java9_v2Parser::TypeImportOnDemandDeclarationContext>(0);
}

Java9_v2Parser::ImportDeclaration2Context::ImportDeclaration2Context(ImportDeclarationContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ImportDeclaration2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImportDeclaration2(this);
}
void Java9_v2Parser::ImportDeclaration2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImportDeclaration2(this);
}

antlrcpp::Any Java9_v2Parser::ImportDeclaration2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitImportDeclaration2(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::ImportDeclarationContext* Java9_v2Parser::importDeclaration() {
  ImportDeclarationContext *_localctx = _tracker.createInstance<ImportDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 74, Java9_v2Parser::RuleImportDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(787);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<ImportDeclarationContext *>(_tracker.createInstance<Java9_v2Parser::ImportDeclaration1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(783);
      singleTypeImportDeclaration();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<ImportDeclarationContext *>(_tracker.createInstance<Java9_v2Parser::ImportDeclaration2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(784);
      typeImportOnDemandDeclaration();
      break;
    }

    case 3: {
      _localctx = dynamic_cast<ImportDeclarationContext *>(_tracker.createInstance<Java9_v2Parser::ImportDeclaration3Context>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(785);
      singleStaticImportDeclaration();
      break;
    }

    case 4: {
      _localctx = dynamic_cast<ImportDeclarationContext *>(_tracker.createInstance<Java9_v2Parser::ImportDeclaration4Context>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(786);
      staticImportOnDemandDeclaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SingleTypeImportDeclarationContext ------------------------------------------------------------------

Java9_v2Parser::SingleTypeImportDeclarationContext::SingleTypeImportDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::SingleTypeImportDeclarationContext::IMPORT() {
  return getToken(Java9_v2Parser::IMPORT, 0);
}

Java9_v2Parser::TypeNameContext* Java9_v2Parser::SingleTypeImportDeclarationContext::typeName() {
  return getRuleContext<Java9_v2Parser::TypeNameContext>(0);
}

tree::TerminalNode* Java9_v2Parser::SingleTypeImportDeclarationContext::SEMI() {
  return getToken(Java9_v2Parser::SEMI, 0);
}


size_t Java9_v2Parser::SingleTypeImportDeclarationContext::getRuleIndex() const {
  return Java9_v2Parser::RuleSingleTypeImportDeclaration;
}

void Java9_v2Parser::SingleTypeImportDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSingleTypeImportDeclaration(this);
}

void Java9_v2Parser::SingleTypeImportDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSingleTypeImportDeclaration(this);
}


antlrcpp::Any Java9_v2Parser::SingleTypeImportDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitSingleTypeImportDeclaration(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::SingleTypeImportDeclarationContext* Java9_v2Parser::singleTypeImportDeclaration() {
  SingleTypeImportDeclarationContext *_localctx = _tracker.createInstance<SingleTypeImportDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 76, Java9_v2Parser::RuleSingleTypeImportDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(789);
    match(Java9_v2Parser::IMPORT);
    setState(790);
    typeName();
    setState(791);
    match(Java9_v2Parser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeImportOnDemandDeclarationContext ------------------------------------------------------------------

Java9_v2Parser::TypeImportOnDemandDeclarationContext::TypeImportOnDemandDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::TypeImportOnDemandDeclarationContext::IMPORT() {
  return getToken(Java9_v2Parser::IMPORT, 0);
}

Java9_v2Parser::PackageOrTypeNameContext* Java9_v2Parser::TypeImportOnDemandDeclarationContext::packageOrTypeName() {
  return getRuleContext<Java9_v2Parser::PackageOrTypeNameContext>(0);
}

tree::TerminalNode* Java9_v2Parser::TypeImportOnDemandDeclarationContext::DOT() {
  return getToken(Java9_v2Parser::DOT, 0);
}

tree::TerminalNode* Java9_v2Parser::TypeImportOnDemandDeclarationContext::MUL() {
  return getToken(Java9_v2Parser::MUL, 0);
}

tree::TerminalNode* Java9_v2Parser::TypeImportOnDemandDeclarationContext::SEMI() {
  return getToken(Java9_v2Parser::SEMI, 0);
}


size_t Java9_v2Parser::TypeImportOnDemandDeclarationContext::getRuleIndex() const {
  return Java9_v2Parser::RuleTypeImportOnDemandDeclaration;
}

void Java9_v2Parser::TypeImportOnDemandDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeImportOnDemandDeclaration(this);
}

void Java9_v2Parser::TypeImportOnDemandDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeImportOnDemandDeclaration(this);
}


antlrcpp::Any Java9_v2Parser::TypeImportOnDemandDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitTypeImportOnDemandDeclaration(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::TypeImportOnDemandDeclarationContext* Java9_v2Parser::typeImportOnDemandDeclaration() {
  TypeImportOnDemandDeclarationContext *_localctx = _tracker.createInstance<TypeImportOnDemandDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 78, Java9_v2Parser::RuleTypeImportOnDemandDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(793);
    match(Java9_v2Parser::IMPORT);
    setState(794);
    packageOrTypeName(0);
    setState(795);
    match(Java9_v2Parser::DOT);
    setState(796);
    match(Java9_v2Parser::MUL);
    setState(797);
    match(Java9_v2Parser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SingleStaticImportDeclarationContext ------------------------------------------------------------------

Java9_v2Parser::SingleStaticImportDeclarationContext::SingleStaticImportDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::SingleStaticImportDeclarationContext::IMPORT() {
  return getToken(Java9_v2Parser::IMPORT, 0);
}

tree::TerminalNode* Java9_v2Parser::SingleStaticImportDeclarationContext::STATIC() {
  return getToken(Java9_v2Parser::STATIC, 0);
}

Java9_v2Parser::TypeNameContext* Java9_v2Parser::SingleStaticImportDeclarationContext::typeName() {
  return getRuleContext<Java9_v2Parser::TypeNameContext>(0);
}

tree::TerminalNode* Java9_v2Parser::SingleStaticImportDeclarationContext::DOT() {
  return getToken(Java9_v2Parser::DOT, 0);
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::SingleStaticImportDeclarationContext::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

tree::TerminalNode* Java9_v2Parser::SingleStaticImportDeclarationContext::SEMI() {
  return getToken(Java9_v2Parser::SEMI, 0);
}


size_t Java9_v2Parser::SingleStaticImportDeclarationContext::getRuleIndex() const {
  return Java9_v2Parser::RuleSingleStaticImportDeclaration;
}

void Java9_v2Parser::SingleStaticImportDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSingleStaticImportDeclaration(this);
}

void Java9_v2Parser::SingleStaticImportDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSingleStaticImportDeclaration(this);
}


antlrcpp::Any Java9_v2Parser::SingleStaticImportDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitSingleStaticImportDeclaration(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::SingleStaticImportDeclarationContext* Java9_v2Parser::singleStaticImportDeclaration() {
  SingleStaticImportDeclarationContext *_localctx = _tracker.createInstance<SingleStaticImportDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 80, Java9_v2Parser::RuleSingleStaticImportDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(799);
    match(Java9_v2Parser::IMPORT);
    setState(800);
    match(Java9_v2Parser::STATIC);
    setState(801);
    typeName();
    setState(802);
    match(Java9_v2Parser::DOT);
    setState(803);
    identifier();
    setState(804);
    match(Java9_v2Parser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StaticImportOnDemandDeclarationContext ------------------------------------------------------------------

Java9_v2Parser::StaticImportOnDemandDeclarationContext::StaticImportOnDemandDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::StaticImportOnDemandDeclarationContext::IMPORT() {
  return getToken(Java9_v2Parser::IMPORT, 0);
}

tree::TerminalNode* Java9_v2Parser::StaticImportOnDemandDeclarationContext::STATIC() {
  return getToken(Java9_v2Parser::STATIC, 0);
}

Java9_v2Parser::TypeNameContext* Java9_v2Parser::StaticImportOnDemandDeclarationContext::typeName() {
  return getRuleContext<Java9_v2Parser::TypeNameContext>(0);
}

tree::TerminalNode* Java9_v2Parser::StaticImportOnDemandDeclarationContext::DOT() {
  return getToken(Java9_v2Parser::DOT, 0);
}

tree::TerminalNode* Java9_v2Parser::StaticImportOnDemandDeclarationContext::MUL() {
  return getToken(Java9_v2Parser::MUL, 0);
}

tree::TerminalNode* Java9_v2Parser::StaticImportOnDemandDeclarationContext::SEMI() {
  return getToken(Java9_v2Parser::SEMI, 0);
}


size_t Java9_v2Parser::StaticImportOnDemandDeclarationContext::getRuleIndex() const {
  return Java9_v2Parser::RuleStaticImportOnDemandDeclaration;
}

void Java9_v2Parser::StaticImportOnDemandDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStaticImportOnDemandDeclaration(this);
}

void Java9_v2Parser::StaticImportOnDemandDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStaticImportOnDemandDeclaration(this);
}


antlrcpp::Any Java9_v2Parser::StaticImportOnDemandDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitStaticImportOnDemandDeclaration(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::StaticImportOnDemandDeclarationContext* Java9_v2Parser::staticImportOnDemandDeclaration() {
  StaticImportOnDemandDeclarationContext *_localctx = _tracker.createInstance<StaticImportOnDemandDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 82, Java9_v2Parser::RuleStaticImportOnDemandDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(806);
    match(Java9_v2Parser::IMPORT);
    setState(807);
    match(Java9_v2Parser::STATIC);
    setState(808);
    typeName();
    setState(809);
    match(Java9_v2Parser::DOT);
    setState(810);
    match(Java9_v2Parser::MUL);
    setState(811);
    match(Java9_v2Parser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeDeclarationContext ------------------------------------------------------------------

Java9_v2Parser::TypeDeclarationContext::TypeDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::TypeDeclarationContext::getRuleIndex() const {
  return Java9_v2Parser::RuleTypeDeclaration;
}

void Java9_v2Parser::TypeDeclarationContext::copyFrom(TypeDeclarationContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- TypeDeclaration2Context ------------------------------------------------------------------

Java9_v2Parser::InterfaceDeclarationContext* Java9_v2Parser::TypeDeclaration2Context::interfaceDeclaration() {
  return getRuleContext<Java9_v2Parser::InterfaceDeclarationContext>(0);
}

Java9_v2Parser::TypeDeclaration2Context::TypeDeclaration2Context(TypeDeclarationContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::TypeDeclaration2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeDeclaration2(this);
}
void Java9_v2Parser::TypeDeclaration2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeDeclaration2(this);
}

antlrcpp::Any Java9_v2Parser::TypeDeclaration2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitTypeDeclaration2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TypeDeclaration3Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::TypeDeclaration3Context::SEMI() {
  return getToken(Java9_v2Parser::SEMI, 0);
}

Java9_v2Parser::TypeDeclaration3Context::TypeDeclaration3Context(TypeDeclarationContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::TypeDeclaration3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeDeclaration3(this);
}
void Java9_v2Parser::TypeDeclaration3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeDeclaration3(this);
}

antlrcpp::Any Java9_v2Parser::TypeDeclaration3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitTypeDeclaration3(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TypeDeclaration1Context ------------------------------------------------------------------

Java9_v2Parser::ClassDeclarationContext* Java9_v2Parser::TypeDeclaration1Context::classDeclaration() {
  return getRuleContext<Java9_v2Parser::ClassDeclarationContext>(0);
}

Java9_v2Parser::TypeDeclaration1Context::TypeDeclaration1Context(TypeDeclarationContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::TypeDeclaration1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeDeclaration1(this);
}
void Java9_v2Parser::TypeDeclaration1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeDeclaration1(this);
}

antlrcpp::Any Java9_v2Parser::TypeDeclaration1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitTypeDeclaration1(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::TypeDeclarationContext* Java9_v2Parser::typeDeclaration() {
  TypeDeclarationContext *_localctx = _tracker.createInstance<TypeDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 84, Java9_v2Parser::RuleTypeDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(816);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 44, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<TypeDeclarationContext *>(_tracker.createInstance<Java9_v2Parser::TypeDeclaration1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(813);
      classDeclaration();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<TypeDeclarationContext *>(_tracker.createInstance<Java9_v2Parser::TypeDeclaration2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(814);
      interfaceDeclaration();
      break;
    }

    case 3: {
      _localctx = dynamic_cast<TypeDeclarationContext *>(_tracker.createInstance<Java9_v2Parser::TypeDeclaration3Context>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(815);
      match(Java9_v2Parser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleDeclarationContext ------------------------------------------------------------------

Java9_v2Parser::ModuleDeclarationContext::ModuleDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::ModuleNameContext* Java9_v2Parser::ModuleDeclarationContext::moduleName() {
  return getRuleContext<Java9_v2Parser::ModuleNameContext>(0);
}

tree::TerminalNode* Java9_v2Parser::ModuleDeclarationContext::LBRACE() {
  return getToken(Java9_v2Parser::LBRACE, 0);
}

tree::TerminalNode* Java9_v2Parser::ModuleDeclarationContext::RBRACE() {
  return getToken(Java9_v2Parser::RBRACE, 0);
}

std::vector<Java9_v2Parser::AnnotationContext *> Java9_v2Parser::ModuleDeclarationContext::annotation() {
  return getRuleContexts<Java9_v2Parser::AnnotationContext>();
}

Java9_v2Parser::AnnotationContext* Java9_v2Parser::ModuleDeclarationContext::annotation(size_t i) {
  return getRuleContext<Java9_v2Parser::AnnotationContext>(i);
}

std::vector<Java9_v2Parser::ModuleDirectiveContext *> Java9_v2Parser::ModuleDeclarationContext::moduleDirective() {
  return getRuleContexts<Java9_v2Parser::ModuleDirectiveContext>();
}

Java9_v2Parser::ModuleDirectiveContext* Java9_v2Parser::ModuleDeclarationContext::moduleDirective(size_t i) {
  return getRuleContext<Java9_v2Parser::ModuleDirectiveContext>(i);
}


size_t Java9_v2Parser::ModuleDeclarationContext::getRuleIndex() const {
  return Java9_v2Parser::RuleModuleDeclaration;
}

void Java9_v2Parser::ModuleDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModuleDeclaration(this);
}

void Java9_v2Parser::ModuleDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModuleDeclaration(this);
}


antlrcpp::Any Java9_v2Parser::ModuleDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitModuleDeclaration(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::ModuleDeclarationContext* Java9_v2Parser::moduleDeclaration() {
  ModuleDeclarationContext *_localctx = _tracker.createInstance<ModuleDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 86, Java9_v2Parser::RuleModuleDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(821);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java9_v2Parser::AT) {
      setState(818);
      annotation();
      setState(823);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(825);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java9_v2Parser::T__0) {
      setState(824);
      match(Java9_v2Parser::T__0);
    }
    setState(827);
    match(Java9_v2Parser::T__1);
    setState(828);
    moduleName(0);
    setState(829);
    match(Java9_v2Parser::LBRACE);
    setState(833);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << Java9_v2Parser::T__2)
      | (1ULL << Java9_v2Parser::T__3)
      | (1ULL << Java9_v2Parser::T__5)
      | (1ULL << Java9_v2Parser::T__6)
      | (1ULL << Java9_v2Parser::T__7))) != 0)) {
      setState(830);
      moduleDirective();
      setState(835);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(836);
    match(Java9_v2Parser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleDirectiveContext ------------------------------------------------------------------

Java9_v2Parser::ModuleDirectiveContext::ModuleDirectiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::ModuleDirectiveContext::getRuleIndex() const {
  return Java9_v2Parser::RuleModuleDirective;
}

void Java9_v2Parser::ModuleDirectiveContext::copyFrom(ModuleDirectiveContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ModuleDirective5Context ------------------------------------------------------------------

std::vector<Java9_v2Parser::TypeNameContext *> Java9_v2Parser::ModuleDirective5Context::typeName() {
  return getRuleContexts<Java9_v2Parser::TypeNameContext>();
}

Java9_v2Parser::TypeNameContext* Java9_v2Parser::ModuleDirective5Context::typeName(size_t i) {
  return getRuleContext<Java9_v2Parser::TypeNameContext>(i);
}

tree::TerminalNode* Java9_v2Parser::ModuleDirective5Context::SEMI() {
  return getToken(Java9_v2Parser::SEMI, 0);
}

std::vector<tree::TerminalNode *> Java9_v2Parser::ModuleDirective5Context::COMMA() {
  return getTokens(Java9_v2Parser::COMMA);
}

tree::TerminalNode* Java9_v2Parser::ModuleDirective5Context::COMMA(size_t i) {
  return getToken(Java9_v2Parser::COMMA, i);
}

Java9_v2Parser::ModuleDirective5Context::ModuleDirective5Context(ModuleDirectiveContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ModuleDirective5Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModuleDirective5(this);
}
void Java9_v2Parser::ModuleDirective5Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModuleDirective5(this);
}

antlrcpp::Any Java9_v2Parser::ModuleDirective5Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitModuleDirective5(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ModuleDirective4Context ------------------------------------------------------------------

Java9_v2Parser::TypeNameContext* Java9_v2Parser::ModuleDirective4Context::typeName() {
  return getRuleContext<Java9_v2Parser::TypeNameContext>(0);
}

tree::TerminalNode* Java9_v2Parser::ModuleDirective4Context::SEMI() {
  return getToken(Java9_v2Parser::SEMI, 0);
}

Java9_v2Parser::ModuleDirective4Context::ModuleDirective4Context(ModuleDirectiveContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ModuleDirective4Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModuleDirective4(this);
}
void Java9_v2Parser::ModuleDirective4Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModuleDirective4(this);
}

antlrcpp::Any Java9_v2Parser::ModuleDirective4Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitModuleDirective4(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ModuleDirective1Context ------------------------------------------------------------------

Java9_v2Parser::ModuleNameContext* Java9_v2Parser::ModuleDirective1Context::moduleName() {
  return getRuleContext<Java9_v2Parser::ModuleNameContext>(0);
}

tree::TerminalNode* Java9_v2Parser::ModuleDirective1Context::SEMI() {
  return getToken(Java9_v2Parser::SEMI, 0);
}

std::vector<Java9_v2Parser::RequiresModifierContext *> Java9_v2Parser::ModuleDirective1Context::requiresModifier() {
  return getRuleContexts<Java9_v2Parser::RequiresModifierContext>();
}

Java9_v2Parser::RequiresModifierContext* Java9_v2Parser::ModuleDirective1Context::requiresModifier(size_t i) {
  return getRuleContext<Java9_v2Parser::RequiresModifierContext>(i);
}

Java9_v2Parser::ModuleDirective1Context::ModuleDirective1Context(ModuleDirectiveContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ModuleDirective1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModuleDirective1(this);
}
void Java9_v2Parser::ModuleDirective1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModuleDirective1(this);
}

antlrcpp::Any Java9_v2Parser::ModuleDirective1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitModuleDirective1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ModuleDirective2Context ------------------------------------------------------------------

Java9_v2Parser::PackageNameContext* Java9_v2Parser::ModuleDirective2Context::packageName() {
  return getRuleContext<Java9_v2Parser::PackageNameContext>(0);
}

tree::TerminalNode* Java9_v2Parser::ModuleDirective2Context::SEMI() {
  return getToken(Java9_v2Parser::SEMI, 0);
}

std::vector<Java9_v2Parser::ModuleNameContext *> Java9_v2Parser::ModuleDirective2Context::moduleName() {
  return getRuleContexts<Java9_v2Parser::ModuleNameContext>();
}

Java9_v2Parser::ModuleNameContext* Java9_v2Parser::ModuleDirective2Context::moduleName(size_t i) {
  return getRuleContext<Java9_v2Parser::ModuleNameContext>(i);
}

std::vector<tree::TerminalNode *> Java9_v2Parser::ModuleDirective2Context::COMMA() {
  return getTokens(Java9_v2Parser::COMMA);
}

tree::TerminalNode* Java9_v2Parser::ModuleDirective2Context::COMMA(size_t i) {
  return getToken(Java9_v2Parser::COMMA, i);
}

Java9_v2Parser::ModuleDirective2Context::ModuleDirective2Context(ModuleDirectiveContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ModuleDirective2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModuleDirective2(this);
}
void Java9_v2Parser::ModuleDirective2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModuleDirective2(this);
}

antlrcpp::Any Java9_v2Parser::ModuleDirective2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitModuleDirective2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ModuleDirectiv3Context ------------------------------------------------------------------

Java9_v2Parser::PackageNameContext* Java9_v2Parser::ModuleDirectiv3Context::packageName() {
  return getRuleContext<Java9_v2Parser::PackageNameContext>(0);
}

tree::TerminalNode* Java9_v2Parser::ModuleDirectiv3Context::SEMI() {
  return getToken(Java9_v2Parser::SEMI, 0);
}

std::vector<Java9_v2Parser::ModuleNameContext *> Java9_v2Parser::ModuleDirectiv3Context::moduleName() {
  return getRuleContexts<Java9_v2Parser::ModuleNameContext>();
}

Java9_v2Parser::ModuleNameContext* Java9_v2Parser::ModuleDirectiv3Context::moduleName(size_t i) {
  return getRuleContext<Java9_v2Parser::ModuleNameContext>(i);
}

std::vector<tree::TerminalNode *> Java9_v2Parser::ModuleDirectiv3Context::COMMA() {
  return getTokens(Java9_v2Parser::COMMA);
}

tree::TerminalNode* Java9_v2Parser::ModuleDirectiv3Context::COMMA(size_t i) {
  return getToken(Java9_v2Parser::COMMA, i);
}

Java9_v2Parser::ModuleDirectiv3Context::ModuleDirectiv3Context(ModuleDirectiveContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ModuleDirectiv3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModuleDirectiv3(this);
}
void Java9_v2Parser::ModuleDirectiv3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModuleDirectiv3(this);
}

antlrcpp::Any Java9_v2Parser::ModuleDirectiv3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitModuleDirectiv3(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::ModuleDirectiveContext* Java9_v2Parser::moduleDirective() {
  ModuleDirectiveContext *_localctx = _tracker.createInstance<ModuleDirectiveContext>(_ctx, getState());
  enterRule(_localctx, 88, Java9_v2Parser::RuleModuleDirective);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(895);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Java9_v2Parser::T__2: {
        _localctx = dynamic_cast<ModuleDirectiveContext *>(_tracker.createInstance<Java9_v2Parser::ModuleDirective1Context>(_localctx));
        enterOuterAlt(_localctx, 1);
        setState(838);
        match(Java9_v2Parser::T__2);
        setState(842);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == Java9_v2Parser::T__9

        || _la == Java9_v2Parser::STATIC) {
          setState(839);
          requiresModifier();
          setState(844);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(845);
        moduleName(0);
        setState(846);
        match(Java9_v2Parser::SEMI);
        break;
      }

      case Java9_v2Parser::T__3: {
        _localctx = dynamic_cast<ModuleDirectiveContext *>(_tracker.createInstance<Java9_v2Parser::ModuleDirective2Context>(_localctx));
        enterOuterAlt(_localctx, 2);
        setState(848);
        match(Java9_v2Parser::T__3);
        setState(849);
        packageName(0);
        setState(859);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Java9_v2Parser::T__4) {
          setState(850);
          match(Java9_v2Parser::T__4);
          setState(851);
          moduleName(0);
          setState(856);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == Java9_v2Parser::COMMA) {
            setState(852);
            match(Java9_v2Parser::COMMA);
            setState(853);
            moduleName(0);
            setState(858);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
        }
        setState(861);
        match(Java9_v2Parser::SEMI);
        break;
      }

      case Java9_v2Parser::T__5: {
        _localctx = dynamic_cast<ModuleDirectiveContext *>(_tracker.createInstance<Java9_v2Parser::ModuleDirectiv3Context>(_localctx));
        enterOuterAlt(_localctx, 3);
        setState(863);
        match(Java9_v2Parser::T__5);
        setState(864);
        packageName(0);
        setState(874);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Java9_v2Parser::T__4) {
          setState(865);
          match(Java9_v2Parser::T__4);
          setState(866);
          moduleName(0);
          setState(871);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == Java9_v2Parser::COMMA) {
            setState(867);
            match(Java9_v2Parser::COMMA);
            setState(868);
            moduleName(0);
            setState(873);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
        }
        setState(876);
        match(Java9_v2Parser::SEMI);
        break;
      }

      case Java9_v2Parser::T__6: {
        _localctx = dynamic_cast<ModuleDirectiveContext *>(_tracker.createInstance<Java9_v2Parser::ModuleDirective4Context>(_localctx));
        enterOuterAlt(_localctx, 4);
        setState(878);
        match(Java9_v2Parser::T__6);
        setState(879);
        typeName();
        setState(880);
        match(Java9_v2Parser::SEMI);
        break;
      }

      case Java9_v2Parser::T__7: {
        _localctx = dynamic_cast<ModuleDirectiveContext *>(_tracker.createInstance<Java9_v2Parser::ModuleDirective5Context>(_localctx));
        enterOuterAlt(_localctx, 5);
        setState(882);
        match(Java9_v2Parser::T__7);
        setState(883);
        typeName();
        setState(884);
        match(Java9_v2Parser::T__8);
        setState(885);
        typeName();
        setState(890);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == Java9_v2Parser::COMMA) {
          setState(886);
          match(Java9_v2Parser::COMMA);
          setState(887);
          typeName();
          setState(892);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(893);
        match(Java9_v2Parser::SEMI);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RequiresModifierContext ------------------------------------------------------------------

Java9_v2Parser::RequiresModifierContext::RequiresModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::RequiresModifierContext::STATIC() {
  return getToken(Java9_v2Parser::STATIC, 0);
}


size_t Java9_v2Parser::RequiresModifierContext::getRuleIndex() const {
  return Java9_v2Parser::RuleRequiresModifier;
}

void Java9_v2Parser::RequiresModifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRequiresModifier(this);
}

void Java9_v2Parser::RequiresModifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRequiresModifier(this);
}


antlrcpp::Any Java9_v2Parser::RequiresModifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitRequiresModifier(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::RequiresModifierContext* Java9_v2Parser::requiresModifier() {
  RequiresModifierContext *_localctx = _tracker.createInstance<RequiresModifierContext>(_ctx, getState());
  enterRule(_localctx, 90, Java9_v2Parser::RuleRequiresModifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(897);
    _la = _input->LA(1);
    if (!(_la == Java9_v2Parser::T__9

    || _la == Java9_v2Parser::STATIC)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassDeclarationContext ------------------------------------------------------------------

Java9_v2Parser::ClassDeclarationContext::ClassDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::ClassDeclarationContext::getRuleIndex() const {
  return Java9_v2Parser::RuleClassDeclaration;
}

void Java9_v2Parser::ClassDeclarationContext::copyFrom(ClassDeclarationContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ClassDeclaration1Context ------------------------------------------------------------------

Java9_v2Parser::NormalClassDeclarationContext* Java9_v2Parser::ClassDeclaration1Context::normalClassDeclaration() {
  return getRuleContext<Java9_v2Parser::NormalClassDeclarationContext>(0);
}

Java9_v2Parser::ClassDeclaration1Context::ClassDeclaration1Context(ClassDeclarationContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ClassDeclaration1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassDeclaration1(this);
}
void Java9_v2Parser::ClassDeclaration1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassDeclaration1(this);
}

antlrcpp::Any Java9_v2Parser::ClassDeclaration1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitClassDeclaration1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ClassDeclaration2Context ------------------------------------------------------------------

Java9_v2Parser::EnumDeclarationContext* Java9_v2Parser::ClassDeclaration2Context::enumDeclaration() {
  return getRuleContext<Java9_v2Parser::EnumDeclarationContext>(0);
}

Java9_v2Parser::ClassDeclaration2Context::ClassDeclaration2Context(ClassDeclarationContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ClassDeclaration2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassDeclaration2(this);
}
void Java9_v2Parser::ClassDeclaration2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassDeclaration2(this);
}

antlrcpp::Any Java9_v2Parser::ClassDeclaration2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitClassDeclaration2(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::ClassDeclarationContext* Java9_v2Parser::classDeclaration() {
  ClassDeclarationContext *_localctx = _tracker.createInstance<ClassDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 92, Java9_v2Parser::RuleClassDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(901);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 55, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<ClassDeclarationContext *>(_tracker.createInstance<Java9_v2Parser::ClassDeclaration1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(899);
      normalClassDeclaration();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<ClassDeclarationContext *>(_tracker.createInstance<Java9_v2Parser::ClassDeclaration2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(900);
      enumDeclaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NormalClassDeclarationContext ------------------------------------------------------------------

Java9_v2Parser::NormalClassDeclarationContext::NormalClassDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::NormalClassDeclarationContext::CLASS() {
  return getToken(Java9_v2Parser::CLASS, 0);
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::NormalClassDeclarationContext::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

Java9_v2Parser::ClassBodyContext* Java9_v2Parser::NormalClassDeclarationContext::classBody() {
  return getRuleContext<Java9_v2Parser::ClassBodyContext>(0);
}

std::vector<Java9_v2Parser::ClassModifierContext *> Java9_v2Parser::NormalClassDeclarationContext::classModifier() {
  return getRuleContexts<Java9_v2Parser::ClassModifierContext>();
}

Java9_v2Parser::ClassModifierContext* Java9_v2Parser::NormalClassDeclarationContext::classModifier(size_t i) {
  return getRuleContext<Java9_v2Parser::ClassModifierContext>(i);
}

Java9_v2Parser::TypeParametersContext* Java9_v2Parser::NormalClassDeclarationContext::typeParameters() {
  return getRuleContext<Java9_v2Parser::TypeParametersContext>(0);
}

Java9_v2Parser::SuperclassContext* Java9_v2Parser::NormalClassDeclarationContext::superclass() {
  return getRuleContext<Java9_v2Parser::SuperclassContext>(0);
}

Java9_v2Parser::SuperinterfacesContext* Java9_v2Parser::NormalClassDeclarationContext::superinterfaces() {
  return getRuleContext<Java9_v2Parser::SuperinterfacesContext>(0);
}


size_t Java9_v2Parser::NormalClassDeclarationContext::getRuleIndex() const {
  return Java9_v2Parser::RuleNormalClassDeclaration;
}

void Java9_v2Parser::NormalClassDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNormalClassDeclaration(this);
}

void Java9_v2Parser::NormalClassDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNormalClassDeclaration(this);
}


antlrcpp::Any Java9_v2Parser::NormalClassDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitNormalClassDeclaration(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::NormalClassDeclarationContext* Java9_v2Parser::normalClassDeclaration() {
  NormalClassDeclarationContext *_localctx = _tracker.createInstance<NormalClassDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 94, Java9_v2Parser::RuleNormalClassDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(906);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << Java9_v2Parser::ABSTRACT)
      | (1ULL << Java9_v2Parser::FINAL)
      | (1ULL << Java9_v2Parser::PRIVATE)
      | (1ULL << Java9_v2Parser::PROTECTED)
      | (1ULL << Java9_v2Parser::PUBLIC)
      | (1ULL << Java9_v2Parser::STATIC)
      | (1ULL << Java9_v2Parser::STRICTFP))) != 0) || _la == Java9_v2Parser::AT) {
      setState(903);
      classModifier();
      setState(908);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(909);
    match(Java9_v2Parser::CLASS);
    setState(910);
    identifier();
    setState(912);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java9_v2Parser::LT) {
      setState(911);
      typeParameters();
    }
    setState(915);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java9_v2Parser::EXTENDS) {
      setState(914);
      superclass();
    }
    setState(918);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java9_v2Parser::IMPLEMENTS) {
      setState(917);
      superinterfaces();
    }
    setState(920);
    classBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassModifierContext ------------------------------------------------------------------

Java9_v2Parser::ClassModifierContext::ClassModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::AnnotationContext* Java9_v2Parser::ClassModifierContext::annotation() {
  return getRuleContext<Java9_v2Parser::AnnotationContext>(0);
}

tree::TerminalNode* Java9_v2Parser::ClassModifierContext::PUBLIC() {
  return getToken(Java9_v2Parser::PUBLIC, 0);
}

tree::TerminalNode* Java9_v2Parser::ClassModifierContext::PROTECTED() {
  return getToken(Java9_v2Parser::PROTECTED, 0);
}

tree::TerminalNode* Java9_v2Parser::ClassModifierContext::PRIVATE() {
  return getToken(Java9_v2Parser::PRIVATE, 0);
}

tree::TerminalNode* Java9_v2Parser::ClassModifierContext::ABSTRACT() {
  return getToken(Java9_v2Parser::ABSTRACT, 0);
}

tree::TerminalNode* Java9_v2Parser::ClassModifierContext::STATIC() {
  return getToken(Java9_v2Parser::STATIC, 0);
}

tree::TerminalNode* Java9_v2Parser::ClassModifierContext::FINAL() {
  return getToken(Java9_v2Parser::FINAL, 0);
}

tree::TerminalNode* Java9_v2Parser::ClassModifierContext::STRICTFP() {
  return getToken(Java9_v2Parser::STRICTFP, 0);
}


size_t Java9_v2Parser::ClassModifierContext::getRuleIndex() const {
  return Java9_v2Parser::RuleClassModifier;
}

void Java9_v2Parser::ClassModifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassModifier(this);
}

void Java9_v2Parser::ClassModifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassModifier(this);
}


antlrcpp::Any Java9_v2Parser::ClassModifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitClassModifier(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::ClassModifierContext* Java9_v2Parser::classModifier() {
  ClassModifierContext *_localctx = _tracker.createInstance<ClassModifierContext>(_ctx, getState());
  enterRule(_localctx, 96, Java9_v2Parser::RuleClassModifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(930);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Java9_v2Parser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(922);
        annotation();
        break;
      }

      case Java9_v2Parser::PUBLIC: {
        enterOuterAlt(_localctx, 2);
        setState(923);
        match(Java9_v2Parser::PUBLIC);
        break;
      }

      case Java9_v2Parser::PROTECTED: {
        enterOuterAlt(_localctx, 3);
        setState(924);
        match(Java9_v2Parser::PROTECTED);
        break;
      }

      case Java9_v2Parser::PRIVATE: {
        enterOuterAlt(_localctx, 4);
        setState(925);
        match(Java9_v2Parser::PRIVATE);
        break;
      }

      case Java9_v2Parser::ABSTRACT: {
        enterOuterAlt(_localctx, 5);
        setState(926);
        match(Java9_v2Parser::ABSTRACT);
        break;
      }

      case Java9_v2Parser::STATIC: {
        enterOuterAlt(_localctx, 6);
        setState(927);
        match(Java9_v2Parser::STATIC);
        break;
      }

      case Java9_v2Parser::FINAL: {
        enterOuterAlt(_localctx, 7);
        setState(928);
        match(Java9_v2Parser::FINAL);
        break;
      }

      case Java9_v2Parser::STRICTFP: {
        enterOuterAlt(_localctx, 8);
        setState(929);
        match(Java9_v2Parser::STRICTFP);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeParametersContext ------------------------------------------------------------------

Java9_v2Parser::TypeParametersContext::TypeParametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::TypeParametersContext::LT() {
  return getToken(Java9_v2Parser::LT, 0);
}

Java9_v2Parser::TypeParameterListContext* Java9_v2Parser::TypeParametersContext::typeParameterList() {
  return getRuleContext<Java9_v2Parser::TypeParameterListContext>(0);
}

tree::TerminalNode* Java9_v2Parser::TypeParametersContext::GT() {
  return getToken(Java9_v2Parser::GT, 0);
}


size_t Java9_v2Parser::TypeParametersContext::getRuleIndex() const {
  return Java9_v2Parser::RuleTypeParameters;
}

void Java9_v2Parser::TypeParametersContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeParameters(this);
}

void Java9_v2Parser::TypeParametersContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeParameters(this);
}


antlrcpp::Any Java9_v2Parser::TypeParametersContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitTypeParameters(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::TypeParametersContext* Java9_v2Parser::typeParameters() {
  TypeParametersContext *_localctx = _tracker.createInstance<TypeParametersContext>(_ctx, getState());
  enterRule(_localctx, 98, Java9_v2Parser::RuleTypeParameters);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(932);
    match(Java9_v2Parser::LT);
    setState(933);
    typeParameterList();
    setState(934);
    match(Java9_v2Parser::GT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeParameterListContext ------------------------------------------------------------------

Java9_v2Parser::TypeParameterListContext::TypeParameterListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Java9_v2Parser::TypeParameterContext *> Java9_v2Parser::TypeParameterListContext::typeParameter() {
  return getRuleContexts<Java9_v2Parser::TypeParameterContext>();
}

Java9_v2Parser::TypeParameterContext* Java9_v2Parser::TypeParameterListContext::typeParameter(size_t i) {
  return getRuleContext<Java9_v2Parser::TypeParameterContext>(i);
}

std::vector<tree::TerminalNode *> Java9_v2Parser::TypeParameterListContext::COMMA() {
  return getTokens(Java9_v2Parser::COMMA);
}

tree::TerminalNode* Java9_v2Parser::TypeParameterListContext::COMMA(size_t i) {
  return getToken(Java9_v2Parser::COMMA, i);
}


size_t Java9_v2Parser::TypeParameterListContext::getRuleIndex() const {
  return Java9_v2Parser::RuleTypeParameterList;
}

void Java9_v2Parser::TypeParameterListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeParameterList(this);
}

void Java9_v2Parser::TypeParameterListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeParameterList(this);
}


antlrcpp::Any Java9_v2Parser::TypeParameterListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitTypeParameterList(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::TypeParameterListContext* Java9_v2Parser::typeParameterList() {
  TypeParameterListContext *_localctx = _tracker.createInstance<TypeParameterListContext>(_ctx, getState());
  enterRule(_localctx, 100, Java9_v2Parser::RuleTypeParameterList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(936);
    typeParameter();
    setState(941);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java9_v2Parser::COMMA) {
      setState(937);
      match(Java9_v2Parser::COMMA);
      setState(938);
      typeParameter();
      setState(943);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SuperclassContext ------------------------------------------------------------------

Java9_v2Parser::SuperclassContext::SuperclassContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::SuperclassContext::EXTENDS() {
  return getToken(Java9_v2Parser::EXTENDS, 0);
}

Java9_v2Parser::ClassTypeContext* Java9_v2Parser::SuperclassContext::classType() {
  return getRuleContext<Java9_v2Parser::ClassTypeContext>(0);
}


size_t Java9_v2Parser::SuperclassContext::getRuleIndex() const {
  return Java9_v2Parser::RuleSuperclass;
}

void Java9_v2Parser::SuperclassContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSuperclass(this);
}

void Java9_v2Parser::SuperclassContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSuperclass(this);
}


antlrcpp::Any Java9_v2Parser::SuperclassContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitSuperclass(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::SuperclassContext* Java9_v2Parser::superclass() {
  SuperclassContext *_localctx = _tracker.createInstance<SuperclassContext>(_ctx, getState());
  enterRule(_localctx, 102, Java9_v2Parser::RuleSuperclass);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(944);
    match(Java9_v2Parser::EXTENDS);
    setState(945);
    classType();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SuperinterfacesContext ------------------------------------------------------------------

Java9_v2Parser::SuperinterfacesContext::SuperinterfacesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::SuperinterfacesContext::IMPLEMENTS() {
  return getToken(Java9_v2Parser::IMPLEMENTS, 0);
}

Java9_v2Parser::InterfaceTypeListContext* Java9_v2Parser::SuperinterfacesContext::interfaceTypeList() {
  return getRuleContext<Java9_v2Parser::InterfaceTypeListContext>(0);
}


size_t Java9_v2Parser::SuperinterfacesContext::getRuleIndex() const {
  return Java9_v2Parser::RuleSuperinterfaces;
}

void Java9_v2Parser::SuperinterfacesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSuperinterfaces(this);
}

void Java9_v2Parser::SuperinterfacesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSuperinterfaces(this);
}


antlrcpp::Any Java9_v2Parser::SuperinterfacesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitSuperinterfaces(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::SuperinterfacesContext* Java9_v2Parser::superinterfaces() {
  SuperinterfacesContext *_localctx = _tracker.createInstance<SuperinterfacesContext>(_ctx, getState());
  enterRule(_localctx, 104, Java9_v2Parser::RuleSuperinterfaces);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(947);
    match(Java9_v2Parser::IMPLEMENTS);
    setState(948);
    interfaceTypeList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceTypeListContext ------------------------------------------------------------------

Java9_v2Parser::InterfaceTypeListContext::InterfaceTypeListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Java9_v2Parser::InterfaceTypeContext *> Java9_v2Parser::InterfaceTypeListContext::interfaceType() {
  return getRuleContexts<Java9_v2Parser::InterfaceTypeContext>();
}

Java9_v2Parser::InterfaceTypeContext* Java9_v2Parser::InterfaceTypeListContext::interfaceType(size_t i) {
  return getRuleContext<Java9_v2Parser::InterfaceTypeContext>(i);
}

std::vector<tree::TerminalNode *> Java9_v2Parser::InterfaceTypeListContext::COMMA() {
  return getTokens(Java9_v2Parser::COMMA);
}

tree::TerminalNode* Java9_v2Parser::InterfaceTypeListContext::COMMA(size_t i) {
  return getToken(Java9_v2Parser::COMMA, i);
}


size_t Java9_v2Parser::InterfaceTypeListContext::getRuleIndex() const {
  return Java9_v2Parser::RuleInterfaceTypeList;
}

void Java9_v2Parser::InterfaceTypeListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterfaceTypeList(this);
}

void Java9_v2Parser::InterfaceTypeListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterfaceTypeList(this);
}


antlrcpp::Any Java9_v2Parser::InterfaceTypeListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitInterfaceTypeList(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::InterfaceTypeListContext* Java9_v2Parser::interfaceTypeList() {
  InterfaceTypeListContext *_localctx = _tracker.createInstance<InterfaceTypeListContext>(_ctx, getState());
  enterRule(_localctx, 106, Java9_v2Parser::RuleInterfaceTypeList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(950);
    interfaceType();
    setState(955);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java9_v2Parser::COMMA) {
      setState(951);
      match(Java9_v2Parser::COMMA);
      setState(952);
      interfaceType();
      setState(957);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassBodyContext ------------------------------------------------------------------

Java9_v2Parser::ClassBodyContext::ClassBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::ClassBodyContext::LBRACE() {
  return getToken(Java9_v2Parser::LBRACE, 0);
}

tree::TerminalNode* Java9_v2Parser::ClassBodyContext::RBRACE() {
  return getToken(Java9_v2Parser::RBRACE, 0);
}

std::vector<Java9_v2Parser::ClassBodyDeclarationContext *> Java9_v2Parser::ClassBodyContext::classBodyDeclaration() {
  return getRuleContexts<Java9_v2Parser::ClassBodyDeclarationContext>();
}

Java9_v2Parser::ClassBodyDeclarationContext* Java9_v2Parser::ClassBodyContext::classBodyDeclaration(size_t i) {
  return getRuleContext<Java9_v2Parser::ClassBodyDeclarationContext>(i);
}


size_t Java9_v2Parser::ClassBodyContext::getRuleIndex() const {
  return Java9_v2Parser::RuleClassBody;
}

void Java9_v2Parser::ClassBodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassBody(this);
}

void Java9_v2Parser::ClassBodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassBody(this);
}


antlrcpp::Any Java9_v2Parser::ClassBodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitClassBody(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::ClassBodyContext* Java9_v2Parser::classBody() {
  ClassBodyContext *_localctx = _tracker.createInstance<ClassBodyContext>(_ctx, getState());
  enterRule(_localctx, 108, Java9_v2Parser::RuleClassBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(958);
    match(Java9_v2Parser::LBRACE);
    setState(962);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << Java9_v2Parser::T__0)
      | (1ULL << Java9_v2Parser::T__1)
      | (1ULL << Java9_v2Parser::T__2)
      | (1ULL << Java9_v2Parser::T__3)
      | (1ULL << Java9_v2Parser::T__4)
      | (1ULL << Java9_v2Parser::T__5)
      | (1ULL << Java9_v2Parser::T__6)
      | (1ULL << Java9_v2Parser::T__7)
      | (1ULL << Java9_v2Parser::T__8)
      | (1ULL << Java9_v2Parser::ABSTRACT)
      | (1ULL << Java9_v2Parser::BOOLEAN)
      | (1ULL << Java9_v2Parser::BYTE)
      | (1ULL << Java9_v2Parser::CHAR)
      | (1ULL << Java9_v2Parser::CLASS)
      | (1ULL << Java9_v2Parser::DOUBLE)
      | (1ULL << Java9_v2Parser::ENUM)
      | (1ULL << Java9_v2Parser::FINAL)
      | (1ULL << Java9_v2Parser::FLOAT)
      | (1ULL << Java9_v2Parser::INT)
      | (1ULL << Java9_v2Parser::INTERFACE)
      | (1ULL << Java9_v2Parser::LONG)
      | (1ULL << Java9_v2Parser::NATIVE)
      | (1ULL << Java9_v2Parser::PRIVATE)
      | (1ULL << Java9_v2Parser::PROTECTED)
      | (1ULL << Java9_v2Parser::PUBLIC)
      | (1ULL << Java9_v2Parser::SHORT)
      | (1ULL << Java9_v2Parser::STATIC)
      | (1ULL << Java9_v2Parser::STRICTFP)
      | (1ULL << Java9_v2Parser::SYNCHRONIZED)
      | (1ULL << Java9_v2Parser::TRANSIENT)
      | (1ULL << Java9_v2Parser::VOID)
      | (1ULL << Java9_v2Parser::VOLATILE))) != 0) || ((((_la - 70) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 70)) & ((1ULL << (Java9_v2Parser::LBRACE - 70))
      | (1ULL << (Java9_v2Parser::SEMI - 70))
      | (1ULL << (Java9_v2Parser::AT - 70))
      | (1ULL << (Java9_v2Parser::LT - 70))
      | (1ULL << (Java9_v2Parser::Identifier - 70)))) != 0)) {
      setState(959);
      classBodyDeclaration();
      setState(964);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(965);
    match(Java9_v2Parser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassBodyDeclarationContext ------------------------------------------------------------------

Java9_v2Parser::ClassBodyDeclarationContext::ClassBodyDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::ClassBodyDeclarationContext::getRuleIndex() const {
  return Java9_v2Parser::RuleClassBodyDeclaration;
}

void Java9_v2Parser::ClassBodyDeclarationContext::copyFrom(ClassBodyDeclarationContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ClassBodyDeclaration4Context ------------------------------------------------------------------

Java9_v2Parser::ConstructorDeclarationContext* Java9_v2Parser::ClassBodyDeclaration4Context::constructorDeclaration() {
  return getRuleContext<Java9_v2Parser::ConstructorDeclarationContext>(0);
}

Java9_v2Parser::ClassBodyDeclaration4Context::ClassBodyDeclaration4Context(ClassBodyDeclarationContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ClassBodyDeclaration4Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassBodyDeclaration4(this);
}
void Java9_v2Parser::ClassBodyDeclaration4Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassBodyDeclaration4(this);
}

antlrcpp::Any Java9_v2Parser::ClassBodyDeclaration4Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitClassBodyDeclaration4(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ClassBodyDeclaration1Context ------------------------------------------------------------------

Java9_v2Parser::ClassMemberDeclarationContext* Java9_v2Parser::ClassBodyDeclaration1Context::classMemberDeclaration() {
  return getRuleContext<Java9_v2Parser::ClassMemberDeclarationContext>(0);
}

Java9_v2Parser::ClassBodyDeclaration1Context::ClassBodyDeclaration1Context(ClassBodyDeclarationContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ClassBodyDeclaration1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassBodyDeclaration1(this);
}
void Java9_v2Parser::ClassBodyDeclaration1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassBodyDeclaration1(this);
}

antlrcpp::Any Java9_v2Parser::ClassBodyDeclaration1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitClassBodyDeclaration1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ClassBodyDeclaration3Context ------------------------------------------------------------------

Java9_v2Parser::StaticInitializerContext* Java9_v2Parser::ClassBodyDeclaration3Context::staticInitializer() {
  return getRuleContext<Java9_v2Parser::StaticInitializerContext>(0);
}

Java9_v2Parser::ClassBodyDeclaration3Context::ClassBodyDeclaration3Context(ClassBodyDeclarationContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ClassBodyDeclaration3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassBodyDeclaration3(this);
}
void Java9_v2Parser::ClassBodyDeclaration3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassBodyDeclaration3(this);
}

antlrcpp::Any Java9_v2Parser::ClassBodyDeclaration3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitClassBodyDeclaration3(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ClassBodyDeclaration2Context ------------------------------------------------------------------

Java9_v2Parser::InstanceInitializerContext* Java9_v2Parser::ClassBodyDeclaration2Context::instanceInitializer() {
  return getRuleContext<Java9_v2Parser::InstanceInitializerContext>(0);
}

Java9_v2Parser::ClassBodyDeclaration2Context::ClassBodyDeclaration2Context(ClassBodyDeclarationContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ClassBodyDeclaration2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassBodyDeclaration2(this);
}
void Java9_v2Parser::ClassBodyDeclaration2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassBodyDeclaration2(this);
}

antlrcpp::Any Java9_v2Parser::ClassBodyDeclaration2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitClassBodyDeclaration2(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::ClassBodyDeclarationContext* Java9_v2Parser::classBodyDeclaration() {
  ClassBodyDeclarationContext *_localctx = _tracker.createInstance<ClassBodyDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 110, Java9_v2Parser::RuleClassBodyDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(971);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 64, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<ClassBodyDeclarationContext *>(_tracker.createInstance<Java9_v2Parser::ClassBodyDeclaration1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(967);
      classMemberDeclaration();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<ClassBodyDeclarationContext *>(_tracker.createInstance<Java9_v2Parser::ClassBodyDeclaration2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(968);
      instanceInitializer();
      break;
    }

    case 3: {
      _localctx = dynamic_cast<ClassBodyDeclarationContext *>(_tracker.createInstance<Java9_v2Parser::ClassBodyDeclaration3Context>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(969);
      staticInitializer();
      break;
    }

    case 4: {
      _localctx = dynamic_cast<ClassBodyDeclarationContext *>(_tracker.createInstance<Java9_v2Parser::ClassBodyDeclaration4Context>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(970);
      constructorDeclaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassMemberDeclarationContext ------------------------------------------------------------------

Java9_v2Parser::ClassMemberDeclarationContext::ClassMemberDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::ClassMemberDeclarationContext::getRuleIndex() const {
  return Java9_v2Parser::RuleClassMemberDeclaration;
}

void Java9_v2Parser::ClassMemberDeclarationContext::copyFrom(ClassMemberDeclarationContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ClassMemberDeclaration4Context ------------------------------------------------------------------

Java9_v2Parser::InterfaceDeclarationContext* Java9_v2Parser::ClassMemberDeclaration4Context::interfaceDeclaration() {
  return getRuleContext<Java9_v2Parser::InterfaceDeclarationContext>(0);
}

Java9_v2Parser::ClassMemberDeclaration4Context::ClassMemberDeclaration4Context(ClassMemberDeclarationContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ClassMemberDeclaration4Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassMemberDeclaration4(this);
}
void Java9_v2Parser::ClassMemberDeclaration4Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassMemberDeclaration4(this);
}

antlrcpp::Any Java9_v2Parser::ClassMemberDeclaration4Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitClassMemberDeclaration4(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ClassMemberDeclaration5Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::ClassMemberDeclaration5Context::SEMI() {
  return getToken(Java9_v2Parser::SEMI, 0);
}

Java9_v2Parser::ClassMemberDeclaration5Context::ClassMemberDeclaration5Context(ClassMemberDeclarationContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ClassMemberDeclaration5Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassMemberDeclaration5(this);
}
void Java9_v2Parser::ClassMemberDeclaration5Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassMemberDeclaration5(this);
}

antlrcpp::Any Java9_v2Parser::ClassMemberDeclaration5Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitClassMemberDeclaration5(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ClassMemberDeclaration2Context ------------------------------------------------------------------

Java9_v2Parser::MethodDeclarationContext* Java9_v2Parser::ClassMemberDeclaration2Context::methodDeclaration() {
  return getRuleContext<Java9_v2Parser::MethodDeclarationContext>(0);
}

Java9_v2Parser::ClassMemberDeclaration2Context::ClassMemberDeclaration2Context(ClassMemberDeclarationContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ClassMemberDeclaration2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassMemberDeclaration2(this);
}
void Java9_v2Parser::ClassMemberDeclaration2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassMemberDeclaration2(this);
}

antlrcpp::Any Java9_v2Parser::ClassMemberDeclaration2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitClassMemberDeclaration2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ClassMemberDeclaration3Context ------------------------------------------------------------------

Java9_v2Parser::ClassDeclarationContext* Java9_v2Parser::ClassMemberDeclaration3Context::classDeclaration() {
  return getRuleContext<Java9_v2Parser::ClassDeclarationContext>(0);
}

Java9_v2Parser::ClassMemberDeclaration3Context::ClassMemberDeclaration3Context(ClassMemberDeclarationContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ClassMemberDeclaration3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassMemberDeclaration3(this);
}
void Java9_v2Parser::ClassMemberDeclaration3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassMemberDeclaration3(this);
}

antlrcpp::Any Java9_v2Parser::ClassMemberDeclaration3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitClassMemberDeclaration3(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ClassMemberDeclaration1Context ------------------------------------------------------------------

Java9_v2Parser::FieldDeclarationContext* Java9_v2Parser::ClassMemberDeclaration1Context::fieldDeclaration() {
  return getRuleContext<Java9_v2Parser::FieldDeclarationContext>(0);
}

Java9_v2Parser::ClassMemberDeclaration1Context::ClassMemberDeclaration1Context(ClassMemberDeclarationContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ClassMemberDeclaration1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassMemberDeclaration1(this);
}
void Java9_v2Parser::ClassMemberDeclaration1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassMemberDeclaration1(this);
}

antlrcpp::Any Java9_v2Parser::ClassMemberDeclaration1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitClassMemberDeclaration1(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::ClassMemberDeclarationContext* Java9_v2Parser::classMemberDeclaration() {
  ClassMemberDeclarationContext *_localctx = _tracker.createInstance<ClassMemberDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 112, Java9_v2Parser::RuleClassMemberDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(978);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 65, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<ClassMemberDeclarationContext *>(_tracker.createInstance<Java9_v2Parser::ClassMemberDeclaration1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(973);
      fieldDeclaration();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<ClassMemberDeclarationContext *>(_tracker.createInstance<Java9_v2Parser::ClassMemberDeclaration2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(974);
      methodDeclaration();
      break;
    }

    case 3: {
      _localctx = dynamic_cast<ClassMemberDeclarationContext *>(_tracker.createInstance<Java9_v2Parser::ClassMemberDeclaration3Context>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(975);
      classDeclaration();
      break;
    }

    case 4: {
      _localctx = dynamic_cast<ClassMemberDeclarationContext *>(_tracker.createInstance<Java9_v2Parser::ClassMemberDeclaration4Context>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(976);
      interfaceDeclaration();
      break;
    }

    case 5: {
      _localctx = dynamic_cast<ClassMemberDeclarationContext *>(_tracker.createInstance<Java9_v2Parser::ClassMemberDeclaration5Context>(_localctx));
      enterOuterAlt(_localctx, 5);
      setState(977);
      match(Java9_v2Parser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FieldDeclarationContext ------------------------------------------------------------------

Java9_v2Parser::FieldDeclarationContext::FieldDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::UnannTypeContext* Java9_v2Parser::FieldDeclarationContext::unannType() {
  return getRuleContext<Java9_v2Parser::UnannTypeContext>(0);
}

Java9_v2Parser::VariableDeclaratorListContext* Java9_v2Parser::FieldDeclarationContext::variableDeclaratorList() {
  return getRuleContext<Java9_v2Parser::VariableDeclaratorListContext>(0);
}

tree::TerminalNode* Java9_v2Parser::FieldDeclarationContext::SEMI() {
  return getToken(Java9_v2Parser::SEMI, 0);
}

std::vector<Java9_v2Parser::FieldModifierContext *> Java9_v2Parser::FieldDeclarationContext::fieldModifier() {
  return getRuleContexts<Java9_v2Parser::FieldModifierContext>();
}

Java9_v2Parser::FieldModifierContext* Java9_v2Parser::FieldDeclarationContext::fieldModifier(size_t i) {
  return getRuleContext<Java9_v2Parser::FieldModifierContext>(i);
}


size_t Java9_v2Parser::FieldDeclarationContext::getRuleIndex() const {
  return Java9_v2Parser::RuleFieldDeclaration;
}

void Java9_v2Parser::FieldDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFieldDeclaration(this);
}

void Java9_v2Parser::FieldDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFieldDeclaration(this);
}


antlrcpp::Any Java9_v2Parser::FieldDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitFieldDeclaration(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::FieldDeclarationContext* Java9_v2Parser::fieldDeclaration() {
  FieldDeclarationContext *_localctx = _tracker.createInstance<FieldDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 114, Java9_v2Parser::RuleFieldDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(983);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 28) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 28)) & ((1ULL << (Java9_v2Parser::FINAL - 28))
      | (1ULL << (Java9_v2Parser::PRIVATE - 28))
      | (1ULL << (Java9_v2Parser::PROTECTED - 28))
      | (1ULL << (Java9_v2Parser::PUBLIC - 28))
      | (1ULL << (Java9_v2Parser::STATIC - 28))
      | (1ULL << (Java9_v2Parser::TRANSIENT - 28))
      | (1ULL << (Java9_v2Parser::VOLATILE - 28))
      | (1ULL << (Java9_v2Parser::AT - 28)))) != 0)) {
      setState(980);
      fieldModifier();
      setState(985);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(986);
    unannType();
    setState(987);
    variableDeclaratorList();
    setState(988);
    match(Java9_v2Parser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FieldModifierContext ------------------------------------------------------------------

Java9_v2Parser::FieldModifierContext::FieldModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::AnnotationContext* Java9_v2Parser::FieldModifierContext::annotation() {
  return getRuleContext<Java9_v2Parser::AnnotationContext>(0);
}

tree::TerminalNode* Java9_v2Parser::FieldModifierContext::PUBLIC() {
  return getToken(Java9_v2Parser::PUBLIC, 0);
}

tree::TerminalNode* Java9_v2Parser::FieldModifierContext::PROTECTED() {
  return getToken(Java9_v2Parser::PROTECTED, 0);
}

tree::TerminalNode* Java9_v2Parser::FieldModifierContext::PRIVATE() {
  return getToken(Java9_v2Parser::PRIVATE, 0);
}

tree::TerminalNode* Java9_v2Parser::FieldModifierContext::STATIC() {
  return getToken(Java9_v2Parser::STATIC, 0);
}

tree::TerminalNode* Java9_v2Parser::FieldModifierContext::FINAL() {
  return getToken(Java9_v2Parser::FINAL, 0);
}

tree::TerminalNode* Java9_v2Parser::FieldModifierContext::TRANSIENT() {
  return getToken(Java9_v2Parser::TRANSIENT, 0);
}

tree::TerminalNode* Java9_v2Parser::FieldModifierContext::VOLATILE() {
  return getToken(Java9_v2Parser::VOLATILE, 0);
}


size_t Java9_v2Parser::FieldModifierContext::getRuleIndex() const {
  return Java9_v2Parser::RuleFieldModifier;
}

void Java9_v2Parser::FieldModifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFieldModifier(this);
}

void Java9_v2Parser::FieldModifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFieldModifier(this);
}


antlrcpp::Any Java9_v2Parser::FieldModifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitFieldModifier(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::FieldModifierContext* Java9_v2Parser::fieldModifier() {
  FieldModifierContext *_localctx = _tracker.createInstance<FieldModifierContext>(_ctx, getState());
  enterRule(_localctx, 116, Java9_v2Parser::RuleFieldModifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(998);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Java9_v2Parser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(990);
        annotation();
        break;
      }

      case Java9_v2Parser::PUBLIC: {
        enterOuterAlt(_localctx, 2);
        setState(991);
        match(Java9_v2Parser::PUBLIC);
        break;
      }

      case Java9_v2Parser::PROTECTED: {
        enterOuterAlt(_localctx, 3);
        setState(992);
        match(Java9_v2Parser::PROTECTED);
        break;
      }

      case Java9_v2Parser::PRIVATE: {
        enterOuterAlt(_localctx, 4);
        setState(993);
        match(Java9_v2Parser::PRIVATE);
        break;
      }

      case Java9_v2Parser::STATIC: {
        enterOuterAlt(_localctx, 5);
        setState(994);
        match(Java9_v2Parser::STATIC);
        break;
      }

      case Java9_v2Parser::FINAL: {
        enterOuterAlt(_localctx, 6);
        setState(995);
        match(Java9_v2Parser::FINAL);
        break;
      }

      case Java9_v2Parser::TRANSIENT: {
        enterOuterAlt(_localctx, 7);
        setState(996);
        match(Java9_v2Parser::TRANSIENT);
        break;
      }

      case Java9_v2Parser::VOLATILE: {
        enterOuterAlt(_localctx, 8);
        setState(997);
        match(Java9_v2Parser::VOLATILE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableDeclaratorListContext ------------------------------------------------------------------

Java9_v2Parser::VariableDeclaratorListContext::VariableDeclaratorListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Java9_v2Parser::VariableDeclaratorContext *> Java9_v2Parser::VariableDeclaratorListContext::variableDeclarator() {
  return getRuleContexts<Java9_v2Parser::VariableDeclaratorContext>();
}

Java9_v2Parser::VariableDeclaratorContext* Java9_v2Parser::VariableDeclaratorListContext::variableDeclarator(size_t i) {
  return getRuleContext<Java9_v2Parser::VariableDeclaratorContext>(i);
}

std::vector<tree::TerminalNode *> Java9_v2Parser::VariableDeclaratorListContext::COMMA() {
  return getTokens(Java9_v2Parser::COMMA);
}

tree::TerminalNode* Java9_v2Parser::VariableDeclaratorListContext::COMMA(size_t i) {
  return getToken(Java9_v2Parser::COMMA, i);
}


size_t Java9_v2Parser::VariableDeclaratorListContext::getRuleIndex() const {
  return Java9_v2Parser::RuleVariableDeclaratorList;
}

void Java9_v2Parser::VariableDeclaratorListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariableDeclaratorList(this);
}

void Java9_v2Parser::VariableDeclaratorListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariableDeclaratorList(this);
}


antlrcpp::Any Java9_v2Parser::VariableDeclaratorListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitVariableDeclaratorList(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::VariableDeclaratorListContext* Java9_v2Parser::variableDeclaratorList() {
  VariableDeclaratorListContext *_localctx = _tracker.createInstance<VariableDeclaratorListContext>(_ctx, getState());
  enterRule(_localctx, 118, Java9_v2Parser::RuleVariableDeclaratorList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1000);
    variableDeclarator();
    setState(1005);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java9_v2Parser::COMMA) {
      setState(1001);
      match(Java9_v2Parser::COMMA);
      setState(1002);
      variableDeclarator();
      setState(1007);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableDeclaratorContext ------------------------------------------------------------------

Java9_v2Parser::VariableDeclaratorContext::VariableDeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::VariableDeclaratorIdContext* Java9_v2Parser::VariableDeclaratorContext::variableDeclaratorId() {
  return getRuleContext<Java9_v2Parser::VariableDeclaratorIdContext>(0);
}

tree::TerminalNode* Java9_v2Parser::VariableDeclaratorContext::ASSIGN() {
  return getToken(Java9_v2Parser::ASSIGN, 0);
}

Java9_v2Parser::VariableInitializerContext* Java9_v2Parser::VariableDeclaratorContext::variableInitializer() {
  return getRuleContext<Java9_v2Parser::VariableInitializerContext>(0);
}


size_t Java9_v2Parser::VariableDeclaratorContext::getRuleIndex() const {
  return Java9_v2Parser::RuleVariableDeclarator;
}

void Java9_v2Parser::VariableDeclaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariableDeclarator(this);
}

void Java9_v2Parser::VariableDeclaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariableDeclarator(this);
}


antlrcpp::Any Java9_v2Parser::VariableDeclaratorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitVariableDeclarator(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::VariableDeclaratorContext* Java9_v2Parser::variableDeclarator() {
  VariableDeclaratorContext *_localctx = _tracker.createInstance<VariableDeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 120, Java9_v2Parser::RuleVariableDeclarator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1008);
    variableDeclaratorId();
    setState(1011);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java9_v2Parser::ASSIGN) {
      setState(1009);
      match(Java9_v2Parser::ASSIGN);
      setState(1010);
      variableInitializer();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableDeclaratorIdContext ------------------------------------------------------------------

Java9_v2Parser::VariableDeclaratorIdContext::VariableDeclaratorIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::VariableDeclaratorIdContext::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

Java9_v2Parser::DimsContext* Java9_v2Parser::VariableDeclaratorIdContext::dims() {
  return getRuleContext<Java9_v2Parser::DimsContext>(0);
}


size_t Java9_v2Parser::VariableDeclaratorIdContext::getRuleIndex() const {
  return Java9_v2Parser::RuleVariableDeclaratorId;
}

void Java9_v2Parser::VariableDeclaratorIdContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariableDeclaratorId(this);
}

void Java9_v2Parser::VariableDeclaratorIdContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariableDeclaratorId(this);
}


antlrcpp::Any Java9_v2Parser::VariableDeclaratorIdContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitVariableDeclaratorId(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::VariableDeclaratorIdContext* Java9_v2Parser::variableDeclaratorId() {
  VariableDeclaratorIdContext *_localctx = _tracker.createInstance<VariableDeclaratorIdContext>(_ctx, getState());
  enterRule(_localctx, 122, Java9_v2Parser::RuleVariableDeclaratorId);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1013);
    identifier();
    setState(1015);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java9_v2Parser::LBRACK

    || _la == Java9_v2Parser::AT) {
      setState(1014);
      dims();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableInitializerContext ------------------------------------------------------------------

Java9_v2Parser::VariableInitializerContext::VariableInitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::VariableInitializerContext::getRuleIndex() const {
  return Java9_v2Parser::RuleVariableInitializer;
}

void Java9_v2Parser::VariableInitializerContext::copyFrom(VariableInitializerContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- VariableInitializer1Context ------------------------------------------------------------------

Java9_v2Parser::ExpressionContext* Java9_v2Parser::VariableInitializer1Context::expression() {
  return getRuleContext<Java9_v2Parser::ExpressionContext>(0);
}

Java9_v2Parser::VariableInitializer1Context::VariableInitializer1Context(VariableInitializerContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::VariableInitializer1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariableInitializer1(this);
}
void Java9_v2Parser::VariableInitializer1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariableInitializer1(this);
}

antlrcpp::Any Java9_v2Parser::VariableInitializer1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitVariableInitializer1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- VariableInitializer2Context ------------------------------------------------------------------

Java9_v2Parser::ArrayInitializerContext* Java9_v2Parser::VariableInitializer2Context::arrayInitializer() {
  return getRuleContext<Java9_v2Parser::ArrayInitializerContext>(0);
}

Java9_v2Parser::VariableInitializer2Context::VariableInitializer2Context(VariableInitializerContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::VariableInitializer2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariableInitializer2(this);
}
void Java9_v2Parser::VariableInitializer2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariableInitializer2(this);
}

antlrcpp::Any Java9_v2Parser::VariableInitializer2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitVariableInitializer2(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::VariableInitializerContext* Java9_v2Parser::variableInitializer() {
  VariableInitializerContext *_localctx = _tracker.createInstance<VariableInitializerContext>(_ctx, getState());
  enterRule(_localctx, 124, Java9_v2Parser::RuleVariableInitializer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1019);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Java9_v2Parser::T__0:
      case Java9_v2Parser::T__1:
      case Java9_v2Parser::T__2:
      case Java9_v2Parser::T__3:
      case Java9_v2Parser::T__4:
      case Java9_v2Parser::T__5:
      case Java9_v2Parser::T__6:
      case Java9_v2Parser::T__7:
      case Java9_v2Parser::T__8:
      case Java9_v2Parser::BOOLEAN:
      case Java9_v2Parser::BYTE:
      case Java9_v2Parser::CHAR:
      case Java9_v2Parser::DOUBLE:
      case Java9_v2Parser::FLOAT:
      case Java9_v2Parser::INT:
      case Java9_v2Parser::LONG:
      case Java9_v2Parser::NEW:
      case Java9_v2Parser::SHORT:
      case Java9_v2Parser::SUPER:
      case Java9_v2Parser::THIS:
      case Java9_v2Parser::VOID:
      case Java9_v2Parser::IntegerLiteral:
      case Java9_v2Parser::FloatingPointLiteral:
      case Java9_v2Parser::BooleanLiteral:
      case Java9_v2Parser::CharacterLiteral:
      case Java9_v2Parser::StringLiteral:
      case Java9_v2Parser::NullLiteral:
      case Java9_v2Parser::LPAREN:
      case Java9_v2Parser::AT:
      case Java9_v2Parser::BANG:
      case Java9_v2Parser::TILDE:
      case Java9_v2Parser::INC:
      case Java9_v2Parser::DEC:
      case Java9_v2Parser::ADD:
      case Java9_v2Parser::SUB:
      case Java9_v2Parser::Identifier: {
        _localctx = dynamic_cast<VariableInitializerContext *>(_tracker.createInstance<Java9_v2Parser::VariableInitializer1Context>(_localctx));
        enterOuterAlt(_localctx, 1);
        setState(1017);
        expression();
        break;
      }

      case Java9_v2Parser::LBRACE: {
        _localctx = dynamic_cast<VariableInitializerContext *>(_tracker.createInstance<Java9_v2Parser::VariableInitializer2Context>(_localctx));
        enterOuterAlt(_localctx, 2);
        setState(1018);
        arrayInitializer();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnannTypeContext ------------------------------------------------------------------

Java9_v2Parser::UnannTypeContext::UnannTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::UnannTypeContext::getRuleIndex() const {
  return Java9_v2Parser::RuleUnannType;
}

void Java9_v2Parser::UnannTypeContext::copyFrom(UnannTypeContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- UnannType2Context ------------------------------------------------------------------

Java9_v2Parser::UnannReferenceTypeContext* Java9_v2Parser::UnannType2Context::unannReferenceType() {
  return getRuleContext<Java9_v2Parser::UnannReferenceTypeContext>(0);
}

Java9_v2Parser::UnannType2Context::UnannType2Context(UnannTypeContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::UnannType2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnannType2(this);
}
void Java9_v2Parser::UnannType2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnannType2(this);
}

antlrcpp::Any Java9_v2Parser::UnannType2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitUnannType2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- UnannType1Context ------------------------------------------------------------------

Java9_v2Parser::UnannPrimitiveTypeContext* Java9_v2Parser::UnannType1Context::unannPrimitiveType() {
  return getRuleContext<Java9_v2Parser::UnannPrimitiveTypeContext>(0);
}

Java9_v2Parser::UnannType1Context::UnannType1Context(UnannTypeContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::UnannType1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnannType1(this);
}
void Java9_v2Parser::UnannType1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnannType1(this);
}

antlrcpp::Any Java9_v2Parser::UnannType1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitUnannType1(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::UnannTypeContext* Java9_v2Parser::unannType() {
  UnannTypeContext *_localctx = _tracker.createInstance<UnannTypeContext>(_ctx, getState());
  enterRule(_localctx, 126, Java9_v2Parser::RuleUnannType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1023);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 72, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<UnannTypeContext *>(_tracker.createInstance<Java9_v2Parser::UnannType1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(1021);
      unannPrimitiveType();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<UnannTypeContext *>(_tracker.createInstance<Java9_v2Parser::UnannType2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(1022);
      unannReferenceType();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnannPrimitiveTypeContext ------------------------------------------------------------------

Java9_v2Parser::UnannPrimitiveTypeContext::UnannPrimitiveTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::UnannPrimitiveTypeContext::getRuleIndex() const {
  return Java9_v2Parser::RuleUnannPrimitiveType;
}

void Java9_v2Parser::UnannPrimitiveTypeContext::copyFrom(UnannPrimitiveTypeContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- UnannPrimitiveType2Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::UnannPrimitiveType2Context::BOOLEAN() {
  return getToken(Java9_v2Parser::BOOLEAN, 0);
}

Java9_v2Parser::UnannPrimitiveType2Context::UnannPrimitiveType2Context(UnannPrimitiveTypeContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::UnannPrimitiveType2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnannPrimitiveType2(this);
}
void Java9_v2Parser::UnannPrimitiveType2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnannPrimitiveType2(this);
}

antlrcpp::Any Java9_v2Parser::UnannPrimitiveType2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitUnannPrimitiveType2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- UnannPrimitiveType1Context ------------------------------------------------------------------

Java9_v2Parser::NumericTypeContext* Java9_v2Parser::UnannPrimitiveType1Context::numericType() {
  return getRuleContext<Java9_v2Parser::NumericTypeContext>(0);
}

Java9_v2Parser::UnannPrimitiveType1Context::UnannPrimitiveType1Context(UnannPrimitiveTypeContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::UnannPrimitiveType1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnannPrimitiveType1(this);
}
void Java9_v2Parser::UnannPrimitiveType1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnannPrimitiveType1(this);
}

antlrcpp::Any Java9_v2Parser::UnannPrimitiveType1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitUnannPrimitiveType1(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::UnannPrimitiveTypeContext* Java9_v2Parser::unannPrimitiveType() {
  UnannPrimitiveTypeContext *_localctx = _tracker.createInstance<UnannPrimitiveTypeContext>(_ctx, getState());
  enterRule(_localctx, 128, Java9_v2Parser::RuleUnannPrimitiveType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1027);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Java9_v2Parser::BYTE:
      case Java9_v2Parser::CHAR:
      case Java9_v2Parser::DOUBLE:
      case Java9_v2Parser::FLOAT:
      case Java9_v2Parser::INT:
      case Java9_v2Parser::LONG:
      case Java9_v2Parser::SHORT: {
        _localctx = dynamic_cast<UnannPrimitiveTypeContext *>(_tracker.createInstance<Java9_v2Parser::UnannPrimitiveType1Context>(_localctx));
        enterOuterAlt(_localctx, 1);
        setState(1025);
        numericType();
        break;
      }

      case Java9_v2Parser::BOOLEAN: {
        _localctx = dynamic_cast<UnannPrimitiveTypeContext *>(_tracker.createInstance<Java9_v2Parser::UnannPrimitiveType2Context>(_localctx));
        enterOuterAlt(_localctx, 2);
        setState(1026);
        match(Java9_v2Parser::BOOLEAN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnannReferenceTypeContext ------------------------------------------------------------------

Java9_v2Parser::UnannReferenceTypeContext::UnannReferenceTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::UnannReferenceTypeContext::getRuleIndex() const {
  return Java9_v2Parser::RuleUnannReferenceType;
}

void Java9_v2Parser::UnannReferenceTypeContext::copyFrom(UnannReferenceTypeContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- UnannReferenceType3Context ------------------------------------------------------------------

Java9_v2Parser::UnannArrayTypeContext* Java9_v2Parser::UnannReferenceType3Context::unannArrayType() {
  return getRuleContext<Java9_v2Parser::UnannArrayTypeContext>(0);
}

Java9_v2Parser::UnannReferenceType3Context::UnannReferenceType3Context(UnannReferenceTypeContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::UnannReferenceType3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnannReferenceType3(this);
}
void Java9_v2Parser::UnannReferenceType3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnannReferenceType3(this);
}

antlrcpp::Any Java9_v2Parser::UnannReferenceType3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitUnannReferenceType3(this);
  else
    return visitor->visitChildren(this);
}
//----------------- UnannReferenceType1Context ------------------------------------------------------------------

Java9_v2Parser::UnannClassOrInterfaceTypeContext* Java9_v2Parser::UnannReferenceType1Context::unannClassOrInterfaceType() {
  return getRuleContext<Java9_v2Parser::UnannClassOrInterfaceTypeContext>(0);
}

Java9_v2Parser::UnannReferenceType1Context::UnannReferenceType1Context(UnannReferenceTypeContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::UnannReferenceType1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnannReferenceType1(this);
}
void Java9_v2Parser::UnannReferenceType1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnannReferenceType1(this);
}

antlrcpp::Any Java9_v2Parser::UnannReferenceType1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitUnannReferenceType1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- UnannReferenceType2Context ------------------------------------------------------------------

Java9_v2Parser::UnannTypeVariableContext* Java9_v2Parser::UnannReferenceType2Context::unannTypeVariable() {
  return getRuleContext<Java9_v2Parser::UnannTypeVariableContext>(0);
}

Java9_v2Parser::UnannReferenceType2Context::UnannReferenceType2Context(UnannReferenceTypeContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::UnannReferenceType2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnannReferenceType2(this);
}
void Java9_v2Parser::UnannReferenceType2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnannReferenceType2(this);
}

antlrcpp::Any Java9_v2Parser::UnannReferenceType2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitUnannReferenceType2(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::UnannReferenceTypeContext* Java9_v2Parser::unannReferenceType() {
  UnannReferenceTypeContext *_localctx = _tracker.createInstance<UnannReferenceTypeContext>(_ctx, getState());
  enterRule(_localctx, 130, Java9_v2Parser::RuleUnannReferenceType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1032);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 74, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<UnannReferenceTypeContext *>(_tracker.createInstance<Java9_v2Parser::UnannReferenceType1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(1029);
      unannClassOrInterfaceType();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<UnannReferenceTypeContext *>(_tracker.createInstance<Java9_v2Parser::UnannReferenceType2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(1030);
      unannTypeVariable();
      break;
    }

    case 3: {
      _localctx = dynamic_cast<UnannReferenceTypeContext *>(_tracker.createInstance<Java9_v2Parser::UnannReferenceType3Context>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(1031);
      unannArrayType();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnannClassOrInterfaceTypeContext ------------------------------------------------------------------

Java9_v2Parser::UnannClassOrInterfaceTypeContext::UnannClassOrInterfaceTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::UnannClassType_lfno_unannClassOrInterfaceTypeContext* Java9_v2Parser::UnannClassOrInterfaceTypeContext::unannClassType_lfno_unannClassOrInterfaceType() {
  return getRuleContext<Java9_v2Parser::UnannClassType_lfno_unannClassOrInterfaceTypeContext>(0);
}

Java9_v2Parser::UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext* Java9_v2Parser::UnannClassOrInterfaceTypeContext::unannInterfaceType_lfno_unannClassOrInterfaceType() {
  return getRuleContext<Java9_v2Parser::UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext>(0);
}

std::vector<Java9_v2Parser::UnannClassType_lf_unannClassOrInterfaceTypeContext *> Java9_v2Parser::UnannClassOrInterfaceTypeContext::unannClassType_lf_unannClassOrInterfaceType() {
  return getRuleContexts<Java9_v2Parser::UnannClassType_lf_unannClassOrInterfaceTypeContext>();
}

Java9_v2Parser::UnannClassType_lf_unannClassOrInterfaceTypeContext* Java9_v2Parser::UnannClassOrInterfaceTypeContext::unannClassType_lf_unannClassOrInterfaceType(size_t i) {
  return getRuleContext<Java9_v2Parser::UnannClassType_lf_unannClassOrInterfaceTypeContext>(i);
}

std::vector<Java9_v2Parser::UnannInterfaceType_lf_unannClassOrInterfaceTypeContext *> Java9_v2Parser::UnannClassOrInterfaceTypeContext::unannInterfaceType_lf_unannClassOrInterfaceType() {
  return getRuleContexts<Java9_v2Parser::UnannInterfaceType_lf_unannClassOrInterfaceTypeContext>();
}

Java9_v2Parser::UnannInterfaceType_lf_unannClassOrInterfaceTypeContext* Java9_v2Parser::UnannClassOrInterfaceTypeContext::unannInterfaceType_lf_unannClassOrInterfaceType(size_t i) {
  return getRuleContext<Java9_v2Parser::UnannInterfaceType_lf_unannClassOrInterfaceTypeContext>(i);
}


size_t Java9_v2Parser::UnannClassOrInterfaceTypeContext::getRuleIndex() const {
  return Java9_v2Parser::RuleUnannClassOrInterfaceType;
}

void Java9_v2Parser::UnannClassOrInterfaceTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnannClassOrInterfaceType(this);
}

void Java9_v2Parser::UnannClassOrInterfaceTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnannClassOrInterfaceType(this);
}


antlrcpp::Any Java9_v2Parser::UnannClassOrInterfaceTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitUnannClassOrInterfaceType(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::UnannClassOrInterfaceTypeContext* Java9_v2Parser::unannClassOrInterfaceType() {
  UnannClassOrInterfaceTypeContext *_localctx = _tracker.createInstance<UnannClassOrInterfaceTypeContext>(_ctx, getState());
  enterRule(_localctx, 132, Java9_v2Parser::RuleUnannClassOrInterfaceType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1036);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 75, _ctx)) {
    case 1: {
      setState(1034);
      unannClassType_lfno_unannClassOrInterfaceType();
      break;
    }

    case 2: {
      setState(1035);
      unannInterfaceType_lfno_unannClassOrInterfaceType();
      break;
    }

    default:
      break;
    }
    setState(1042);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 77, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1040);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx)) {
        case 1: {
          setState(1038);
          unannClassType_lf_unannClassOrInterfaceType();
          break;
        }

        case 2: {
          setState(1039);
          unannInterfaceType_lf_unannClassOrInterfaceType();
          break;
        }

        default:
          break;
        } 
      }
      setState(1044);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 77, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnannClassTypeContext ------------------------------------------------------------------

Java9_v2Parser::UnannClassTypeContext::UnannClassTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::UnannClassTypeContext::getRuleIndex() const {
  return Java9_v2Parser::RuleUnannClassType;
}

void Java9_v2Parser::UnannClassTypeContext::copyFrom(UnannClassTypeContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- UnannClassType2Context ------------------------------------------------------------------

Java9_v2Parser::UnannClassOrInterfaceTypeContext* Java9_v2Parser::UnannClassType2Context::unannClassOrInterfaceType() {
  return getRuleContext<Java9_v2Parser::UnannClassOrInterfaceTypeContext>(0);
}

tree::TerminalNode* Java9_v2Parser::UnannClassType2Context::DOT() {
  return getToken(Java9_v2Parser::DOT, 0);
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::UnannClassType2Context::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

std::vector<Java9_v2Parser::AnnotationContext *> Java9_v2Parser::UnannClassType2Context::annotation() {
  return getRuleContexts<Java9_v2Parser::AnnotationContext>();
}

Java9_v2Parser::AnnotationContext* Java9_v2Parser::UnannClassType2Context::annotation(size_t i) {
  return getRuleContext<Java9_v2Parser::AnnotationContext>(i);
}

Java9_v2Parser::TypeArgumentsContext* Java9_v2Parser::UnannClassType2Context::typeArguments() {
  return getRuleContext<Java9_v2Parser::TypeArgumentsContext>(0);
}

Java9_v2Parser::UnannClassType2Context::UnannClassType2Context(UnannClassTypeContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::UnannClassType2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnannClassType2(this);
}
void Java9_v2Parser::UnannClassType2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnannClassType2(this);
}

antlrcpp::Any Java9_v2Parser::UnannClassType2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitUnannClassType2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- UnannClassType1Context ------------------------------------------------------------------

Java9_v2Parser::IdentifierContext* Java9_v2Parser::UnannClassType1Context::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

Java9_v2Parser::TypeArgumentsContext* Java9_v2Parser::UnannClassType1Context::typeArguments() {
  return getRuleContext<Java9_v2Parser::TypeArgumentsContext>(0);
}

Java9_v2Parser::UnannClassType1Context::UnannClassType1Context(UnannClassTypeContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::UnannClassType1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnannClassType1(this);
}
void Java9_v2Parser::UnannClassType1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnannClassType1(this);
}

antlrcpp::Any Java9_v2Parser::UnannClassType1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitUnannClassType1(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::UnannClassTypeContext* Java9_v2Parser::unannClassType() {
  UnannClassTypeContext *_localctx = _tracker.createInstance<UnannClassTypeContext>(_ctx, getState());
  enterRule(_localctx, 134, Java9_v2Parser::RuleUnannClassType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1061);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 81, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<UnannClassTypeContext *>(_tracker.createInstance<Java9_v2Parser::UnannClassType1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(1045);
      identifier();
      setState(1047);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java9_v2Parser::LT) {
        setState(1046);
        typeArguments();
      }
      break;
    }

    case 2: {
      _localctx = dynamic_cast<UnannClassTypeContext *>(_tracker.createInstance<Java9_v2Parser::UnannClassType2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(1049);
      unannClassOrInterfaceType();
      setState(1050);
      match(Java9_v2Parser::DOT);
      setState(1054);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Java9_v2Parser::AT) {
        setState(1051);
        annotation();
        setState(1056);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1057);
      identifier();
      setState(1059);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java9_v2Parser::LT) {
        setState(1058);
        typeArguments();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnannClassType_lf_unannClassOrInterfaceTypeContext ------------------------------------------------------------------

Java9_v2Parser::UnannClassType_lf_unannClassOrInterfaceTypeContext::UnannClassType_lf_unannClassOrInterfaceTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::UnannClassType_lf_unannClassOrInterfaceTypeContext::DOT() {
  return getToken(Java9_v2Parser::DOT, 0);
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::UnannClassType_lf_unannClassOrInterfaceTypeContext::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

std::vector<Java9_v2Parser::AnnotationContext *> Java9_v2Parser::UnannClassType_lf_unannClassOrInterfaceTypeContext::annotation() {
  return getRuleContexts<Java9_v2Parser::AnnotationContext>();
}

Java9_v2Parser::AnnotationContext* Java9_v2Parser::UnannClassType_lf_unannClassOrInterfaceTypeContext::annotation(size_t i) {
  return getRuleContext<Java9_v2Parser::AnnotationContext>(i);
}

Java9_v2Parser::TypeArgumentsContext* Java9_v2Parser::UnannClassType_lf_unannClassOrInterfaceTypeContext::typeArguments() {
  return getRuleContext<Java9_v2Parser::TypeArgumentsContext>(0);
}


size_t Java9_v2Parser::UnannClassType_lf_unannClassOrInterfaceTypeContext::getRuleIndex() const {
  return Java9_v2Parser::RuleUnannClassType_lf_unannClassOrInterfaceType;
}

void Java9_v2Parser::UnannClassType_lf_unannClassOrInterfaceTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnannClassType_lf_unannClassOrInterfaceType(this);
}

void Java9_v2Parser::UnannClassType_lf_unannClassOrInterfaceTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnannClassType_lf_unannClassOrInterfaceType(this);
}


antlrcpp::Any Java9_v2Parser::UnannClassType_lf_unannClassOrInterfaceTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitUnannClassType_lf_unannClassOrInterfaceType(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::UnannClassType_lf_unannClassOrInterfaceTypeContext* Java9_v2Parser::unannClassType_lf_unannClassOrInterfaceType() {
  UnannClassType_lf_unannClassOrInterfaceTypeContext *_localctx = _tracker.createInstance<UnannClassType_lf_unannClassOrInterfaceTypeContext>(_ctx, getState());
  enterRule(_localctx, 136, Java9_v2Parser::RuleUnannClassType_lf_unannClassOrInterfaceType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1063);
    match(Java9_v2Parser::DOT);
    setState(1067);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java9_v2Parser::AT) {
      setState(1064);
      annotation();
      setState(1069);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1070);
    identifier();
    setState(1072);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java9_v2Parser::LT) {
      setState(1071);
      typeArguments();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnannClassType_lfno_unannClassOrInterfaceTypeContext ------------------------------------------------------------------

Java9_v2Parser::UnannClassType_lfno_unannClassOrInterfaceTypeContext::UnannClassType_lfno_unannClassOrInterfaceTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::UnannClassType_lfno_unannClassOrInterfaceTypeContext::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

Java9_v2Parser::TypeArgumentsContext* Java9_v2Parser::UnannClassType_lfno_unannClassOrInterfaceTypeContext::typeArguments() {
  return getRuleContext<Java9_v2Parser::TypeArgumentsContext>(0);
}


size_t Java9_v2Parser::UnannClassType_lfno_unannClassOrInterfaceTypeContext::getRuleIndex() const {
  return Java9_v2Parser::RuleUnannClassType_lfno_unannClassOrInterfaceType;
}

void Java9_v2Parser::UnannClassType_lfno_unannClassOrInterfaceTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnannClassType_lfno_unannClassOrInterfaceType(this);
}

void Java9_v2Parser::UnannClassType_lfno_unannClassOrInterfaceTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnannClassType_lfno_unannClassOrInterfaceType(this);
}


antlrcpp::Any Java9_v2Parser::UnannClassType_lfno_unannClassOrInterfaceTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitUnannClassType_lfno_unannClassOrInterfaceType(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::UnannClassType_lfno_unannClassOrInterfaceTypeContext* Java9_v2Parser::unannClassType_lfno_unannClassOrInterfaceType() {
  UnannClassType_lfno_unannClassOrInterfaceTypeContext *_localctx = _tracker.createInstance<UnannClassType_lfno_unannClassOrInterfaceTypeContext>(_ctx, getState());
  enterRule(_localctx, 138, Java9_v2Parser::RuleUnannClassType_lfno_unannClassOrInterfaceType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1074);
    identifier();
    setState(1076);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java9_v2Parser::LT) {
      setState(1075);
      typeArguments();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnannInterfaceTypeContext ------------------------------------------------------------------

Java9_v2Parser::UnannInterfaceTypeContext::UnannInterfaceTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::UnannClassTypeContext* Java9_v2Parser::UnannInterfaceTypeContext::unannClassType() {
  return getRuleContext<Java9_v2Parser::UnannClassTypeContext>(0);
}


size_t Java9_v2Parser::UnannInterfaceTypeContext::getRuleIndex() const {
  return Java9_v2Parser::RuleUnannInterfaceType;
}

void Java9_v2Parser::UnannInterfaceTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnannInterfaceType(this);
}

void Java9_v2Parser::UnannInterfaceTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnannInterfaceType(this);
}


antlrcpp::Any Java9_v2Parser::UnannInterfaceTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitUnannInterfaceType(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::UnannInterfaceTypeContext* Java9_v2Parser::unannInterfaceType() {
  UnannInterfaceTypeContext *_localctx = _tracker.createInstance<UnannInterfaceTypeContext>(_ctx, getState());
  enterRule(_localctx, 140, Java9_v2Parser::RuleUnannInterfaceType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1078);
    unannClassType();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnannInterfaceType_lf_unannClassOrInterfaceTypeContext ------------------------------------------------------------------

Java9_v2Parser::UnannInterfaceType_lf_unannClassOrInterfaceTypeContext::UnannInterfaceType_lf_unannClassOrInterfaceTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::UnannClassType_lf_unannClassOrInterfaceTypeContext* Java9_v2Parser::UnannInterfaceType_lf_unannClassOrInterfaceTypeContext::unannClassType_lf_unannClassOrInterfaceType() {
  return getRuleContext<Java9_v2Parser::UnannClassType_lf_unannClassOrInterfaceTypeContext>(0);
}


size_t Java9_v2Parser::UnannInterfaceType_lf_unannClassOrInterfaceTypeContext::getRuleIndex() const {
  return Java9_v2Parser::RuleUnannInterfaceType_lf_unannClassOrInterfaceType;
}

void Java9_v2Parser::UnannInterfaceType_lf_unannClassOrInterfaceTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnannInterfaceType_lf_unannClassOrInterfaceType(this);
}

void Java9_v2Parser::UnannInterfaceType_lf_unannClassOrInterfaceTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnannInterfaceType_lf_unannClassOrInterfaceType(this);
}


antlrcpp::Any Java9_v2Parser::UnannInterfaceType_lf_unannClassOrInterfaceTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitUnannInterfaceType_lf_unannClassOrInterfaceType(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::UnannInterfaceType_lf_unannClassOrInterfaceTypeContext* Java9_v2Parser::unannInterfaceType_lf_unannClassOrInterfaceType() {
  UnannInterfaceType_lf_unannClassOrInterfaceTypeContext *_localctx = _tracker.createInstance<UnannInterfaceType_lf_unannClassOrInterfaceTypeContext>(_ctx, getState());
  enterRule(_localctx, 142, Java9_v2Parser::RuleUnannInterfaceType_lf_unannClassOrInterfaceType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1080);
    unannClassType_lf_unannClassOrInterfaceType();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext ------------------------------------------------------------------

Java9_v2Parser::UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext::UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::UnannClassType_lfno_unannClassOrInterfaceTypeContext* Java9_v2Parser::UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext::unannClassType_lfno_unannClassOrInterfaceType() {
  return getRuleContext<Java9_v2Parser::UnannClassType_lfno_unannClassOrInterfaceTypeContext>(0);
}


size_t Java9_v2Parser::UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext::getRuleIndex() const {
  return Java9_v2Parser::RuleUnannInterfaceType_lfno_unannClassOrInterfaceType;
}

void Java9_v2Parser::UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnannInterfaceType_lfno_unannClassOrInterfaceType(this);
}

void Java9_v2Parser::UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnannInterfaceType_lfno_unannClassOrInterfaceType(this);
}


antlrcpp::Any Java9_v2Parser::UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitUnannInterfaceType_lfno_unannClassOrInterfaceType(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext* Java9_v2Parser::unannInterfaceType_lfno_unannClassOrInterfaceType() {
  UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext *_localctx = _tracker.createInstance<UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext>(_ctx, getState());
  enterRule(_localctx, 144, Java9_v2Parser::RuleUnannInterfaceType_lfno_unannClassOrInterfaceType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1082);
    unannClassType_lfno_unannClassOrInterfaceType();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnannTypeVariableContext ------------------------------------------------------------------

Java9_v2Parser::UnannTypeVariableContext::UnannTypeVariableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::UnannTypeVariableContext::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}


size_t Java9_v2Parser::UnannTypeVariableContext::getRuleIndex() const {
  return Java9_v2Parser::RuleUnannTypeVariable;
}

void Java9_v2Parser::UnannTypeVariableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnannTypeVariable(this);
}

void Java9_v2Parser::UnannTypeVariableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnannTypeVariable(this);
}


antlrcpp::Any Java9_v2Parser::UnannTypeVariableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitUnannTypeVariable(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::UnannTypeVariableContext* Java9_v2Parser::unannTypeVariable() {
  UnannTypeVariableContext *_localctx = _tracker.createInstance<UnannTypeVariableContext>(_ctx, getState());
  enterRule(_localctx, 146, Java9_v2Parser::RuleUnannTypeVariable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1084);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnannArrayTypeContext ------------------------------------------------------------------

Java9_v2Parser::UnannArrayTypeContext::UnannArrayTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::UnannArrayTypeContext::getRuleIndex() const {
  return Java9_v2Parser::RuleUnannArrayType;
}

void Java9_v2Parser::UnannArrayTypeContext::copyFrom(UnannArrayTypeContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- UnannArrayType2Context ------------------------------------------------------------------

Java9_v2Parser::UnannClassOrInterfaceTypeContext* Java9_v2Parser::UnannArrayType2Context::unannClassOrInterfaceType() {
  return getRuleContext<Java9_v2Parser::UnannClassOrInterfaceTypeContext>(0);
}

Java9_v2Parser::DimsContext* Java9_v2Parser::UnannArrayType2Context::dims() {
  return getRuleContext<Java9_v2Parser::DimsContext>(0);
}

Java9_v2Parser::UnannArrayType2Context::UnannArrayType2Context(UnannArrayTypeContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::UnannArrayType2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnannArrayType2(this);
}
void Java9_v2Parser::UnannArrayType2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnannArrayType2(this);
}

antlrcpp::Any Java9_v2Parser::UnannArrayType2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitUnannArrayType2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- UnannArrayType1Context ------------------------------------------------------------------

Java9_v2Parser::UnannPrimitiveTypeContext* Java9_v2Parser::UnannArrayType1Context::unannPrimitiveType() {
  return getRuleContext<Java9_v2Parser::UnannPrimitiveTypeContext>(0);
}

Java9_v2Parser::DimsContext* Java9_v2Parser::UnannArrayType1Context::dims() {
  return getRuleContext<Java9_v2Parser::DimsContext>(0);
}

Java9_v2Parser::UnannArrayType1Context::UnannArrayType1Context(UnannArrayTypeContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::UnannArrayType1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnannArrayType1(this);
}
void Java9_v2Parser::UnannArrayType1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnannArrayType1(this);
}

antlrcpp::Any Java9_v2Parser::UnannArrayType1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitUnannArrayType1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- UnannArrayTyp3Context ------------------------------------------------------------------

Java9_v2Parser::UnannTypeVariableContext* Java9_v2Parser::UnannArrayTyp3Context::unannTypeVariable() {
  return getRuleContext<Java9_v2Parser::UnannTypeVariableContext>(0);
}

Java9_v2Parser::DimsContext* Java9_v2Parser::UnannArrayTyp3Context::dims() {
  return getRuleContext<Java9_v2Parser::DimsContext>(0);
}

Java9_v2Parser::UnannArrayTyp3Context::UnannArrayTyp3Context(UnannArrayTypeContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::UnannArrayTyp3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnannArrayTyp3(this);
}
void Java9_v2Parser::UnannArrayTyp3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnannArrayTyp3(this);
}

antlrcpp::Any Java9_v2Parser::UnannArrayTyp3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitUnannArrayTyp3(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::UnannArrayTypeContext* Java9_v2Parser::unannArrayType() {
  UnannArrayTypeContext *_localctx = _tracker.createInstance<UnannArrayTypeContext>(_ctx, getState());
  enterRule(_localctx, 148, Java9_v2Parser::RuleUnannArrayType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1095);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 85, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<UnannArrayTypeContext *>(_tracker.createInstance<Java9_v2Parser::UnannArrayType1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(1086);
      unannPrimitiveType();
      setState(1087);
      dims();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<UnannArrayTypeContext *>(_tracker.createInstance<Java9_v2Parser::UnannArrayType2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(1089);
      unannClassOrInterfaceType();
      setState(1090);
      dims();
      break;
    }

    case 3: {
      _localctx = dynamic_cast<UnannArrayTypeContext *>(_tracker.createInstance<Java9_v2Parser::UnannArrayTyp3Context>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(1092);
      unannTypeVariable();
      setState(1093);
      dims();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodDeclarationContext ------------------------------------------------------------------

Java9_v2Parser::MethodDeclarationContext::MethodDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::MethodHeaderContext* Java9_v2Parser::MethodDeclarationContext::methodHeader() {
  return getRuleContext<Java9_v2Parser::MethodHeaderContext>(0);
}

Java9_v2Parser::MethodBodyContext* Java9_v2Parser::MethodDeclarationContext::methodBody() {
  return getRuleContext<Java9_v2Parser::MethodBodyContext>(0);
}

std::vector<Java9_v2Parser::MethodModifierContext *> Java9_v2Parser::MethodDeclarationContext::methodModifier() {
  return getRuleContexts<Java9_v2Parser::MethodModifierContext>();
}

Java9_v2Parser::MethodModifierContext* Java9_v2Parser::MethodDeclarationContext::methodModifier(size_t i) {
  return getRuleContext<Java9_v2Parser::MethodModifierContext>(i);
}


size_t Java9_v2Parser::MethodDeclarationContext::getRuleIndex() const {
  return Java9_v2Parser::RuleMethodDeclaration;
}

void Java9_v2Parser::MethodDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodDeclaration(this);
}

void Java9_v2Parser::MethodDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodDeclaration(this);
}


antlrcpp::Any Java9_v2Parser::MethodDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitMethodDeclaration(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::MethodDeclarationContext* Java9_v2Parser::methodDeclaration() {
  MethodDeclarationContext *_localctx = _tracker.createInstance<MethodDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 150, Java9_v2Parser::RuleMethodDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1100);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << Java9_v2Parser::ABSTRACT)
      | (1ULL << Java9_v2Parser::FINAL)
      | (1ULL << Java9_v2Parser::NATIVE)
      | (1ULL << Java9_v2Parser::PRIVATE)
      | (1ULL << Java9_v2Parser::PROTECTED)
      | (1ULL << Java9_v2Parser::PUBLIC)
      | (1ULL << Java9_v2Parser::STATIC)
      | (1ULL << Java9_v2Parser::STRICTFP)
      | (1ULL << Java9_v2Parser::SYNCHRONIZED))) != 0) || _la == Java9_v2Parser::AT) {
      setState(1097);
      methodModifier();
      setState(1102);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1103);
    methodHeader();
    setState(1104);
    methodBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodModifierContext ------------------------------------------------------------------

Java9_v2Parser::MethodModifierContext::MethodModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::AnnotationContext* Java9_v2Parser::MethodModifierContext::annotation() {
  return getRuleContext<Java9_v2Parser::AnnotationContext>(0);
}

tree::TerminalNode* Java9_v2Parser::MethodModifierContext::PUBLIC() {
  return getToken(Java9_v2Parser::PUBLIC, 0);
}

tree::TerminalNode* Java9_v2Parser::MethodModifierContext::PROTECTED() {
  return getToken(Java9_v2Parser::PROTECTED, 0);
}

tree::TerminalNode* Java9_v2Parser::MethodModifierContext::PRIVATE() {
  return getToken(Java9_v2Parser::PRIVATE, 0);
}

tree::TerminalNode* Java9_v2Parser::MethodModifierContext::ABSTRACT() {
  return getToken(Java9_v2Parser::ABSTRACT, 0);
}

tree::TerminalNode* Java9_v2Parser::MethodModifierContext::STATIC() {
  return getToken(Java9_v2Parser::STATIC, 0);
}

tree::TerminalNode* Java9_v2Parser::MethodModifierContext::FINAL() {
  return getToken(Java9_v2Parser::FINAL, 0);
}

tree::TerminalNode* Java9_v2Parser::MethodModifierContext::SYNCHRONIZED() {
  return getToken(Java9_v2Parser::SYNCHRONIZED, 0);
}

tree::TerminalNode* Java9_v2Parser::MethodModifierContext::NATIVE() {
  return getToken(Java9_v2Parser::NATIVE, 0);
}

tree::TerminalNode* Java9_v2Parser::MethodModifierContext::STRICTFP() {
  return getToken(Java9_v2Parser::STRICTFP, 0);
}


size_t Java9_v2Parser::MethodModifierContext::getRuleIndex() const {
  return Java9_v2Parser::RuleMethodModifier;
}

void Java9_v2Parser::MethodModifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodModifier(this);
}

void Java9_v2Parser::MethodModifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodModifier(this);
}


antlrcpp::Any Java9_v2Parser::MethodModifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitMethodModifier(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::MethodModifierContext* Java9_v2Parser::methodModifier() {
  MethodModifierContext *_localctx = _tracker.createInstance<MethodModifierContext>(_ctx, getState());
  enterRule(_localctx, 152, Java9_v2Parser::RuleMethodModifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1116);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Java9_v2Parser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(1106);
        annotation();
        break;
      }

      case Java9_v2Parser::PUBLIC: {
        enterOuterAlt(_localctx, 2);
        setState(1107);
        match(Java9_v2Parser::PUBLIC);
        break;
      }

      case Java9_v2Parser::PROTECTED: {
        enterOuterAlt(_localctx, 3);
        setState(1108);
        match(Java9_v2Parser::PROTECTED);
        break;
      }

      case Java9_v2Parser::PRIVATE: {
        enterOuterAlt(_localctx, 4);
        setState(1109);
        match(Java9_v2Parser::PRIVATE);
        break;
      }

      case Java9_v2Parser::ABSTRACT: {
        enterOuterAlt(_localctx, 5);
        setState(1110);
        match(Java9_v2Parser::ABSTRACT);
        break;
      }

      case Java9_v2Parser::STATIC: {
        enterOuterAlt(_localctx, 6);
        setState(1111);
        match(Java9_v2Parser::STATIC);
        break;
      }

      case Java9_v2Parser::FINAL: {
        enterOuterAlt(_localctx, 7);
        setState(1112);
        match(Java9_v2Parser::FINAL);
        break;
      }

      case Java9_v2Parser::SYNCHRONIZED: {
        enterOuterAlt(_localctx, 8);
        setState(1113);
        match(Java9_v2Parser::SYNCHRONIZED);
        break;
      }

      case Java9_v2Parser::NATIVE: {
        enterOuterAlt(_localctx, 9);
        setState(1114);
        match(Java9_v2Parser::NATIVE);
        break;
      }

      case Java9_v2Parser::STRICTFP: {
        enterOuterAlt(_localctx, 10);
        setState(1115);
        match(Java9_v2Parser::STRICTFP);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodHeaderContext ------------------------------------------------------------------

Java9_v2Parser::MethodHeaderContext::MethodHeaderContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::ResultContext* Java9_v2Parser::MethodHeaderContext::result() {
  return getRuleContext<Java9_v2Parser::ResultContext>(0);
}

Java9_v2Parser::MethodDeclaratorContext* Java9_v2Parser::MethodHeaderContext::methodDeclarator() {
  return getRuleContext<Java9_v2Parser::MethodDeclaratorContext>(0);
}

Java9_v2Parser::Throws_Context* Java9_v2Parser::MethodHeaderContext::throws_() {
  return getRuleContext<Java9_v2Parser::Throws_Context>(0);
}

Java9_v2Parser::TypeParametersContext* Java9_v2Parser::MethodHeaderContext::typeParameters() {
  return getRuleContext<Java9_v2Parser::TypeParametersContext>(0);
}

std::vector<Java9_v2Parser::AnnotationContext *> Java9_v2Parser::MethodHeaderContext::annotation() {
  return getRuleContexts<Java9_v2Parser::AnnotationContext>();
}

Java9_v2Parser::AnnotationContext* Java9_v2Parser::MethodHeaderContext::annotation(size_t i) {
  return getRuleContext<Java9_v2Parser::AnnotationContext>(i);
}


size_t Java9_v2Parser::MethodHeaderContext::getRuleIndex() const {
  return Java9_v2Parser::RuleMethodHeader;
}

void Java9_v2Parser::MethodHeaderContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodHeader(this);
}

void Java9_v2Parser::MethodHeaderContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodHeader(this);
}


antlrcpp::Any Java9_v2Parser::MethodHeaderContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitMethodHeader(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::MethodHeaderContext* Java9_v2Parser::methodHeader() {
  MethodHeaderContext *_localctx = _tracker.createInstance<MethodHeaderContext>(_ctx, getState());
  enterRule(_localctx, 154, Java9_v2Parser::RuleMethodHeader);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1135);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Java9_v2Parser::T__0:
      case Java9_v2Parser::T__1:
      case Java9_v2Parser::T__2:
      case Java9_v2Parser::T__3:
      case Java9_v2Parser::T__4:
      case Java9_v2Parser::T__5:
      case Java9_v2Parser::T__6:
      case Java9_v2Parser::T__7:
      case Java9_v2Parser::T__8:
      case Java9_v2Parser::BOOLEAN:
      case Java9_v2Parser::BYTE:
      case Java9_v2Parser::CHAR:
      case Java9_v2Parser::DOUBLE:
      case Java9_v2Parser::FLOAT:
      case Java9_v2Parser::INT:
      case Java9_v2Parser::LONG:
      case Java9_v2Parser::SHORT:
      case Java9_v2Parser::VOID:
      case Java9_v2Parser::Identifier: {
        enterOuterAlt(_localctx, 1);
        setState(1118);
        result();
        setState(1119);
        methodDeclarator();
        setState(1121);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Java9_v2Parser::THROWS) {
          setState(1120);
          throws_();
        }
        break;
      }

      case Java9_v2Parser::LT: {
        enterOuterAlt(_localctx, 2);
        setState(1123);
        typeParameters();
        setState(1127);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == Java9_v2Parser::AT) {
          setState(1124);
          annotation();
          setState(1129);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(1130);
        result();
        setState(1131);
        methodDeclarator();
        setState(1133);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Java9_v2Parser::THROWS) {
          setState(1132);
          throws_();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ResultContext ------------------------------------------------------------------

Java9_v2Parser::ResultContext::ResultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::UnannTypeContext* Java9_v2Parser::ResultContext::unannType() {
  return getRuleContext<Java9_v2Parser::UnannTypeContext>(0);
}

tree::TerminalNode* Java9_v2Parser::ResultContext::VOID() {
  return getToken(Java9_v2Parser::VOID, 0);
}


size_t Java9_v2Parser::ResultContext::getRuleIndex() const {
  return Java9_v2Parser::RuleResult;
}

void Java9_v2Parser::ResultContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterResult(this);
}

void Java9_v2Parser::ResultContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitResult(this);
}


antlrcpp::Any Java9_v2Parser::ResultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitResult(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::ResultContext* Java9_v2Parser::result() {
  ResultContext *_localctx = _tracker.createInstance<ResultContext>(_ctx, getState());
  enterRule(_localctx, 156, Java9_v2Parser::RuleResult);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1139);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Java9_v2Parser::T__0:
      case Java9_v2Parser::T__1:
      case Java9_v2Parser::T__2:
      case Java9_v2Parser::T__3:
      case Java9_v2Parser::T__4:
      case Java9_v2Parser::T__5:
      case Java9_v2Parser::T__6:
      case Java9_v2Parser::T__7:
      case Java9_v2Parser::T__8:
      case Java9_v2Parser::BOOLEAN:
      case Java9_v2Parser::BYTE:
      case Java9_v2Parser::CHAR:
      case Java9_v2Parser::DOUBLE:
      case Java9_v2Parser::FLOAT:
      case Java9_v2Parser::INT:
      case Java9_v2Parser::LONG:
      case Java9_v2Parser::SHORT:
      case Java9_v2Parser::Identifier: {
        enterOuterAlt(_localctx, 1);
        setState(1137);
        unannType();
        break;
      }

      case Java9_v2Parser::VOID: {
        enterOuterAlt(_localctx, 2);
        setState(1138);
        match(Java9_v2Parser::VOID);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodDeclaratorContext ------------------------------------------------------------------

Java9_v2Parser::MethodDeclaratorContext::MethodDeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::MethodDeclaratorContext::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

tree::TerminalNode* Java9_v2Parser::MethodDeclaratorContext::LPAREN() {
  return getToken(Java9_v2Parser::LPAREN, 0);
}

tree::TerminalNode* Java9_v2Parser::MethodDeclaratorContext::RPAREN() {
  return getToken(Java9_v2Parser::RPAREN, 0);
}

Java9_v2Parser::FormalParameterListContext* Java9_v2Parser::MethodDeclaratorContext::formalParameterList() {
  return getRuleContext<Java9_v2Parser::FormalParameterListContext>(0);
}

Java9_v2Parser::DimsContext* Java9_v2Parser::MethodDeclaratorContext::dims() {
  return getRuleContext<Java9_v2Parser::DimsContext>(0);
}


size_t Java9_v2Parser::MethodDeclaratorContext::getRuleIndex() const {
  return Java9_v2Parser::RuleMethodDeclarator;
}

void Java9_v2Parser::MethodDeclaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodDeclarator(this);
}

void Java9_v2Parser::MethodDeclaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodDeclarator(this);
}


antlrcpp::Any Java9_v2Parser::MethodDeclaratorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitMethodDeclarator(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::MethodDeclaratorContext* Java9_v2Parser::methodDeclarator() {
  MethodDeclaratorContext *_localctx = _tracker.createInstance<MethodDeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 158, Java9_v2Parser::RuleMethodDeclarator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1141);
    identifier();
    setState(1142);
    match(Java9_v2Parser::LPAREN);
    setState(1144);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << Java9_v2Parser::T__0)
      | (1ULL << Java9_v2Parser::T__1)
      | (1ULL << Java9_v2Parser::T__2)
      | (1ULL << Java9_v2Parser::T__3)
      | (1ULL << Java9_v2Parser::T__4)
      | (1ULL << Java9_v2Parser::T__5)
      | (1ULL << Java9_v2Parser::T__6)
      | (1ULL << Java9_v2Parser::T__7)
      | (1ULL << Java9_v2Parser::T__8)
      | (1ULL << Java9_v2Parser::BOOLEAN)
      | (1ULL << Java9_v2Parser::BYTE)
      | (1ULL << Java9_v2Parser::CHAR)
      | (1ULL << Java9_v2Parser::DOUBLE)
      | (1ULL << Java9_v2Parser::FINAL)
      | (1ULL << Java9_v2Parser::FLOAT)
      | (1ULL << Java9_v2Parser::INT)
      | (1ULL << Java9_v2Parser::LONG)
      | (1ULL << Java9_v2Parser::SHORT))) != 0) || _la == Java9_v2Parser::AT

    || _la == Java9_v2Parser::Identifier) {
      setState(1143);
      formalParameterList();
    }
    setState(1146);
    match(Java9_v2Parser::RPAREN);
    setState(1148);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java9_v2Parser::LBRACK

    || _la == Java9_v2Parser::AT) {
      setState(1147);
      dims();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FormalParameterListContext ------------------------------------------------------------------

Java9_v2Parser::FormalParameterListContext::FormalParameterListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::FormalParameterListContext::getRuleIndex() const {
  return Java9_v2Parser::RuleFormalParameterList;
}

void Java9_v2Parser::FormalParameterListContext::copyFrom(FormalParameterListContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- FormalParameterList3Context ------------------------------------------------------------------

Java9_v2Parser::ReceiverParameterContext* Java9_v2Parser::FormalParameterList3Context::receiverParameter() {
  return getRuleContext<Java9_v2Parser::ReceiverParameterContext>(0);
}

Java9_v2Parser::FormalParameterList3Context::FormalParameterList3Context(FormalParameterListContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::FormalParameterList3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormalParameterList3(this);
}
void Java9_v2Parser::FormalParameterList3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormalParameterList3(this);
}

antlrcpp::Any Java9_v2Parser::FormalParameterList3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitFormalParameterList3(this);
  else
    return visitor->visitChildren(this);
}
//----------------- FormalParameterList2Context ------------------------------------------------------------------

Java9_v2Parser::LastFormalParameterContext* Java9_v2Parser::FormalParameterList2Context::lastFormalParameter() {
  return getRuleContext<Java9_v2Parser::LastFormalParameterContext>(0);
}

Java9_v2Parser::FormalParameterList2Context::FormalParameterList2Context(FormalParameterListContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::FormalParameterList2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormalParameterList2(this);
}
void Java9_v2Parser::FormalParameterList2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormalParameterList2(this);
}

antlrcpp::Any Java9_v2Parser::FormalParameterList2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitFormalParameterList2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- FormalParameterList1Context ------------------------------------------------------------------

Java9_v2Parser::FormalParametersContext* Java9_v2Parser::FormalParameterList1Context::formalParameters() {
  return getRuleContext<Java9_v2Parser::FormalParametersContext>(0);
}

tree::TerminalNode* Java9_v2Parser::FormalParameterList1Context::COMMA() {
  return getToken(Java9_v2Parser::COMMA, 0);
}

Java9_v2Parser::LastFormalParameterContext* Java9_v2Parser::FormalParameterList1Context::lastFormalParameter() {
  return getRuleContext<Java9_v2Parser::LastFormalParameterContext>(0);
}

Java9_v2Parser::FormalParameterList1Context::FormalParameterList1Context(FormalParameterListContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::FormalParameterList1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormalParameterList1(this);
}
void Java9_v2Parser::FormalParameterList1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormalParameterList1(this);
}

antlrcpp::Any Java9_v2Parser::FormalParameterList1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitFormalParameterList1(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::FormalParameterListContext* Java9_v2Parser::formalParameterList() {
  FormalParameterListContext *_localctx = _tracker.createInstance<FormalParameterListContext>(_ctx, getState());
  enterRule(_localctx, 160, Java9_v2Parser::RuleFormalParameterList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1156);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 95, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<FormalParameterListContext *>(_tracker.createInstance<Java9_v2Parser::FormalParameterList1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(1150);
      formalParameters();
      setState(1151);
      match(Java9_v2Parser::COMMA);
      setState(1152);
      lastFormalParameter();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<FormalParameterListContext *>(_tracker.createInstance<Java9_v2Parser::FormalParameterList2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(1154);
      lastFormalParameter();
      break;
    }

    case 3: {
      _localctx = dynamic_cast<FormalParameterListContext *>(_tracker.createInstance<Java9_v2Parser::FormalParameterList3Context>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(1155);
      receiverParameter();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FormalParametersContext ------------------------------------------------------------------

Java9_v2Parser::FormalParametersContext::FormalParametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::FormalParametersContext::getRuleIndex() const {
  return Java9_v2Parser::RuleFormalParameters;
}

void Java9_v2Parser::FormalParametersContext::copyFrom(FormalParametersContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- FormalParameters2Context ------------------------------------------------------------------

Java9_v2Parser::ReceiverParameterContext* Java9_v2Parser::FormalParameters2Context::receiverParameter() {
  return getRuleContext<Java9_v2Parser::ReceiverParameterContext>(0);
}

std::vector<tree::TerminalNode *> Java9_v2Parser::FormalParameters2Context::COMMA() {
  return getTokens(Java9_v2Parser::COMMA);
}

tree::TerminalNode* Java9_v2Parser::FormalParameters2Context::COMMA(size_t i) {
  return getToken(Java9_v2Parser::COMMA, i);
}

std::vector<Java9_v2Parser::FormalParameterContext *> Java9_v2Parser::FormalParameters2Context::formalParameter() {
  return getRuleContexts<Java9_v2Parser::FormalParameterContext>();
}

Java9_v2Parser::FormalParameterContext* Java9_v2Parser::FormalParameters2Context::formalParameter(size_t i) {
  return getRuleContext<Java9_v2Parser::FormalParameterContext>(i);
}

Java9_v2Parser::FormalParameters2Context::FormalParameters2Context(FormalParametersContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::FormalParameters2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormalParameters2(this);
}
void Java9_v2Parser::FormalParameters2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormalParameters2(this);
}

antlrcpp::Any Java9_v2Parser::FormalParameters2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitFormalParameters2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- FormalParameters1Context ------------------------------------------------------------------

std::vector<Java9_v2Parser::FormalParameterContext *> Java9_v2Parser::FormalParameters1Context::formalParameter() {
  return getRuleContexts<Java9_v2Parser::FormalParameterContext>();
}

Java9_v2Parser::FormalParameterContext* Java9_v2Parser::FormalParameters1Context::formalParameter(size_t i) {
  return getRuleContext<Java9_v2Parser::FormalParameterContext>(i);
}

std::vector<tree::TerminalNode *> Java9_v2Parser::FormalParameters1Context::COMMA() {
  return getTokens(Java9_v2Parser::COMMA);
}

tree::TerminalNode* Java9_v2Parser::FormalParameters1Context::COMMA(size_t i) {
  return getToken(Java9_v2Parser::COMMA, i);
}

Java9_v2Parser::FormalParameters1Context::FormalParameters1Context(FormalParametersContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::FormalParameters1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormalParameters1(this);
}
void Java9_v2Parser::FormalParameters1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormalParameters1(this);
}

antlrcpp::Any Java9_v2Parser::FormalParameters1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitFormalParameters1(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::FormalParametersContext* Java9_v2Parser::formalParameters() {
  FormalParametersContext *_localctx = _tracker.createInstance<FormalParametersContext>(_ctx, getState());
  enterRule(_localctx, 162, Java9_v2Parser::RuleFormalParameters);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1174);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 98, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<FormalParametersContext *>(_tracker.createInstance<Java9_v2Parser::FormalParameters1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(1158);
      formalParameter();
      setState(1163);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 96, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1159);
          match(Java9_v2Parser::COMMA);
          setState(1160);
          formalParameter(); 
        }
        setState(1165);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 96, _ctx);
      }
      break;
    }

    case 2: {
      _localctx = dynamic_cast<FormalParametersContext *>(_tracker.createInstance<Java9_v2Parser::FormalParameters2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(1166);
      receiverParameter();
      setState(1171);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 97, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1167);
          match(Java9_v2Parser::COMMA);
          setState(1168);
          formalParameter(); 
        }
        setState(1173);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 97, _ctx);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FormalParameterContext ------------------------------------------------------------------

Java9_v2Parser::FormalParameterContext::FormalParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::UnannTypeContext* Java9_v2Parser::FormalParameterContext::unannType() {
  return getRuleContext<Java9_v2Parser::UnannTypeContext>(0);
}

Java9_v2Parser::VariableDeclaratorIdContext* Java9_v2Parser::FormalParameterContext::variableDeclaratorId() {
  return getRuleContext<Java9_v2Parser::VariableDeclaratorIdContext>(0);
}

std::vector<Java9_v2Parser::VariableModifierContext *> Java9_v2Parser::FormalParameterContext::variableModifier() {
  return getRuleContexts<Java9_v2Parser::VariableModifierContext>();
}

Java9_v2Parser::VariableModifierContext* Java9_v2Parser::FormalParameterContext::variableModifier(size_t i) {
  return getRuleContext<Java9_v2Parser::VariableModifierContext>(i);
}


size_t Java9_v2Parser::FormalParameterContext::getRuleIndex() const {
  return Java9_v2Parser::RuleFormalParameter;
}

void Java9_v2Parser::FormalParameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormalParameter(this);
}

void Java9_v2Parser::FormalParameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormalParameter(this);
}


antlrcpp::Any Java9_v2Parser::FormalParameterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitFormalParameter(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::FormalParameterContext* Java9_v2Parser::formalParameter() {
  FormalParameterContext *_localctx = _tracker.createInstance<FormalParameterContext>(_ctx, getState());
  enterRule(_localctx, 164, Java9_v2Parser::RuleFormalParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1179);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java9_v2Parser::FINAL

    || _la == Java9_v2Parser::AT) {
      setState(1176);
      variableModifier();
      setState(1181);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1182);
    unannType();
    setState(1183);
    variableDeclaratorId();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableModifierContext ------------------------------------------------------------------

Java9_v2Parser::VariableModifierContext::VariableModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::AnnotationContext* Java9_v2Parser::VariableModifierContext::annotation() {
  return getRuleContext<Java9_v2Parser::AnnotationContext>(0);
}

tree::TerminalNode* Java9_v2Parser::VariableModifierContext::FINAL() {
  return getToken(Java9_v2Parser::FINAL, 0);
}


size_t Java9_v2Parser::VariableModifierContext::getRuleIndex() const {
  return Java9_v2Parser::RuleVariableModifier;
}

void Java9_v2Parser::VariableModifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariableModifier(this);
}

void Java9_v2Parser::VariableModifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariableModifier(this);
}


antlrcpp::Any Java9_v2Parser::VariableModifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitVariableModifier(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::VariableModifierContext* Java9_v2Parser::variableModifier() {
  VariableModifierContext *_localctx = _tracker.createInstance<VariableModifierContext>(_ctx, getState());
  enterRule(_localctx, 166, Java9_v2Parser::RuleVariableModifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1187);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Java9_v2Parser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(1185);
        annotation();
        break;
      }

      case Java9_v2Parser::FINAL: {
        enterOuterAlt(_localctx, 2);
        setState(1186);
        match(Java9_v2Parser::FINAL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LastFormalParameterContext ------------------------------------------------------------------

Java9_v2Parser::LastFormalParameterContext::LastFormalParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::LastFormalParameterContext::getRuleIndex() const {
  return Java9_v2Parser::RuleLastFormalParameter;
}

void Java9_v2Parser::LastFormalParameterContext::copyFrom(LastFormalParameterContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- LastFormalParameter2Context ------------------------------------------------------------------

Java9_v2Parser::FormalParameterContext* Java9_v2Parser::LastFormalParameter2Context::formalParameter() {
  return getRuleContext<Java9_v2Parser::FormalParameterContext>(0);
}

Java9_v2Parser::LastFormalParameter2Context::LastFormalParameter2Context(LastFormalParameterContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::LastFormalParameter2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLastFormalParameter2(this);
}
void Java9_v2Parser::LastFormalParameter2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLastFormalParameter2(this);
}

antlrcpp::Any Java9_v2Parser::LastFormalParameter2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitLastFormalParameter2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LastFormalParameter1Context ------------------------------------------------------------------

Java9_v2Parser::UnannTypeContext* Java9_v2Parser::LastFormalParameter1Context::unannType() {
  return getRuleContext<Java9_v2Parser::UnannTypeContext>(0);
}

tree::TerminalNode* Java9_v2Parser::LastFormalParameter1Context::ELLIPSIS() {
  return getToken(Java9_v2Parser::ELLIPSIS, 0);
}

Java9_v2Parser::VariableDeclaratorIdContext* Java9_v2Parser::LastFormalParameter1Context::variableDeclaratorId() {
  return getRuleContext<Java9_v2Parser::VariableDeclaratorIdContext>(0);
}

std::vector<Java9_v2Parser::VariableModifierContext *> Java9_v2Parser::LastFormalParameter1Context::variableModifier() {
  return getRuleContexts<Java9_v2Parser::VariableModifierContext>();
}

Java9_v2Parser::VariableModifierContext* Java9_v2Parser::LastFormalParameter1Context::variableModifier(size_t i) {
  return getRuleContext<Java9_v2Parser::VariableModifierContext>(i);
}

std::vector<Java9_v2Parser::AnnotationContext *> Java9_v2Parser::LastFormalParameter1Context::annotation() {
  return getRuleContexts<Java9_v2Parser::AnnotationContext>();
}

Java9_v2Parser::AnnotationContext* Java9_v2Parser::LastFormalParameter1Context::annotation(size_t i) {
  return getRuleContext<Java9_v2Parser::AnnotationContext>(i);
}

Java9_v2Parser::LastFormalParameter1Context::LastFormalParameter1Context(LastFormalParameterContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::LastFormalParameter1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLastFormalParameter1(this);
}
void Java9_v2Parser::LastFormalParameter1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLastFormalParameter1(this);
}

antlrcpp::Any Java9_v2Parser::LastFormalParameter1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitLastFormalParameter1(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::LastFormalParameterContext* Java9_v2Parser::lastFormalParameter() {
  LastFormalParameterContext *_localctx = _tracker.createInstance<LastFormalParameterContext>(_ctx, getState());
  enterRule(_localctx, 168, Java9_v2Parser::RuleLastFormalParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1206);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 103, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<LastFormalParameterContext *>(_tracker.createInstance<Java9_v2Parser::LastFormalParameter1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(1192);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Java9_v2Parser::FINAL

      || _la == Java9_v2Parser::AT) {
        setState(1189);
        variableModifier();
        setState(1194);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1195);
      unannType();
      setState(1199);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Java9_v2Parser::AT) {
        setState(1196);
        annotation();
        setState(1201);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1202);
      match(Java9_v2Parser::ELLIPSIS);
      setState(1203);
      variableDeclaratorId();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<LastFormalParameterContext *>(_tracker.createInstance<Java9_v2Parser::LastFormalParameter2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(1205);
      formalParameter();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReceiverParameterContext ------------------------------------------------------------------

Java9_v2Parser::ReceiverParameterContext::ReceiverParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::UnannTypeContext* Java9_v2Parser::ReceiverParameterContext::unannType() {
  return getRuleContext<Java9_v2Parser::UnannTypeContext>(0);
}

tree::TerminalNode* Java9_v2Parser::ReceiverParameterContext::THIS() {
  return getToken(Java9_v2Parser::THIS, 0);
}

std::vector<Java9_v2Parser::AnnotationContext *> Java9_v2Parser::ReceiverParameterContext::annotation() {
  return getRuleContexts<Java9_v2Parser::AnnotationContext>();
}

Java9_v2Parser::AnnotationContext* Java9_v2Parser::ReceiverParameterContext::annotation(size_t i) {
  return getRuleContext<Java9_v2Parser::AnnotationContext>(i);
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::ReceiverParameterContext::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

tree::TerminalNode* Java9_v2Parser::ReceiverParameterContext::DOT() {
  return getToken(Java9_v2Parser::DOT, 0);
}


size_t Java9_v2Parser::ReceiverParameterContext::getRuleIndex() const {
  return Java9_v2Parser::RuleReceiverParameter;
}

void Java9_v2Parser::ReceiverParameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReceiverParameter(this);
}

void Java9_v2Parser::ReceiverParameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReceiverParameter(this);
}


antlrcpp::Any Java9_v2Parser::ReceiverParameterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitReceiverParameter(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::ReceiverParameterContext* Java9_v2Parser::receiverParameter() {
  ReceiverParameterContext *_localctx = _tracker.createInstance<ReceiverParameterContext>(_ctx, getState());
  enterRule(_localctx, 170, Java9_v2Parser::RuleReceiverParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1211);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java9_v2Parser::AT) {
      setState(1208);
      annotation();
      setState(1213);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1214);
    unannType();
    setState(1218);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << Java9_v2Parser::T__0)
      | (1ULL << Java9_v2Parser::T__1)
      | (1ULL << Java9_v2Parser::T__2)
      | (1ULL << Java9_v2Parser::T__3)
      | (1ULL << Java9_v2Parser::T__4)
      | (1ULL << Java9_v2Parser::T__5)
      | (1ULL << Java9_v2Parser::T__6)
      | (1ULL << Java9_v2Parser::T__7)
      | (1ULL << Java9_v2Parser::T__8))) != 0) || _la == Java9_v2Parser::Identifier) {
      setState(1215);
      identifier();
      setState(1216);
      match(Java9_v2Parser::DOT);
    }
    setState(1220);
    match(Java9_v2Parser::THIS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Throws_Context ------------------------------------------------------------------

Java9_v2Parser::Throws_Context::Throws_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::Throws_Context::THROWS() {
  return getToken(Java9_v2Parser::THROWS, 0);
}

Java9_v2Parser::ExceptionTypeListContext* Java9_v2Parser::Throws_Context::exceptionTypeList() {
  return getRuleContext<Java9_v2Parser::ExceptionTypeListContext>(0);
}


size_t Java9_v2Parser::Throws_Context::getRuleIndex() const {
  return Java9_v2Parser::RuleThrows_;
}

void Java9_v2Parser::Throws_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterThrows_(this);
}

void Java9_v2Parser::Throws_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitThrows_(this);
}


antlrcpp::Any Java9_v2Parser::Throws_Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitThrows_(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::Throws_Context* Java9_v2Parser::throws_() {
  Throws_Context *_localctx = _tracker.createInstance<Throws_Context>(_ctx, getState());
  enterRule(_localctx, 172, Java9_v2Parser::RuleThrows_);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1222);
    match(Java9_v2Parser::THROWS);
    setState(1223);
    exceptionTypeList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExceptionTypeListContext ------------------------------------------------------------------

Java9_v2Parser::ExceptionTypeListContext::ExceptionTypeListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Java9_v2Parser::ExceptionTypeContext *> Java9_v2Parser::ExceptionTypeListContext::exceptionType() {
  return getRuleContexts<Java9_v2Parser::ExceptionTypeContext>();
}

Java9_v2Parser::ExceptionTypeContext* Java9_v2Parser::ExceptionTypeListContext::exceptionType(size_t i) {
  return getRuleContext<Java9_v2Parser::ExceptionTypeContext>(i);
}

std::vector<tree::TerminalNode *> Java9_v2Parser::ExceptionTypeListContext::COMMA() {
  return getTokens(Java9_v2Parser::COMMA);
}

tree::TerminalNode* Java9_v2Parser::ExceptionTypeListContext::COMMA(size_t i) {
  return getToken(Java9_v2Parser::COMMA, i);
}


size_t Java9_v2Parser::ExceptionTypeListContext::getRuleIndex() const {
  return Java9_v2Parser::RuleExceptionTypeList;
}

void Java9_v2Parser::ExceptionTypeListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExceptionTypeList(this);
}

void Java9_v2Parser::ExceptionTypeListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExceptionTypeList(this);
}


antlrcpp::Any Java9_v2Parser::ExceptionTypeListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitExceptionTypeList(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::ExceptionTypeListContext* Java9_v2Parser::exceptionTypeList() {
  ExceptionTypeListContext *_localctx = _tracker.createInstance<ExceptionTypeListContext>(_ctx, getState());
  enterRule(_localctx, 174, Java9_v2Parser::RuleExceptionTypeList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1225);
    exceptionType();
    setState(1230);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java9_v2Parser::COMMA) {
      setState(1226);
      match(Java9_v2Parser::COMMA);
      setState(1227);
      exceptionType();
      setState(1232);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExceptionTypeContext ------------------------------------------------------------------

Java9_v2Parser::ExceptionTypeContext::ExceptionTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::ExceptionTypeContext::getRuleIndex() const {
  return Java9_v2Parser::RuleExceptionType;
}

void Java9_v2Parser::ExceptionTypeContext::copyFrom(ExceptionTypeContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ExceptionType2Context ------------------------------------------------------------------

Java9_v2Parser::TypeVariableContext* Java9_v2Parser::ExceptionType2Context::typeVariable() {
  return getRuleContext<Java9_v2Parser::TypeVariableContext>(0);
}

Java9_v2Parser::ExceptionType2Context::ExceptionType2Context(ExceptionTypeContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ExceptionType2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExceptionType2(this);
}
void Java9_v2Parser::ExceptionType2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExceptionType2(this);
}

antlrcpp::Any Java9_v2Parser::ExceptionType2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitExceptionType2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ExceptionType1Context ------------------------------------------------------------------

Java9_v2Parser::ClassTypeContext* Java9_v2Parser::ExceptionType1Context::classType() {
  return getRuleContext<Java9_v2Parser::ClassTypeContext>(0);
}

Java9_v2Parser::ExceptionType1Context::ExceptionType1Context(ExceptionTypeContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ExceptionType1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExceptionType1(this);
}
void Java9_v2Parser::ExceptionType1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExceptionType1(this);
}

antlrcpp::Any Java9_v2Parser::ExceptionType1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitExceptionType1(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::ExceptionTypeContext* Java9_v2Parser::exceptionType() {
  ExceptionTypeContext *_localctx = _tracker.createInstance<ExceptionTypeContext>(_ctx, getState());
  enterRule(_localctx, 176, Java9_v2Parser::RuleExceptionType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1235);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 107, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<ExceptionTypeContext *>(_tracker.createInstance<Java9_v2Parser::ExceptionType1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(1233);
      classType();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<ExceptionTypeContext *>(_tracker.createInstance<Java9_v2Parser::ExceptionType2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(1234);
      typeVariable();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodBodyContext ------------------------------------------------------------------

Java9_v2Parser::MethodBodyContext::MethodBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::BlockContext* Java9_v2Parser::MethodBodyContext::block() {
  return getRuleContext<Java9_v2Parser::BlockContext>(0);
}

tree::TerminalNode* Java9_v2Parser::MethodBodyContext::SEMI() {
  return getToken(Java9_v2Parser::SEMI, 0);
}


size_t Java9_v2Parser::MethodBodyContext::getRuleIndex() const {
  return Java9_v2Parser::RuleMethodBody;
}

void Java9_v2Parser::MethodBodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodBody(this);
}

void Java9_v2Parser::MethodBodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodBody(this);
}


antlrcpp::Any Java9_v2Parser::MethodBodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitMethodBody(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::MethodBodyContext* Java9_v2Parser::methodBody() {
  MethodBodyContext *_localctx = _tracker.createInstance<MethodBodyContext>(_ctx, getState());
  enterRule(_localctx, 178, Java9_v2Parser::RuleMethodBody);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1239);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Java9_v2Parser::LBRACE: {
        enterOuterAlt(_localctx, 1);
        setState(1237);
        block();
        break;
      }

      case Java9_v2Parser::SEMI: {
        enterOuterAlt(_localctx, 2);
        setState(1238);
        match(Java9_v2Parser::SEMI);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InstanceInitializerContext ------------------------------------------------------------------

Java9_v2Parser::InstanceInitializerContext::InstanceInitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::BlockContext* Java9_v2Parser::InstanceInitializerContext::block() {
  return getRuleContext<Java9_v2Parser::BlockContext>(0);
}


size_t Java9_v2Parser::InstanceInitializerContext::getRuleIndex() const {
  return Java9_v2Parser::RuleInstanceInitializer;
}

void Java9_v2Parser::InstanceInitializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInstanceInitializer(this);
}

void Java9_v2Parser::InstanceInitializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInstanceInitializer(this);
}


antlrcpp::Any Java9_v2Parser::InstanceInitializerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitInstanceInitializer(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::InstanceInitializerContext* Java9_v2Parser::instanceInitializer() {
  InstanceInitializerContext *_localctx = _tracker.createInstance<InstanceInitializerContext>(_ctx, getState());
  enterRule(_localctx, 180, Java9_v2Parser::RuleInstanceInitializer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1241);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StaticInitializerContext ------------------------------------------------------------------

Java9_v2Parser::StaticInitializerContext::StaticInitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::StaticInitializerContext::STATIC() {
  return getToken(Java9_v2Parser::STATIC, 0);
}

Java9_v2Parser::BlockContext* Java9_v2Parser::StaticInitializerContext::block() {
  return getRuleContext<Java9_v2Parser::BlockContext>(0);
}


size_t Java9_v2Parser::StaticInitializerContext::getRuleIndex() const {
  return Java9_v2Parser::RuleStaticInitializer;
}

void Java9_v2Parser::StaticInitializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStaticInitializer(this);
}

void Java9_v2Parser::StaticInitializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStaticInitializer(this);
}


antlrcpp::Any Java9_v2Parser::StaticInitializerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitStaticInitializer(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::StaticInitializerContext* Java9_v2Parser::staticInitializer() {
  StaticInitializerContext *_localctx = _tracker.createInstance<StaticInitializerContext>(_ctx, getState());
  enterRule(_localctx, 182, Java9_v2Parser::RuleStaticInitializer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1243);
    match(Java9_v2Parser::STATIC);
    setState(1244);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstructorDeclarationContext ------------------------------------------------------------------

Java9_v2Parser::ConstructorDeclarationContext::ConstructorDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::ConstructorDeclaratorContext* Java9_v2Parser::ConstructorDeclarationContext::constructorDeclarator() {
  return getRuleContext<Java9_v2Parser::ConstructorDeclaratorContext>(0);
}

Java9_v2Parser::ConstructorBodyContext* Java9_v2Parser::ConstructorDeclarationContext::constructorBody() {
  return getRuleContext<Java9_v2Parser::ConstructorBodyContext>(0);
}

std::vector<Java9_v2Parser::ConstructorModifierContext *> Java9_v2Parser::ConstructorDeclarationContext::constructorModifier() {
  return getRuleContexts<Java9_v2Parser::ConstructorModifierContext>();
}

Java9_v2Parser::ConstructorModifierContext* Java9_v2Parser::ConstructorDeclarationContext::constructorModifier(size_t i) {
  return getRuleContext<Java9_v2Parser::ConstructorModifierContext>(i);
}

Java9_v2Parser::Throws_Context* Java9_v2Parser::ConstructorDeclarationContext::throws_() {
  return getRuleContext<Java9_v2Parser::Throws_Context>(0);
}


size_t Java9_v2Parser::ConstructorDeclarationContext::getRuleIndex() const {
  return Java9_v2Parser::RuleConstructorDeclaration;
}

void Java9_v2Parser::ConstructorDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstructorDeclaration(this);
}

void Java9_v2Parser::ConstructorDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstructorDeclaration(this);
}


antlrcpp::Any Java9_v2Parser::ConstructorDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitConstructorDeclaration(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::ConstructorDeclarationContext* Java9_v2Parser::constructorDeclaration() {
  ConstructorDeclarationContext *_localctx = _tracker.createInstance<ConstructorDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 184, Java9_v2Parser::RuleConstructorDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1249);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 43) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 43)) & ((1ULL << (Java9_v2Parser::PRIVATE - 43))
      | (1ULL << (Java9_v2Parser::PROTECTED - 43))
      | (1ULL << (Java9_v2Parser::PUBLIC - 43))
      | (1ULL << (Java9_v2Parser::AT - 43)))) != 0)) {
      setState(1246);
      constructorModifier();
      setState(1251);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1252);
    constructorDeclarator();
    setState(1254);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java9_v2Parser::THROWS) {
      setState(1253);
      throws_();
    }
    setState(1256);
    constructorBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstructorModifierContext ------------------------------------------------------------------

Java9_v2Parser::ConstructorModifierContext::ConstructorModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::AnnotationContext* Java9_v2Parser::ConstructorModifierContext::annotation() {
  return getRuleContext<Java9_v2Parser::AnnotationContext>(0);
}

tree::TerminalNode* Java9_v2Parser::ConstructorModifierContext::PUBLIC() {
  return getToken(Java9_v2Parser::PUBLIC, 0);
}

tree::TerminalNode* Java9_v2Parser::ConstructorModifierContext::PROTECTED() {
  return getToken(Java9_v2Parser::PROTECTED, 0);
}

tree::TerminalNode* Java9_v2Parser::ConstructorModifierContext::PRIVATE() {
  return getToken(Java9_v2Parser::PRIVATE, 0);
}


size_t Java9_v2Parser::ConstructorModifierContext::getRuleIndex() const {
  return Java9_v2Parser::RuleConstructorModifier;
}

void Java9_v2Parser::ConstructorModifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstructorModifier(this);
}

void Java9_v2Parser::ConstructorModifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstructorModifier(this);
}


antlrcpp::Any Java9_v2Parser::ConstructorModifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitConstructorModifier(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::ConstructorModifierContext* Java9_v2Parser::constructorModifier() {
  ConstructorModifierContext *_localctx = _tracker.createInstance<ConstructorModifierContext>(_ctx, getState());
  enterRule(_localctx, 186, Java9_v2Parser::RuleConstructorModifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1262);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Java9_v2Parser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(1258);
        annotation();
        break;
      }

      case Java9_v2Parser::PUBLIC: {
        enterOuterAlt(_localctx, 2);
        setState(1259);
        match(Java9_v2Parser::PUBLIC);
        break;
      }

      case Java9_v2Parser::PROTECTED: {
        enterOuterAlt(_localctx, 3);
        setState(1260);
        match(Java9_v2Parser::PROTECTED);
        break;
      }

      case Java9_v2Parser::PRIVATE: {
        enterOuterAlt(_localctx, 4);
        setState(1261);
        match(Java9_v2Parser::PRIVATE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstructorDeclaratorContext ------------------------------------------------------------------

Java9_v2Parser::ConstructorDeclaratorContext::ConstructorDeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::SimpleTypeNameContext* Java9_v2Parser::ConstructorDeclaratorContext::simpleTypeName() {
  return getRuleContext<Java9_v2Parser::SimpleTypeNameContext>(0);
}

tree::TerminalNode* Java9_v2Parser::ConstructorDeclaratorContext::LPAREN() {
  return getToken(Java9_v2Parser::LPAREN, 0);
}

tree::TerminalNode* Java9_v2Parser::ConstructorDeclaratorContext::RPAREN() {
  return getToken(Java9_v2Parser::RPAREN, 0);
}

Java9_v2Parser::TypeParametersContext* Java9_v2Parser::ConstructorDeclaratorContext::typeParameters() {
  return getRuleContext<Java9_v2Parser::TypeParametersContext>(0);
}

Java9_v2Parser::FormalParameterListContext* Java9_v2Parser::ConstructorDeclaratorContext::formalParameterList() {
  return getRuleContext<Java9_v2Parser::FormalParameterListContext>(0);
}


size_t Java9_v2Parser::ConstructorDeclaratorContext::getRuleIndex() const {
  return Java9_v2Parser::RuleConstructorDeclarator;
}

void Java9_v2Parser::ConstructorDeclaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstructorDeclarator(this);
}

void Java9_v2Parser::ConstructorDeclaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstructorDeclarator(this);
}


antlrcpp::Any Java9_v2Parser::ConstructorDeclaratorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitConstructorDeclarator(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::ConstructorDeclaratorContext* Java9_v2Parser::constructorDeclarator() {
  ConstructorDeclaratorContext *_localctx = _tracker.createInstance<ConstructorDeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 188, Java9_v2Parser::RuleConstructorDeclarator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1265);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java9_v2Parser::LT) {
      setState(1264);
      typeParameters();
    }
    setState(1267);
    simpleTypeName();
    setState(1268);
    match(Java9_v2Parser::LPAREN);
    setState(1270);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << Java9_v2Parser::T__0)
      | (1ULL << Java9_v2Parser::T__1)
      | (1ULL << Java9_v2Parser::T__2)
      | (1ULL << Java9_v2Parser::T__3)
      | (1ULL << Java9_v2Parser::T__4)
      | (1ULL << Java9_v2Parser::T__5)
      | (1ULL << Java9_v2Parser::T__6)
      | (1ULL << Java9_v2Parser::T__7)
      | (1ULL << Java9_v2Parser::T__8)
      | (1ULL << Java9_v2Parser::BOOLEAN)
      | (1ULL << Java9_v2Parser::BYTE)
      | (1ULL << Java9_v2Parser::CHAR)
      | (1ULL << Java9_v2Parser::DOUBLE)
      | (1ULL << Java9_v2Parser::FINAL)
      | (1ULL << Java9_v2Parser::FLOAT)
      | (1ULL << Java9_v2Parser::INT)
      | (1ULL << Java9_v2Parser::LONG)
      | (1ULL << Java9_v2Parser::SHORT))) != 0) || _la == Java9_v2Parser::AT

    || _la == Java9_v2Parser::Identifier) {
      setState(1269);
      formalParameterList();
    }
    setState(1272);
    match(Java9_v2Parser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleTypeNameContext ------------------------------------------------------------------

Java9_v2Parser::SimpleTypeNameContext::SimpleTypeNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::SimpleTypeNameContext::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}


size_t Java9_v2Parser::SimpleTypeNameContext::getRuleIndex() const {
  return Java9_v2Parser::RuleSimpleTypeName;
}

void Java9_v2Parser::SimpleTypeNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimpleTypeName(this);
}

void Java9_v2Parser::SimpleTypeNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimpleTypeName(this);
}


antlrcpp::Any Java9_v2Parser::SimpleTypeNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitSimpleTypeName(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::SimpleTypeNameContext* Java9_v2Parser::simpleTypeName() {
  SimpleTypeNameContext *_localctx = _tracker.createInstance<SimpleTypeNameContext>(_ctx, getState());
  enterRule(_localctx, 190, Java9_v2Parser::RuleSimpleTypeName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1274);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstructorBodyContext ------------------------------------------------------------------

Java9_v2Parser::ConstructorBodyContext::ConstructorBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::ConstructorBodyContext::LBRACE() {
  return getToken(Java9_v2Parser::LBRACE, 0);
}

tree::TerminalNode* Java9_v2Parser::ConstructorBodyContext::RBRACE() {
  return getToken(Java9_v2Parser::RBRACE, 0);
}

Java9_v2Parser::ExplicitConstructorInvocationContext* Java9_v2Parser::ConstructorBodyContext::explicitConstructorInvocation() {
  return getRuleContext<Java9_v2Parser::ExplicitConstructorInvocationContext>(0);
}

Java9_v2Parser::BlockStatementsContext* Java9_v2Parser::ConstructorBodyContext::blockStatements() {
  return getRuleContext<Java9_v2Parser::BlockStatementsContext>(0);
}


size_t Java9_v2Parser::ConstructorBodyContext::getRuleIndex() const {
  return Java9_v2Parser::RuleConstructorBody;
}

void Java9_v2Parser::ConstructorBodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstructorBody(this);
}

void Java9_v2Parser::ConstructorBodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstructorBody(this);
}


antlrcpp::Any Java9_v2Parser::ConstructorBodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitConstructorBody(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::ConstructorBodyContext* Java9_v2Parser::constructorBody() {
  ConstructorBodyContext *_localctx = _tracker.createInstance<ConstructorBodyContext>(_ctx, getState());
  enterRule(_localctx, 192, Java9_v2Parser::RuleConstructorBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1276);
    match(Java9_v2Parser::LBRACE);
    setState(1278);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 114, _ctx)) {
    case 1: {
      setState(1277);
      explicitConstructorInvocation();
      break;
    }

    default:
      break;
    }
    setState(1281);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << Java9_v2Parser::T__0)
      | (1ULL << Java9_v2Parser::T__1)
      | (1ULL << Java9_v2Parser::T__2)
      | (1ULL << Java9_v2Parser::T__3)
      | (1ULL << Java9_v2Parser::T__4)
      | (1ULL << Java9_v2Parser::T__5)
      | (1ULL << Java9_v2Parser::T__6)
      | (1ULL << Java9_v2Parser::T__7)
      | (1ULL << Java9_v2Parser::T__8)
      | (1ULL << Java9_v2Parser::ABSTRACT)
      | (1ULL << Java9_v2Parser::ASSERT)
      | (1ULL << Java9_v2Parser::BOOLEAN)
      | (1ULL << Java9_v2Parser::BREAK)
      | (1ULL << Java9_v2Parser::BYTE)
      | (1ULL << Java9_v2Parser::CHAR)
      | (1ULL << Java9_v2Parser::CLASS)
      | (1ULL << Java9_v2Parser::CONTINUE)
      | (1ULL << Java9_v2Parser::DO)
      | (1ULL << Java9_v2Parser::DOUBLE)
      | (1ULL << Java9_v2Parser::ENUM)
      | (1ULL << Java9_v2Parser::FINAL)
      | (1ULL << Java9_v2Parser::FLOAT)
      | (1ULL << Java9_v2Parser::FOR)
      | (1ULL << Java9_v2Parser::IF)
      | (1ULL << Java9_v2Parser::INT)
      | (1ULL << Java9_v2Parser::LONG)
      | (1ULL << Java9_v2Parser::NEW)
      | (1ULL << Java9_v2Parser::PRIVATE)
      | (1ULL << Java9_v2Parser::PROTECTED)
      | (1ULL << Java9_v2Parser::PUBLIC)
      | (1ULL << Java9_v2Parser::RETURN)
      | (1ULL << Java9_v2Parser::SHORT)
      | (1ULL << Java9_v2Parser::STATIC)
      | (1ULL << Java9_v2Parser::STRICTFP)
      | (1ULL << Java9_v2Parser::SUPER)
      | (1ULL << Java9_v2Parser::SWITCH)
      | (1ULL << Java9_v2Parser::SYNCHRONIZED)
      | (1ULL << Java9_v2Parser::THIS)
      | (1ULL << Java9_v2Parser::THROW)
      | (1ULL << Java9_v2Parser::TRY)
      | (1ULL << Java9_v2Parser::VOID)
      | (1ULL << Java9_v2Parser::WHILE)
      | (1ULL << Java9_v2Parser::IntegerLiteral)
      | (1ULL << Java9_v2Parser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (Java9_v2Parser::BooleanLiteral - 64))
      | (1ULL << (Java9_v2Parser::CharacterLiteral - 64))
      | (1ULL << (Java9_v2Parser::StringLiteral - 64))
      | (1ULL << (Java9_v2Parser::NullLiteral - 64))
      | (1ULL << (Java9_v2Parser::LPAREN - 64))
      | (1ULL << (Java9_v2Parser::LBRACE - 64))
      | (1ULL << (Java9_v2Parser::SEMI - 64))
      | (1ULL << (Java9_v2Parser::AT - 64))
      | (1ULL << (Java9_v2Parser::INC - 64))
      | (1ULL << (Java9_v2Parser::DEC - 64))
      | (1ULL << (Java9_v2Parser::Identifier - 64)))) != 0)) {
      setState(1280);
      blockStatements();
    }
    setState(1283);
    match(Java9_v2Parser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExplicitConstructorInvocationContext ------------------------------------------------------------------

Java9_v2Parser::ExplicitConstructorInvocationContext::ExplicitConstructorInvocationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::ExplicitConstructorInvocationContext::getRuleIndex() const {
  return Java9_v2Parser::RuleExplicitConstructorInvocation;
}

void Java9_v2Parser::ExplicitConstructorInvocationContext::copyFrom(ExplicitConstructorInvocationContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ExplicitConstructorInvocation1Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::ExplicitConstructorInvocation1Context::THIS() {
  return getToken(Java9_v2Parser::THIS, 0);
}

tree::TerminalNode* Java9_v2Parser::ExplicitConstructorInvocation1Context::LPAREN() {
  return getToken(Java9_v2Parser::LPAREN, 0);
}

tree::TerminalNode* Java9_v2Parser::ExplicitConstructorInvocation1Context::RPAREN() {
  return getToken(Java9_v2Parser::RPAREN, 0);
}

tree::TerminalNode* Java9_v2Parser::ExplicitConstructorInvocation1Context::SEMI() {
  return getToken(Java9_v2Parser::SEMI, 0);
}

Java9_v2Parser::TypeArgumentsContext* Java9_v2Parser::ExplicitConstructorInvocation1Context::typeArguments() {
  return getRuleContext<Java9_v2Parser::TypeArgumentsContext>(0);
}

Java9_v2Parser::ArgumentListContext* Java9_v2Parser::ExplicitConstructorInvocation1Context::argumentList() {
  return getRuleContext<Java9_v2Parser::ArgumentListContext>(0);
}

Java9_v2Parser::ExplicitConstructorInvocation1Context::ExplicitConstructorInvocation1Context(ExplicitConstructorInvocationContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ExplicitConstructorInvocation1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExplicitConstructorInvocation1(this);
}
void Java9_v2Parser::ExplicitConstructorInvocation1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExplicitConstructorInvocation1(this);
}

antlrcpp::Any Java9_v2Parser::ExplicitConstructorInvocation1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitExplicitConstructorInvocation1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ExplicitConstructorInvocation4Context ------------------------------------------------------------------

Java9_v2Parser::PrimaryContext* Java9_v2Parser::ExplicitConstructorInvocation4Context::primary() {
  return getRuleContext<Java9_v2Parser::PrimaryContext>(0);
}

tree::TerminalNode* Java9_v2Parser::ExplicitConstructorInvocation4Context::DOT() {
  return getToken(Java9_v2Parser::DOT, 0);
}

tree::TerminalNode* Java9_v2Parser::ExplicitConstructorInvocation4Context::SUPER() {
  return getToken(Java9_v2Parser::SUPER, 0);
}

tree::TerminalNode* Java9_v2Parser::ExplicitConstructorInvocation4Context::LPAREN() {
  return getToken(Java9_v2Parser::LPAREN, 0);
}

tree::TerminalNode* Java9_v2Parser::ExplicitConstructorInvocation4Context::RPAREN() {
  return getToken(Java9_v2Parser::RPAREN, 0);
}

tree::TerminalNode* Java9_v2Parser::ExplicitConstructorInvocation4Context::SEMI() {
  return getToken(Java9_v2Parser::SEMI, 0);
}

Java9_v2Parser::TypeArgumentsContext* Java9_v2Parser::ExplicitConstructorInvocation4Context::typeArguments() {
  return getRuleContext<Java9_v2Parser::TypeArgumentsContext>(0);
}

Java9_v2Parser::ArgumentListContext* Java9_v2Parser::ExplicitConstructorInvocation4Context::argumentList() {
  return getRuleContext<Java9_v2Parser::ArgumentListContext>(0);
}

Java9_v2Parser::ExplicitConstructorInvocation4Context::ExplicitConstructorInvocation4Context(ExplicitConstructorInvocationContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ExplicitConstructorInvocation4Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExplicitConstructorInvocation4(this);
}
void Java9_v2Parser::ExplicitConstructorInvocation4Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExplicitConstructorInvocation4(this);
}

antlrcpp::Any Java9_v2Parser::ExplicitConstructorInvocation4Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitExplicitConstructorInvocation4(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ExplicitConstructorInvocation2Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::ExplicitConstructorInvocation2Context::SUPER() {
  return getToken(Java9_v2Parser::SUPER, 0);
}

tree::TerminalNode* Java9_v2Parser::ExplicitConstructorInvocation2Context::LPAREN() {
  return getToken(Java9_v2Parser::LPAREN, 0);
}

tree::TerminalNode* Java9_v2Parser::ExplicitConstructorInvocation2Context::RPAREN() {
  return getToken(Java9_v2Parser::RPAREN, 0);
}

tree::TerminalNode* Java9_v2Parser::ExplicitConstructorInvocation2Context::SEMI() {
  return getToken(Java9_v2Parser::SEMI, 0);
}

Java9_v2Parser::TypeArgumentsContext* Java9_v2Parser::ExplicitConstructorInvocation2Context::typeArguments() {
  return getRuleContext<Java9_v2Parser::TypeArgumentsContext>(0);
}

Java9_v2Parser::ArgumentListContext* Java9_v2Parser::ExplicitConstructorInvocation2Context::argumentList() {
  return getRuleContext<Java9_v2Parser::ArgumentListContext>(0);
}

Java9_v2Parser::ExplicitConstructorInvocation2Context::ExplicitConstructorInvocation2Context(ExplicitConstructorInvocationContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ExplicitConstructorInvocation2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExplicitConstructorInvocation2(this);
}
void Java9_v2Parser::ExplicitConstructorInvocation2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExplicitConstructorInvocation2(this);
}

antlrcpp::Any Java9_v2Parser::ExplicitConstructorInvocation2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitExplicitConstructorInvocation2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ExplicitConstructorInvocation3Context ------------------------------------------------------------------

Java9_v2Parser::ExpressionNameContext* Java9_v2Parser::ExplicitConstructorInvocation3Context::expressionName() {
  return getRuleContext<Java9_v2Parser::ExpressionNameContext>(0);
}

tree::TerminalNode* Java9_v2Parser::ExplicitConstructorInvocation3Context::DOT() {
  return getToken(Java9_v2Parser::DOT, 0);
}

tree::TerminalNode* Java9_v2Parser::ExplicitConstructorInvocation3Context::SUPER() {
  return getToken(Java9_v2Parser::SUPER, 0);
}

tree::TerminalNode* Java9_v2Parser::ExplicitConstructorInvocation3Context::LPAREN() {
  return getToken(Java9_v2Parser::LPAREN, 0);
}

tree::TerminalNode* Java9_v2Parser::ExplicitConstructorInvocation3Context::RPAREN() {
  return getToken(Java9_v2Parser::RPAREN, 0);
}

tree::TerminalNode* Java9_v2Parser::ExplicitConstructorInvocation3Context::SEMI() {
  return getToken(Java9_v2Parser::SEMI, 0);
}

Java9_v2Parser::TypeArgumentsContext* Java9_v2Parser::ExplicitConstructorInvocation3Context::typeArguments() {
  return getRuleContext<Java9_v2Parser::TypeArgumentsContext>(0);
}

Java9_v2Parser::ArgumentListContext* Java9_v2Parser::ExplicitConstructorInvocation3Context::argumentList() {
  return getRuleContext<Java9_v2Parser::ArgumentListContext>(0);
}

Java9_v2Parser::ExplicitConstructorInvocation3Context::ExplicitConstructorInvocation3Context(ExplicitConstructorInvocationContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ExplicitConstructorInvocation3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExplicitConstructorInvocation3(this);
}
void Java9_v2Parser::ExplicitConstructorInvocation3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExplicitConstructorInvocation3(this);
}

antlrcpp::Any Java9_v2Parser::ExplicitConstructorInvocation3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitExplicitConstructorInvocation3(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::ExplicitConstructorInvocationContext* Java9_v2Parser::explicitConstructorInvocation() {
  ExplicitConstructorInvocationContext *_localctx = _tracker.createInstance<ExplicitConstructorInvocationContext>(_ctx, getState());
  enterRule(_localctx, 194, Java9_v2Parser::RuleExplicitConstructorInvocation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1331);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 124, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<ExplicitConstructorInvocationContext *>(_tracker.createInstance<Java9_v2Parser::ExplicitConstructorInvocation1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(1286);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java9_v2Parser::LT) {
        setState(1285);
        typeArguments();
      }
      setState(1288);
      match(Java9_v2Parser::THIS);
      setState(1289);
      match(Java9_v2Parser::LPAREN);
      setState(1291);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << Java9_v2Parser::T__0)
        | (1ULL << Java9_v2Parser::T__1)
        | (1ULL << Java9_v2Parser::T__2)
        | (1ULL << Java9_v2Parser::T__3)
        | (1ULL << Java9_v2Parser::T__4)
        | (1ULL << Java9_v2Parser::T__5)
        | (1ULL << Java9_v2Parser::T__6)
        | (1ULL << Java9_v2Parser::T__7)
        | (1ULL << Java9_v2Parser::T__8)
        | (1ULL << Java9_v2Parser::BOOLEAN)
        | (1ULL << Java9_v2Parser::BYTE)
        | (1ULL << Java9_v2Parser::CHAR)
        | (1ULL << Java9_v2Parser::DOUBLE)
        | (1ULL << Java9_v2Parser::FLOAT)
        | (1ULL << Java9_v2Parser::INT)
        | (1ULL << Java9_v2Parser::LONG)
        | (1ULL << Java9_v2Parser::NEW)
        | (1ULL << Java9_v2Parser::SHORT)
        | (1ULL << Java9_v2Parser::SUPER)
        | (1ULL << Java9_v2Parser::THIS)
        | (1ULL << Java9_v2Parser::VOID)
        | (1ULL << Java9_v2Parser::IntegerLiteral)
        | (1ULL << Java9_v2Parser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (Java9_v2Parser::BooleanLiteral - 64))
        | (1ULL << (Java9_v2Parser::CharacterLiteral - 64))
        | (1ULL << (Java9_v2Parser::StringLiteral - 64))
        | (1ULL << (Java9_v2Parser::NullLiteral - 64))
        | (1ULL << (Java9_v2Parser::LPAREN - 64))
        | (1ULL << (Java9_v2Parser::AT - 64))
        | (1ULL << (Java9_v2Parser::BANG - 64))
        | (1ULL << (Java9_v2Parser::TILDE - 64))
        | (1ULL << (Java9_v2Parser::INC - 64))
        | (1ULL << (Java9_v2Parser::DEC - 64))
        | (1ULL << (Java9_v2Parser::ADD - 64))
        | (1ULL << (Java9_v2Parser::SUB - 64))
        | (1ULL << (Java9_v2Parser::Identifier - 64)))) != 0)) {
        setState(1290);
        argumentList();
      }
      setState(1293);
      match(Java9_v2Parser::RPAREN);
      setState(1294);
      match(Java9_v2Parser::SEMI);
      break;
    }

    case 2: {
      _localctx = dynamic_cast<ExplicitConstructorInvocationContext *>(_tracker.createInstance<Java9_v2Parser::ExplicitConstructorInvocation2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(1296);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java9_v2Parser::LT) {
        setState(1295);
        typeArguments();
      }
      setState(1298);
      match(Java9_v2Parser::SUPER);
      setState(1299);
      match(Java9_v2Parser::LPAREN);
      setState(1301);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << Java9_v2Parser::T__0)
        | (1ULL << Java9_v2Parser::T__1)
        | (1ULL << Java9_v2Parser::T__2)
        | (1ULL << Java9_v2Parser::T__3)
        | (1ULL << Java9_v2Parser::T__4)
        | (1ULL << Java9_v2Parser::T__5)
        | (1ULL << Java9_v2Parser::T__6)
        | (1ULL << Java9_v2Parser::T__7)
        | (1ULL << Java9_v2Parser::T__8)
        | (1ULL << Java9_v2Parser::BOOLEAN)
        | (1ULL << Java9_v2Parser::BYTE)
        | (1ULL << Java9_v2Parser::CHAR)
        | (1ULL << Java9_v2Parser::DOUBLE)
        | (1ULL << Java9_v2Parser::FLOAT)
        | (1ULL << Java9_v2Parser::INT)
        | (1ULL << Java9_v2Parser::LONG)
        | (1ULL << Java9_v2Parser::NEW)
        | (1ULL << Java9_v2Parser::SHORT)
        | (1ULL << Java9_v2Parser::SUPER)
        | (1ULL << Java9_v2Parser::THIS)
        | (1ULL << Java9_v2Parser::VOID)
        | (1ULL << Java9_v2Parser::IntegerLiteral)
        | (1ULL << Java9_v2Parser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (Java9_v2Parser::BooleanLiteral - 64))
        | (1ULL << (Java9_v2Parser::CharacterLiteral - 64))
        | (1ULL << (Java9_v2Parser::StringLiteral - 64))
        | (1ULL << (Java9_v2Parser::NullLiteral - 64))
        | (1ULL << (Java9_v2Parser::LPAREN - 64))
        | (1ULL << (Java9_v2Parser::AT - 64))
        | (1ULL << (Java9_v2Parser::BANG - 64))
        | (1ULL << (Java9_v2Parser::TILDE - 64))
        | (1ULL << (Java9_v2Parser::INC - 64))
        | (1ULL << (Java9_v2Parser::DEC - 64))
        | (1ULL << (Java9_v2Parser::ADD - 64))
        | (1ULL << (Java9_v2Parser::SUB - 64))
        | (1ULL << (Java9_v2Parser::Identifier - 64)))) != 0)) {
        setState(1300);
        argumentList();
      }
      setState(1303);
      match(Java9_v2Parser::RPAREN);
      setState(1304);
      match(Java9_v2Parser::SEMI);
      break;
    }

    case 3: {
      _localctx = dynamic_cast<ExplicitConstructorInvocationContext *>(_tracker.createInstance<Java9_v2Parser::ExplicitConstructorInvocation3Context>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(1305);
      expressionName();
      setState(1306);
      match(Java9_v2Parser::DOT);
      setState(1308);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java9_v2Parser::LT) {
        setState(1307);
        typeArguments();
      }
      setState(1310);
      match(Java9_v2Parser::SUPER);
      setState(1311);
      match(Java9_v2Parser::LPAREN);
      setState(1313);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << Java9_v2Parser::T__0)
        | (1ULL << Java9_v2Parser::T__1)
        | (1ULL << Java9_v2Parser::T__2)
        | (1ULL << Java9_v2Parser::T__3)
        | (1ULL << Java9_v2Parser::T__4)
        | (1ULL << Java9_v2Parser::T__5)
        | (1ULL << Java9_v2Parser::T__6)
        | (1ULL << Java9_v2Parser::T__7)
        | (1ULL << Java9_v2Parser::T__8)
        | (1ULL << Java9_v2Parser::BOOLEAN)
        | (1ULL << Java9_v2Parser::BYTE)
        | (1ULL << Java9_v2Parser::CHAR)
        | (1ULL << Java9_v2Parser::DOUBLE)
        | (1ULL << Java9_v2Parser::FLOAT)
        | (1ULL << Java9_v2Parser::INT)
        | (1ULL << Java9_v2Parser::LONG)
        | (1ULL << Java9_v2Parser::NEW)
        | (1ULL << Java9_v2Parser::SHORT)
        | (1ULL << Java9_v2Parser::SUPER)
        | (1ULL << Java9_v2Parser::THIS)
        | (1ULL << Java9_v2Parser::VOID)
        | (1ULL << Java9_v2Parser::IntegerLiteral)
        | (1ULL << Java9_v2Parser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (Java9_v2Parser::BooleanLiteral - 64))
        | (1ULL << (Java9_v2Parser::CharacterLiteral - 64))
        | (1ULL << (Java9_v2Parser::StringLiteral - 64))
        | (1ULL << (Java9_v2Parser::NullLiteral - 64))
        | (1ULL << (Java9_v2Parser::LPAREN - 64))
        | (1ULL << (Java9_v2Parser::AT - 64))
        | (1ULL << (Java9_v2Parser::BANG - 64))
        | (1ULL << (Java9_v2Parser::TILDE - 64))
        | (1ULL << (Java9_v2Parser::INC - 64))
        | (1ULL << (Java9_v2Parser::DEC - 64))
        | (1ULL << (Java9_v2Parser::ADD - 64))
        | (1ULL << (Java9_v2Parser::SUB - 64))
        | (1ULL << (Java9_v2Parser::Identifier - 64)))) != 0)) {
        setState(1312);
        argumentList();
      }
      setState(1315);
      match(Java9_v2Parser::RPAREN);
      setState(1316);
      match(Java9_v2Parser::SEMI);
      break;
    }

    case 4: {
      _localctx = dynamic_cast<ExplicitConstructorInvocationContext *>(_tracker.createInstance<Java9_v2Parser::ExplicitConstructorInvocation4Context>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(1318);
      primary();
      setState(1319);
      match(Java9_v2Parser::DOT);
      setState(1321);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java9_v2Parser::LT) {
        setState(1320);
        typeArguments();
      }
      setState(1323);
      match(Java9_v2Parser::SUPER);
      setState(1324);
      match(Java9_v2Parser::LPAREN);
      setState(1326);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << Java9_v2Parser::T__0)
        | (1ULL << Java9_v2Parser::T__1)
        | (1ULL << Java9_v2Parser::T__2)
        | (1ULL << Java9_v2Parser::T__3)
        | (1ULL << Java9_v2Parser::T__4)
        | (1ULL << Java9_v2Parser::T__5)
        | (1ULL << Java9_v2Parser::T__6)
        | (1ULL << Java9_v2Parser::T__7)
        | (1ULL << Java9_v2Parser::T__8)
        | (1ULL << Java9_v2Parser::BOOLEAN)
        | (1ULL << Java9_v2Parser::BYTE)
        | (1ULL << Java9_v2Parser::CHAR)
        | (1ULL << Java9_v2Parser::DOUBLE)
        | (1ULL << Java9_v2Parser::FLOAT)
        | (1ULL << Java9_v2Parser::INT)
        | (1ULL << Java9_v2Parser::LONG)
        | (1ULL << Java9_v2Parser::NEW)
        | (1ULL << Java9_v2Parser::SHORT)
        | (1ULL << Java9_v2Parser::SUPER)
        | (1ULL << Java9_v2Parser::THIS)
        | (1ULL << Java9_v2Parser::VOID)
        | (1ULL << Java9_v2Parser::IntegerLiteral)
        | (1ULL << Java9_v2Parser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (Java9_v2Parser::BooleanLiteral - 64))
        | (1ULL << (Java9_v2Parser::CharacterLiteral - 64))
        | (1ULL << (Java9_v2Parser::StringLiteral - 64))
        | (1ULL << (Java9_v2Parser::NullLiteral - 64))
        | (1ULL << (Java9_v2Parser::LPAREN - 64))
        | (1ULL << (Java9_v2Parser::AT - 64))
        | (1ULL << (Java9_v2Parser::BANG - 64))
        | (1ULL << (Java9_v2Parser::TILDE - 64))
        | (1ULL << (Java9_v2Parser::INC - 64))
        | (1ULL << (Java9_v2Parser::DEC - 64))
        | (1ULL << (Java9_v2Parser::ADD - 64))
        | (1ULL << (Java9_v2Parser::SUB - 64))
        | (1ULL << (Java9_v2Parser::Identifier - 64)))) != 0)) {
        setState(1325);
        argumentList();
      }
      setState(1328);
      match(Java9_v2Parser::RPAREN);
      setState(1329);
      match(Java9_v2Parser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumDeclarationContext ------------------------------------------------------------------

Java9_v2Parser::EnumDeclarationContext::EnumDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::EnumDeclarationContext::ENUM() {
  return getToken(Java9_v2Parser::ENUM, 0);
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::EnumDeclarationContext::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

Java9_v2Parser::EnumBodyContext* Java9_v2Parser::EnumDeclarationContext::enumBody() {
  return getRuleContext<Java9_v2Parser::EnumBodyContext>(0);
}

std::vector<Java9_v2Parser::ClassModifierContext *> Java9_v2Parser::EnumDeclarationContext::classModifier() {
  return getRuleContexts<Java9_v2Parser::ClassModifierContext>();
}

Java9_v2Parser::ClassModifierContext* Java9_v2Parser::EnumDeclarationContext::classModifier(size_t i) {
  return getRuleContext<Java9_v2Parser::ClassModifierContext>(i);
}

Java9_v2Parser::SuperinterfacesContext* Java9_v2Parser::EnumDeclarationContext::superinterfaces() {
  return getRuleContext<Java9_v2Parser::SuperinterfacesContext>(0);
}


size_t Java9_v2Parser::EnumDeclarationContext::getRuleIndex() const {
  return Java9_v2Parser::RuleEnumDeclaration;
}

void Java9_v2Parser::EnumDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumDeclaration(this);
}

void Java9_v2Parser::EnumDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumDeclaration(this);
}


antlrcpp::Any Java9_v2Parser::EnumDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitEnumDeclaration(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::EnumDeclarationContext* Java9_v2Parser::enumDeclaration() {
  EnumDeclarationContext *_localctx = _tracker.createInstance<EnumDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 196, Java9_v2Parser::RuleEnumDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1336);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << Java9_v2Parser::ABSTRACT)
      | (1ULL << Java9_v2Parser::FINAL)
      | (1ULL << Java9_v2Parser::PRIVATE)
      | (1ULL << Java9_v2Parser::PROTECTED)
      | (1ULL << Java9_v2Parser::PUBLIC)
      | (1ULL << Java9_v2Parser::STATIC)
      | (1ULL << Java9_v2Parser::STRICTFP))) != 0) || _la == Java9_v2Parser::AT) {
      setState(1333);
      classModifier();
      setState(1338);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1339);
    match(Java9_v2Parser::ENUM);
    setState(1340);
    identifier();
    setState(1342);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java9_v2Parser::IMPLEMENTS) {
      setState(1341);
      superinterfaces();
    }
    setState(1344);
    enumBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumBodyContext ------------------------------------------------------------------

Java9_v2Parser::EnumBodyContext::EnumBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::EnumBodyContext::LBRACE() {
  return getToken(Java9_v2Parser::LBRACE, 0);
}

tree::TerminalNode* Java9_v2Parser::EnumBodyContext::RBRACE() {
  return getToken(Java9_v2Parser::RBRACE, 0);
}

Java9_v2Parser::EnumConstantListContext* Java9_v2Parser::EnumBodyContext::enumConstantList() {
  return getRuleContext<Java9_v2Parser::EnumConstantListContext>(0);
}

tree::TerminalNode* Java9_v2Parser::EnumBodyContext::COMMA() {
  return getToken(Java9_v2Parser::COMMA, 0);
}

Java9_v2Parser::EnumBodyDeclarationsContext* Java9_v2Parser::EnumBodyContext::enumBodyDeclarations() {
  return getRuleContext<Java9_v2Parser::EnumBodyDeclarationsContext>(0);
}


size_t Java9_v2Parser::EnumBodyContext::getRuleIndex() const {
  return Java9_v2Parser::RuleEnumBody;
}

void Java9_v2Parser::EnumBodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumBody(this);
}

void Java9_v2Parser::EnumBodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumBody(this);
}


antlrcpp::Any Java9_v2Parser::EnumBodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitEnumBody(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::EnumBodyContext* Java9_v2Parser::enumBody() {
  EnumBodyContext *_localctx = _tracker.createInstance<EnumBodyContext>(_ctx, getState());
  enterRule(_localctx, 198, Java9_v2Parser::RuleEnumBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1346);
    match(Java9_v2Parser::LBRACE);
    setState(1348);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << Java9_v2Parser::T__0)
      | (1ULL << Java9_v2Parser::T__1)
      | (1ULL << Java9_v2Parser::T__2)
      | (1ULL << Java9_v2Parser::T__3)
      | (1ULL << Java9_v2Parser::T__4)
      | (1ULL << Java9_v2Parser::T__5)
      | (1ULL << Java9_v2Parser::T__6)
      | (1ULL << Java9_v2Parser::T__7)
      | (1ULL << Java9_v2Parser::T__8))) != 0) || _la == Java9_v2Parser::AT

    || _la == Java9_v2Parser::Identifier) {
      setState(1347);
      enumConstantList();
    }
    setState(1351);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java9_v2Parser::COMMA) {
      setState(1350);
      match(Java9_v2Parser::COMMA);
    }
    setState(1354);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java9_v2Parser::SEMI) {
      setState(1353);
      enumBodyDeclarations();
    }
    setState(1356);
    match(Java9_v2Parser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumConstantListContext ------------------------------------------------------------------

Java9_v2Parser::EnumConstantListContext::EnumConstantListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Java9_v2Parser::EnumConstantContext *> Java9_v2Parser::EnumConstantListContext::enumConstant() {
  return getRuleContexts<Java9_v2Parser::EnumConstantContext>();
}

Java9_v2Parser::EnumConstantContext* Java9_v2Parser::EnumConstantListContext::enumConstant(size_t i) {
  return getRuleContext<Java9_v2Parser::EnumConstantContext>(i);
}

std::vector<tree::TerminalNode *> Java9_v2Parser::EnumConstantListContext::COMMA() {
  return getTokens(Java9_v2Parser::COMMA);
}

tree::TerminalNode* Java9_v2Parser::EnumConstantListContext::COMMA(size_t i) {
  return getToken(Java9_v2Parser::COMMA, i);
}


size_t Java9_v2Parser::EnumConstantListContext::getRuleIndex() const {
  return Java9_v2Parser::RuleEnumConstantList;
}

void Java9_v2Parser::EnumConstantListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumConstantList(this);
}

void Java9_v2Parser::EnumConstantListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumConstantList(this);
}


antlrcpp::Any Java9_v2Parser::EnumConstantListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitEnumConstantList(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::EnumConstantListContext* Java9_v2Parser::enumConstantList() {
  EnumConstantListContext *_localctx = _tracker.createInstance<EnumConstantListContext>(_ctx, getState());
  enterRule(_localctx, 200, Java9_v2Parser::RuleEnumConstantList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1358);
    enumConstant();
    setState(1363);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 130, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1359);
        match(Java9_v2Parser::COMMA);
        setState(1360);
        enumConstant(); 
      }
      setState(1365);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 130, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumConstantContext ------------------------------------------------------------------

Java9_v2Parser::EnumConstantContext::EnumConstantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::EnumConstantContext::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

std::vector<Java9_v2Parser::EnumConstantModifierContext *> Java9_v2Parser::EnumConstantContext::enumConstantModifier() {
  return getRuleContexts<Java9_v2Parser::EnumConstantModifierContext>();
}

Java9_v2Parser::EnumConstantModifierContext* Java9_v2Parser::EnumConstantContext::enumConstantModifier(size_t i) {
  return getRuleContext<Java9_v2Parser::EnumConstantModifierContext>(i);
}

tree::TerminalNode* Java9_v2Parser::EnumConstantContext::LPAREN() {
  return getToken(Java9_v2Parser::LPAREN, 0);
}

tree::TerminalNode* Java9_v2Parser::EnumConstantContext::RPAREN() {
  return getToken(Java9_v2Parser::RPAREN, 0);
}

Java9_v2Parser::ClassBodyContext* Java9_v2Parser::EnumConstantContext::classBody() {
  return getRuleContext<Java9_v2Parser::ClassBodyContext>(0);
}

Java9_v2Parser::ArgumentListContext* Java9_v2Parser::EnumConstantContext::argumentList() {
  return getRuleContext<Java9_v2Parser::ArgumentListContext>(0);
}


size_t Java9_v2Parser::EnumConstantContext::getRuleIndex() const {
  return Java9_v2Parser::RuleEnumConstant;
}

void Java9_v2Parser::EnumConstantContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumConstant(this);
}

void Java9_v2Parser::EnumConstantContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumConstant(this);
}


antlrcpp::Any Java9_v2Parser::EnumConstantContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitEnumConstant(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::EnumConstantContext* Java9_v2Parser::enumConstant() {
  EnumConstantContext *_localctx = _tracker.createInstance<EnumConstantContext>(_ctx, getState());
  enterRule(_localctx, 202, Java9_v2Parser::RuleEnumConstant);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1369);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java9_v2Parser::AT) {
      setState(1366);
      enumConstantModifier();
      setState(1371);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1372);
    identifier();
    setState(1378);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java9_v2Parser::LPAREN) {
      setState(1373);
      match(Java9_v2Parser::LPAREN);
      setState(1375);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << Java9_v2Parser::T__0)
        | (1ULL << Java9_v2Parser::T__1)
        | (1ULL << Java9_v2Parser::T__2)
        | (1ULL << Java9_v2Parser::T__3)
        | (1ULL << Java9_v2Parser::T__4)
        | (1ULL << Java9_v2Parser::T__5)
        | (1ULL << Java9_v2Parser::T__6)
        | (1ULL << Java9_v2Parser::T__7)
        | (1ULL << Java9_v2Parser::T__8)
        | (1ULL << Java9_v2Parser::BOOLEAN)
        | (1ULL << Java9_v2Parser::BYTE)
        | (1ULL << Java9_v2Parser::CHAR)
        | (1ULL << Java9_v2Parser::DOUBLE)
        | (1ULL << Java9_v2Parser::FLOAT)
        | (1ULL << Java9_v2Parser::INT)
        | (1ULL << Java9_v2Parser::LONG)
        | (1ULL << Java9_v2Parser::NEW)
        | (1ULL << Java9_v2Parser::SHORT)
        | (1ULL << Java9_v2Parser::SUPER)
        | (1ULL << Java9_v2Parser::THIS)
        | (1ULL << Java9_v2Parser::VOID)
        | (1ULL << Java9_v2Parser::IntegerLiteral)
        | (1ULL << Java9_v2Parser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (Java9_v2Parser::BooleanLiteral - 64))
        | (1ULL << (Java9_v2Parser::CharacterLiteral - 64))
        | (1ULL << (Java9_v2Parser::StringLiteral - 64))
        | (1ULL << (Java9_v2Parser::NullLiteral - 64))
        | (1ULL << (Java9_v2Parser::LPAREN - 64))
        | (1ULL << (Java9_v2Parser::AT - 64))
        | (1ULL << (Java9_v2Parser::BANG - 64))
        | (1ULL << (Java9_v2Parser::TILDE - 64))
        | (1ULL << (Java9_v2Parser::INC - 64))
        | (1ULL << (Java9_v2Parser::DEC - 64))
        | (1ULL << (Java9_v2Parser::ADD - 64))
        | (1ULL << (Java9_v2Parser::SUB - 64))
        | (1ULL << (Java9_v2Parser::Identifier - 64)))) != 0)) {
        setState(1374);
        argumentList();
      }
      setState(1377);
      match(Java9_v2Parser::RPAREN);
    }
    setState(1381);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java9_v2Parser::LBRACE) {
      setState(1380);
      classBody();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumConstantModifierContext ------------------------------------------------------------------

Java9_v2Parser::EnumConstantModifierContext::EnumConstantModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::AnnotationContext* Java9_v2Parser::EnumConstantModifierContext::annotation() {
  return getRuleContext<Java9_v2Parser::AnnotationContext>(0);
}


size_t Java9_v2Parser::EnumConstantModifierContext::getRuleIndex() const {
  return Java9_v2Parser::RuleEnumConstantModifier;
}

void Java9_v2Parser::EnumConstantModifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumConstantModifier(this);
}

void Java9_v2Parser::EnumConstantModifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumConstantModifier(this);
}


antlrcpp::Any Java9_v2Parser::EnumConstantModifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitEnumConstantModifier(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::EnumConstantModifierContext* Java9_v2Parser::enumConstantModifier() {
  EnumConstantModifierContext *_localctx = _tracker.createInstance<EnumConstantModifierContext>(_ctx, getState());
  enterRule(_localctx, 204, Java9_v2Parser::RuleEnumConstantModifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1383);
    annotation();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumBodyDeclarationsContext ------------------------------------------------------------------

Java9_v2Parser::EnumBodyDeclarationsContext::EnumBodyDeclarationsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::EnumBodyDeclarationsContext::SEMI() {
  return getToken(Java9_v2Parser::SEMI, 0);
}

std::vector<Java9_v2Parser::ClassBodyDeclarationContext *> Java9_v2Parser::EnumBodyDeclarationsContext::classBodyDeclaration() {
  return getRuleContexts<Java9_v2Parser::ClassBodyDeclarationContext>();
}

Java9_v2Parser::ClassBodyDeclarationContext* Java9_v2Parser::EnumBodyDeclarationsContext::classBodyDeclaration(size_t i) {
  return getRuleContext<Java9_v2Parser::ClassBodyDeclarationContext>(i);
}


size_t Java9_v2Parser::EnumBodyDeclarationsContext::getRuleIndex() const {
  return Java9_v2Parser::RuleEnumBodyDeclarations;
}

void Java9_v2Parser::EnumBodyDeclarationsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumBodyDeclarations(this);
}

void Java9_v2Parser::EnumBodyDeclarationsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumBodyDeclarations(this);
}


antlrcpp::Any Java9_v2Parser::EnumBodyDeclarationsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitEnumBodyDeclarations(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::EnumBodyDeclarationsContext* Java9_v2Parser::enumBodyDeclarations() {
  EnumBodyDeclarationsContext *_localctx = _tracker.createInstance<EnumBodyDeclarationsContext>(_ctx, getState());
  enterRule(_localctx, 206, Java9_v2Parser::RuleEnumBodyDeclarations);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1385);
    match(Java9_v2Parser::SEMI);
    setState(1389);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << Java9_v2Parser::T__0)
      | (1ULL << Java9_v2Parser::T__1)
      | (1ULL << Java9_v2Parser::T__2)
      | (1ULL << Java9_v2Parser::T__3)
      | (1ULL << Java9_v2Parser::T__4)
      | (1ULL << Java9_v2Parser::T__5)
      | (1ULL << Java9_v2Parser::T__6)
      | (1ULL << Java9_v2Parser::T__7)
      | (1ULL << Java9_v2Parser::T__8)
      | (1ULL << Java9_v2Parser::ABSTRACT)
      | (1ULL << Java9_v2Parser::BOOLEAN)
      | (1ULL << Java9_v2Parser::BYTE)
      | (1ULL << Java9_v2Parser::CHAR)
      | (1ULL << Java9_v2Parser::CLASS)
      | (1ULL << Java9_v2Parser::DOUBLE)
      | (1ULL << Java9_v2Parser::ENUM)
      | (1ULL << Java9_v2Parser::FINAL)
      | (1ULL << Java9_v2Parser::FLOAT)
      | (1ULL << Java9_v2Parser::INT)
      | (1ULL << Java9_v2Parser::INTERFACE)
      | (1ULL << Java9_v2Parser::LONG)
      | (1ULL << Java9_v2Parser::NATIVE)
      | (1ULL << Java9_v2Parser::PRIVATE)
      | (1ULL << Java9_v2Parser::PROTECTED)
      | (1ULL << Java9_v2Parser::PUBLIC)
      | (1ULL << Java9_v2Parser::SHORT)
      | (1ULL << Java9_v2Parser::STATIC)
      | (1ULL << Java9_v2Parser::STRICTFP)
      | (1ULL << Java9_v2Parser::SYNCHRONIZED)
      | (1ULL << Java9_v2Parser::TRANSIENT)
      | (1ULL << Java9_v2Parser::VOID)
      | (1ULL << Java9_v2Parser::VOLATILE))) != 0) || ((((_la - 70) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 70)) & ((1ULL << (Java9_v2Parser::LBRACE - 70))
      | (1ULL << (Java9_v2Parser::SEMI - 70))
      | (1ULL << (Java9_v2Parser::AT - 70))
      | (1ULL << (Java9_v2Parser::LT - 70))
      | (1ULL << (Java9_v2Parser::Identifier - 70)))) != 0)) {
      setState(1386);
      classBodyDeclaration();
      setState(1391);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceDeclarationContext ------------------------------------------------------------------

Java9_v2Parser::InterfaceDeclarationContext::InterfaceDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::InterfaceDeclarationContext::getRuleIndex() const {
  return Java9_v2Parser::RuleInterfaceDeclaration;
}

void Java9_v2Parser::InterfaceDeclarationContext::copyFrom(InterfaceDeclarationContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- InterfaceDeclaration1Context ------------------------------------------------------------------

Java9_v2Parser::NormalInterfaceDeclarationContext* Java9_v2Parser::InterfaceDeclaration1Context::normalInterfaceDeclaration() {
  return getRuleContext<Java9_v2Parser::NormalInterfaceDeclarationContext>(0);
}

Java9_v2Parser::InterfaceDeclaration1Context::InterfaceDeclaration1Context(InterfaceDeclarationContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::InterfaceDeclaration1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterfaceDeclaration1(this);
}
void Java9_v2Parser::InterfaceDeclaration1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterfaceDeclaration1(this);
}

antlrcpp::Any Java9_v2Parser::InterfaceDeclaration1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitInterfaceDeclaration1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- InterfaceDeclaration2Context ------------------------------------------------------------------

Java9_v2Parser::AnnotationTypeDeclarationContext* Java9_v2Parser::InterfaceDeclaration2Context::annotationTypeDeclaration() {
  return getRuleContext<Java9_v2Parser::AnnotationTypeDeclarationContext>(0);
}

Java9_v2Parser::InterfaceDeclaration2Context::InterfaceDeclaration2Context(InterfaceDeclarationContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::InterfaceDeclaration2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterfaceDeclaration2(this);
}
void Java9_v2Parser::InterfaceDeclaration2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterfaceDeclaration2(this);
}

antlrcpp::Any Java9_v2Parser::InterfaceDeclaration2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitInterfaceDeclaration2(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::InterfaceDeclarationContext* Java9_v2Parser::interfaceDeclaration() {
  InterfaceDeclarationContext *_localctx = _tracker.createInstance<InterfaceDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 208, Java9_v2Parser::RuleInterfaceDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1394);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 136, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<InterfaceDeclarationContext *>(_tracker.createInstance<Java9_v2Parser::InterfaceDeclaration1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(1392);
      normalInterfaceDeclaration();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<InterfaceDeclarationContext *>(_tracker.createInstance<Java9_v2Parser::InterfaceDeclaration2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(1393);
      annotationTypeDeclaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NormalInterfaceDeclarationContext ------------------------------------------------------------------

Java9_v2Parser::NormalInterfaceDeclarationContext::NormalInterfaceDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::NormalInterfaceDeclarationContext::INTERFACE() {
  return getToken(Java9_v2Parser::INTERFACE, 0);
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::NormalInterfaceDeclarationContext::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

Java9_v2Parser::InterfaceBodyContext* Java9_v2Parser::NormalInterfaceDeclarationContext::interfaceBody() {
  return getRuleContext<Java9_v2Parser::InterfaceBodyContext>(0);
}

std::vector<Java9_v2Parser::InterfaceModifierContext *> Java9_v2Parser::NormalInterfaceDeclarationContext::interfaceModifier() {
  return getRuleContexts<Java9_v2Parser::InterfaceModifierContext>();
}

Java9_v2Parser::InterfaceModifierContext* Java9_v2Parser::NormalInterfaceDeclarationContext::interfaceModifier(size_t i) {
  return getRuleContext<Java9_v2Parser::InterfaceModifierContext>(i);
}

Java9_v2Parser::TypeParametersContext* Java9_v2Parser::NormalInterfaceDeclarationContext::typeParameters() {
  return getRuleContext<Java9_v2Parser::TypeParametersContext>(0);
}

Java9_v2Parser::ExtendsInterfacesContext* Java9_v2Parser::NormalInterfaceDeclarationContext::extendsInterfaces() {
  return getRuleContext<Java9_v2Parser::ExtendsInterfacesContext>(0);
}


size_t Java9_v2Parser::NormalInterfaceDeclarationContext::getRuleIndex() const {
  return Java9_v2Parser::RuleNormalInterfaceDeclaration;
}

void Java9_v2Parser::NormalInterfaceDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNormalInterfaceDeclaration(this);
}

void Java9_v2Parser::NormalInterfaceDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNormalInterfaceDeclaration(this);
}


antlrcpp::Any Java9_v2Parser::NormalInterfaceDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitNormalInterfaceDeclaration(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::NormalInterfaceDeclarationContext* Java9_v2Parser::normalInterfaceDeclaration() {
  NormalInterfaceDeclarationContext *_localctx = _tracker.createInstance<NormalInterfaceDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 210, Java9_v2Parser::RuleNormalInterfaceDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1399);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << Java9_v2Parser::ABSTRACT)
      | (1ULL << Java9_v2Parser::PRIVATE)
      | (1ULL << Java9_v2Parser::PROTECTED)
      | (1ULL << Java9_v2Parser::PUBLIC)
      | (1ULL << Java9_v2Parser::STATIC)
      | (1ULL << Java9_v2Parser::STRICTFP))) != 0) || _la == Java9_v2Parser::AT) {
      setState(1396);
      interfaceModifier();
      setState(1401);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1402);
    match(Java9_v2Parser::INTERFACE);
    setState(1403);
    identifier();
    setState(1405);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java9_v2Parser::LT) {
      setState(1404);
      typeParameters();
    }
    setState(1408);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java9_v2Parser::EXTENDS) {
      setState(1407);
      extendsInterfaces();
    }
    setState(1410);
    interfaceBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceModifierContext ------------------------------------------------------------------

Java9_v2Parser::InterfaceModifierContext::InterfaceModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::AnnotationContext* Java9_v2Parser::InterfaceModifierContext::annotation() {
  return getRuleContext<Java9_v2Parser::AnnotationContext>(0);
}

tree::TerminalNode* Java9_v2Parser::InterfaceModifierContext::PUBLIC() {
  return getToken(Java9_v2Parser::PUBLIC, 0);
}

tree::TerminalNode* Java9_v2Parser::InterfaceModifierContext::PROTECTED() {
  return getToken(Java9_v2Parser::PROTECTED, 0);
}

tree::TerminalNode* Java9_v2Parser::InterfaceModifierContext::PRIVATE() {
  return getToken(Java9_v2Parser::PRIVATE, 0);
}

tree::TerminalNode* Java9_v2Parser::InterfaceModifierContext::ABSTRACT() {
  return getToken(Java9_v2Parser::ABSTRACT, 0);
}

tree::TerminalNode* Java9_v2Parser::InterfaceModifierContext::STATIC() {
  return getToken(Java9_v2Parser::STATIC, 0);
}

tree::TerminalNode* Java9_v2Parser::InterfaceModifierContext::STRICTFP() {
  return getToken(Java9_v2Parser::STRICTFP, 0);
}


size_t Java9_v2Parser::InterfaceModifierContext::getRuleIndex() const {
  return Java9_v2Parser::RuleInterfaceModifier;
}

void Java9_v2Parser::InterfaceModifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterfaceModifier(this);
}

void Java9_v2Parser::InterfaceModifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterfaceModifier(this);
}


antlrcpp::Any Java9_v2Parser::InterfaceModifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitInterfaceModifier(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::InterfaceModifierContext* Java9_v2Parser::interfaceModifier() {
  InterfaceModifierContext *_localctx = _tracker.createInstance<InterfaceModifierContext>(_ctx, getState());
  enterRule(_localctx, 212, Java9_v2Parser::RuleInterfaceModifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1419);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Java9_v2Parser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(1412);
        annotation();
        break;
      }

      case Java9_v2Parser::PUBLIC: {
        enterOuterAlt(_localctx, 2);
        setState(1413);
        match(Java9_v2Parser::PUBLIC);
        break;
      }

      case Java9_v2Parser::PROTECTED: {
        enterOuterAlt(_localctx, 3);
        setState(1414);
        match(Java9_v2Parser::PROTECTED);
        break;
      }

      case Java9_v2Parser::PRIVATE: {
        enterOuterAlt(_localctx, 4);
        setState(1415);
        match(Java9_v2Parser::PRIVATE);
        break;
      }

      case Java9_v2Parser::ABSTRACT: {
        enterOuterAlt(_localctx, 5);
        setState(1416);
        match(Java9_v2Parser::ABSTRACT);
        break;
      }

      case Java9_v2Parser::STATIC: {
        enterOuterAlt(_localctx, 6);
        setState(1417);
        match(Java9_v2Parser::STATIC);
        break;
      }

      case Java9_v2Parser::STRICTFP: {
        enterOuterAlt(_localctx, 7);
        setState(1418);
        match(Java9_v2Parser::STRICTFP);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExtendsInterfacesContext ------------------------------------------------------------------

Java9_v2Parser::ExtendsInterfacesContext::ExtendsInterfacesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::ExtendsInterfacesContext::EXTENDS() {
  return getToken(Java9_v2Parser::EXTENDS, 0);
}

Java9_v2Parser::InterfaceTypeListContext* Java9_v2Parser::ExtendsInterfacesContext::interfaceTypeList() {
  return getRuleContext<Java9_v2Parser::InterfaceTypeListContext>(0);
}


size_t Java9_v2Parser::ExtendsInterfacesContext::getRuleIndex() const {
  return Java9_v2Parser::RuleExtendsInterfaces;
}

void Java9_v2Parser::ExtendsInterfacesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExtendsInterfaces(this);
}

void Java9_v2Parser::ExtendsInterfacesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExtendsInterfaces(this);
}


antlrcpp::Any Java9_v2Parser::ExtendsInterfacesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitExtendsInterfaces(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::ExtendsInterfacesContext* Java9_v2Parser::extendsInterfaces() {
  ExtendsInterfacesContext *_localctx = _tracker.createInstance<ExtendsInterfacesContext>(_ctx, getState());
  enterRule(_localctx, 214, Java9_v2Parser::RuleExtendsInterfaces);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1421);
    match(Java9_v2Parser::EXTENDS);
    setState(1422);
    interfaceTypeList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceBodyContext ------------------------------------------------------------------

Java9_v2Parser::InterfaceBodyContext::InterfaceBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::InterfaceBodyContext::LBRACE() {
  return getToken(Java9_v2Parser::LBRACE, 0);
}

tree::TerminalNode* Java9_v2Parser::InterfaceBodyContext::RBRACE() {
  return getToken(Java9_v2Parser::RBRACE, 0);
}

std::vector<Java9_v2Parser::InterfaceMemberDeclarationContext *> Java9_v2Parser::InterfaceBodyContext::interfaceMemberDeclaration() {
  return getRuleContexts<Java9_v2Parser::InterfaceMemberDeclarationContext>();
}

Java9_v2Parser::InterfaceMemberDeclarationContext* Java9_v2Parser::InterfaceBodyContext::interfaceMemberDeclaration(size_t i) {
  return getRuleContext<Java9_v2Parser::InterfaceMemberDeclarationContext>(i);
}


size_t Java9_v2Parser::InterfaceBodyContext::getRuleIndex() const {
  return Java9_v2Parser::RuleInterfaceBody;
}

void Java9_v2Parser::InterfaceBodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterfaceBody(this);
}

void Java9_v2Parser::InterfaceBodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterfaceBody(this);
}


antlrcpp::Any Java9_v2Parser::InterfaceBodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitInterfaceBody(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::InterfaceBodyContext* Java9_v2Parser::interfaceBody() {
  InterfaceBodyContext *_localctx = _tracker.createInstance<InterfaceBodyContext>(_ctx, getState());
  enterRule(_localctx, 216, Java9_v2Parser::RuleInterfaceBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1424);
    match(Java9_v2Parser::LBRACE);
    setState(1428);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << Java9_v2Parser::T__0)
      | (1ULL << Java9_v2Parser::T__1)
      | (1ULL << Java9_v2Parser::T__2)
      | (1ULL << Java9_v2Parser::T__3)
      | (1ULL << Java9_v2Parser::T__4)
      | (1ULL << Java9_v2Parser::T__5)
      | (1ULL << Java9_v2Parser::T__6)
      | (1ULL << Java9_v2Parser::T__7)
      | (1ULL << Java9_v2Parser::T__8)
      | (1ULL << Java9_v2Parser::ABSTRACT)
      | (1ULL << Java9_v2Parser::BOOLEAN)
      | (1ULL << Java9_v2Parser::BYTE)
      | (1ULL << Java9_v2Parser::CHAR)
      | (1ULL << Java9_v2Parser::CLASS)
      | (1ULL << Java9_v2Parser::DEFAULT)
      | (1ULL << Java9_v2Parser::DOUBLE)
      | (1ULL << Java9_v2Parser::ENUM)
      | (1ULL << Java9_v2Parser::FINAL)
      | (1ULL << Java9_v2Parser::FLOAT)
      | (1ULL << Java9_v2Parser::INT)
      | (1ULL << Java9_v2Parser::INTERFACE)
      | (1ULL << Java9_v2Parser::LONG)
      | (1ULL << Java9_v2Parser::PRIVATE)
      | (1ULL << Java9_v2Parser::PROTECTED)
      | (1ULL << Java9_v2Parser::PUBLIC)
      | (1ULL << Java9_v2Parser::SHORT)
      | (1ULL << Java9_v2Parser::STATIC)
      | (1ULL << Java9_v2Parser::STRICTFP)
      | (1ULL << Java9_v2Parser::VOID))) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 74)) & ((1ULL << (Java9_v2Parser::SEMI - 74))
      | (1ULL << (Java9_v2Parser::AT - 74))
      | (1ULL << (Java9_v2Parser::LT - 74))
      | (1ULL << (Java9_v2Parser::Identifier - 74)))) != 0)) {
      setState(1425);
      interfaceMemberDeclaration();
      setState(1430);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1431);
    match(Java9_v2Parser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceMemberDeclarationContext ------------------------------------------------------------------

Java9_v2Parser::InterfaceMemberDeclarationContext::InterfaceMemberDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::InterfaceMemberDeclarationContext::getRuleIndex() const {
  return Java9_v2Parser::RuleInterfaceMemberDeclaration;
}

void Java9_v2Parser::InterfaceMemberDeclarationContext::copyFrom(InterfaceMemberDeclarationContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- InterfaceMemberDeclaration5Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::InterfaceMemberDeclaration5Context::SEMI() {
  return getToken(Java9_v2Parser::SEMI, 0);
}

Java9_v2Parser::InterfaceMemberDeclaration5Context::InterfaceMemberDeclaration5Context(InterfaceMemberDeclarationContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::InterfaceMemberDeclaration5Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterfaceMemberDeclaration5(this);
}
void Java9_v2Parser::InterfaceMemberDeclaration5Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterfaceMemberDeclaration5(this);
}

antlrcpp::Any Java9_v2Parser::InterfaceMemberDeclaration5Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitInterfaceMemberDeclaration5(this);
  else
    return visitor->visitChildren(this);
}
//----------------- InterfaceMemberDeclaration4Context ------------------------------------------------------------------

Java9_v2Parser::InterfaceDeclarationContext* Java9_v2Parser::InterfaceMemberDeclaration4Context::interfaceDeclaration() {
  return getRuleContext<Java9_v2Parser::InterfaceDeclarationContext>(0);
}

Java9_v2Parser::InterfaceMemberDeclaration4Context::InterfaceMemberDeclaration4Context(InterfaceMemberDeclarationContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::InterfaceMemberDeclaration4Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterfaceMemberDeclaration4(this);
}
void Java9_v2Parser::InterfaceMemberDeclaration4Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterfaceMemberDeclaration4(this);
}

antlrcpp::Any Java9_v2Parser::InterfaceMemberDeclaration4Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitInterfaceMemberDeclaration4(this);
  else
    return visitor->visitChildren(this);
}
//----------------- InterfaceMemberDeclaration3Context ------------------------------------------------------------------

Java9_v2Parser::ClassDeclarationContext* Java9_v2Parser::InterfaceMemberDeclaration3Context::classDeclaration() {
  return getRuleContext<Java9_v2Parser::ClassDeclarationContext>(0);
}

Java9_v2Parser::InterfaceMemberDeclaration3Context::InterfaceMemberDeclaration3Context(InterfaceMemberDeclarationContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::InterfaceMemberDeclaration3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterfaceMemberDeclaration3(this);
}
void Java9_v2Parser::InterfaceMemberDeclaration3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterfaceMemberDeclaration3(this);
}

antlrcpp::Any Java9_v2Parser::InterfaceMemberDeclaration3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitInterfaceMemberDeclaration3(this);
  else
    return visitor->visitChildren(this);
}
//----------------- InterfaceMemberDeclaration2Context ------------------------------------------------------------------

Java9_v2Parser::InterfaceMethodDeclarationContext* Java9_v2Parser::InterfaceMemberDeclaration2Context::interfaceMethodDeclaration() {
  return getRuleContext<Java9_v2Parser::InterfaceMethodDeclarationContext>(0);
}

Java9_v2Parser::InterfaceMemberDeclaration2Context::InterfaceMemberDeclaration2Context(InterfaceMemberDeclarationContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::InterfaceMemberDeclaration2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterfaceMemberDeclaration2(this);
}
void Java9_v2Parser::InterfaceMemberDeclaration2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterfaceMemberDeclaration2(this);
}

antlrcpp::Any Java9_v2Parser::InterfaceMemberDeclaration2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitInterfaceMemberDeclaration2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- InterfaceMemberDeclaration1Context ------------------------------------------------------------------

Java9_v2Parser::ConstantDeclarationContext* Java9_v2Parser::InterfaceMemberDeclaration1Context::constantDeclaration() {
  return getRuleContext<Java9_v2Parser::ConstantDeclarationContext>(0);
}

Java9_v2Parser::InterfaceMemberDeclaration1Context::InterfaceMemberDeclaration1Context(InterfaceMemberDeclarationContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::InterfaceMemberDeclaration1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterfaceMemberDeclaration1(this);
}
void Java9_v2Parser::InterfaceMemberDeclaration1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterfaceMemberDeclaration1(this);
}

antlrcpp::Any Java9_v2Parser::InterfaceMemberDeclaration1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitInterfaceMemberDeclaration1(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::InterfaceMemberDeclarationContext* Java9_v2Parser::interfaceMemberDeclaration() {
  InterfaceMemberDeclarationContext *_localctx = _tracker.createInstance<InterfaceMemberDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 218, Java9_v2Parser::RuleInterfaceMemberDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1438);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 142, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<InterfaceMemberDeclarationContext *>(_tracker.createInstance<Java9_v2Parser::InterfaceMemberDeclaration1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(1433);
      constantDeclaration();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<InterfaceMemberDeclarationContext *>(_tracker.createInstance<Java9_v2Parser::InterfaceMemberDeclaration2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(1434);
      interfaceMethodDeclaration();
      break;
    }

    case 3: {
      _localctx = dynamic_cast<InterfaceMemberDeclarationContext *>(_tracker.createInstance<Java9_v2Parser::InterfaceMemberDeclaration3Context>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(1435);
      classDeclaration();
      break;
    }

    case 4: {
      _localctx = dynamic_cast<InterfaceMemberDeclarationContext *>(_tracker.createInstance<Java9_v2Parser::InterfaceMemberDeclaration4Context>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(1436);
      interfaceDeclaration();
      break;
    }

    case 5: {
      _localctx = dynamic_cast<InterfaceMemberDeclarationContext *>(_tracker.createInstance<Java9_v2Parser::InterfaceMemberDeclaration5Context>(_localctx));
      enterOuterAlt(_localctx, 5);
      setState(1437);
      match(Java9_v2Parser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstantDeclarationContext ------------------------------------------------------------------

Java9_v2Parser::ConstantDeclarationContext::ConstantDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::UnannTypeContext* Java9_v2Parser::ConstantDeclarationContext::unannType() {
  return getRuleContext<Java9_v2Parser::UnannTypeContext>(0);
}

Java9_v2Parser::VariableDeclaratorListContext* Java9_v2Parser::ConstantDeclarationContext::variableDeclaratorList() {
  return getRuleContext<Java9_v2Parser::VariableDeclaratorListContext>(0);
}

tree::TerminalNode* Java9_v2Parser::ConstantDeclarationContext::SEMI() {
  return getToken(Java9_v2Parser::SEMI, 0);
}

std::vector<Java9_v2Parser::ConstantModifierContext *> Java9_v2Parser::ConstantDeclarationContext::constantModifier() {
  return getRuleContexts<Java9_v2Parser::ConstantModifierContext>();
}

Java9_v2Parser::ConstantModifierContext* Java9_v2Parser::ConstantDeclarationContext::constantModifier(size_t i) {
  return getRuleContext<Java9_v2Parser::ConstantModifierContext>(i);
}


size_t Java9_v2Parser::ConstantDeclarationContext::getRuleIndex() const {
  return Java9_v2Parser::RuleConstantDeclaration;
}

void Java9_v2Parser::ConstantDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstantDeclaration(this);
}

void Java9_v2Parser::ConstantDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstantDeclaration(this);
}


antlrcpp::Any Java9_v2Parser::ConstantDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitConstantDeclaration(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::ConstantDeclarationContext* Java9_v2Parser::constantDeclaration() {
  ConstantDeclarationContext *_localctx = _tracker.createInstance<ConstantDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 220, Java9_v2Parser::RuleConstantDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1443);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 28) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 28)) & ((1ULL << (Java9_v2Parser::FINAL - 28))
      | (1ULL << (Java9_v2Parser::PUBLIC - 28))
      | (1ULL << (Java9_v2Parser::STATIC - 28))
      | (1ULL << (Java9_v2Parser::AT - 28)))) != 0)) {
      setState(1440);
      constantModifier();
      setState(1445);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1446);
    unannType();
    setState(1447);
    variableDeclaratorList();
    setState(1448);
    match(Java9_v2Parser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstantModifierContext ------------------------------------------------------------------

Java9_v2Parser::ConstantModifierContext::ConstantModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::AnnotationContext* Java9_v2Parser::ConstantModifierContext::annotation() {
  return getRuleContext<Java9_v2Parser::AnnotationContext>(0);
}

tree::TerminalNode* Java9_v2Parser::ConstantModifierContext::PUBLIC() {
  return getToken(Java9_v2Parser::PUBLIC, 0);
}

tree::TerminalNode* Java9_v2Parser::ConstantModifierContext::STATIC() {
  return getToken(Java9_v2Parser::STATIC, 0);
}

tree::TerminalNode* Java9_v2Parser::ConstantModifierContext::FINAL() {
  return getToken(Java9_v2Parser::FINAL, 0);
}


size_t Java9_v2Parser::ConstantModifierContext::getRuleIndex() const {
  return Java9_v2Parser::RuleConstantModifier;
}

void Java9_v2Parser::ConstantModifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstantModifier(this);
}

void Java9_v2Parser::ConstantModifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstantModifier(this);
}


antlrcpp::Any Java9_v2Parser::ConstantModifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitConstantModifier(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::ConstantModifierContext* Java9_v2Parser::constantModifier() {
  ConstantModifierContext *_localctx = _tracker.createInstance<ConstantModifierContext>(_ctx, getState());
  enterRule(_localctx, 222, Java9_v2Parser::RuleConstantModifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1454);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Java9_v2Parser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(1450);
        annotation();
        break;
      }

      case Java9_v2Parser::PUBLIC: {
        enterOuterAlt(_localctx, 2);
        setState(1451);
        match(Java9_v2Parser::PUBLIC);
        break;
      }

      case Java9_v2Parser::STATIC: {
        enterOuterAlt(_localctx, 3);
        setState(1452);
        match(Java9_v2Parser::STATIC);
        break;
      }

      case Java9_v2Parser::FINAL: {
        enterOuterAlt(_localctx, 4);
        setState(1453);
        match(Java9_v2Parser::FINAL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceMethodDeclarationContext ------------------------------------------------------------------

Java9_v2Parser::InterfaceMethodDeclarationContext::InterfaceMethodDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::MethodHeaderContext* Java9_v2Parser::InterfaceMethodDeclarationContext::methodHeader() {
  return getRuleContext<Java9_v2Parser::MethodHeaderContext>(0);
}

Java9_v2Parser::MethodBodyContext* Java9_v2Parser::InterfaceMethodDeclarationContext::methodBody() {
  return getRuleContext<Java9_v2Parser::MethodBodyContext>(0);
}

std::vector<Java9_v2Parser::InterfaceMethodModifierContext *> Java9_v2Parser::InterfaceMethodDeclarationContext::interfaceMethodModifier() {
  return getRuleContexts<Java9_v2Parser::InterfaceMethodModifierContext>();
}

Java9_v2Parser::InterfaceMethodModifierContext* Java9_v2Parser::InterfaceMethodDeclarationContext::interfaceMethodModifier(size_t i) {
  return getRuleContext<Java9_v2Parser::InterfaceMethodModifierContext>(i);
}


size_t Java9_v2Parser::InterfaceMethodDeclarationContext::getRuleIndex() const {
  return Java9_v2Parser::RuleInterfaceMethodDeclaration;
}

void Java9_v2Parser::InterfaceMethodDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterfaceMethodDeclaration(this);
}

void Java9_v2Parser::InterfaceMethodDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterfaceMethodDeclaration(this);
}


antlrcpp::Any Java9_v2Parser::InterfaceMethodDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitInterfaceMethodDeclaration(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::InterfaceMethodDeclarationContext* Java9_v2Parser::interfaceMethodDeclaration() {
  InterfaceMethodDeclarationContext *_localctx = _tracker.createInstance<InterfaceMethodDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 224, Java9_v2Parser::RuleInterfaceMethodDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1459);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << Java9_v2Parser::ABSTRACT)
      | (1ULL << Java9_v2Parser::DEFAULT)
      | (1ULL << Java9_v2Parser::PRIVATE)
      | (1ULL << Java9_v2Parser::PUBLIC)
      | (1ULL << Java9_v2Parser::STATIC)
      | (1ULL << Java9_v2Parser::STRICTFP))) != 0) || _la == Java9_v2Parser::AT) {
      setState(1456);
      interfaceMethodModifier();
      setState(1461);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1462);
    methodHeader();
    setState(1463);
    methodBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceMethodModifierContext ------------------------------------------------------------------

Java9_v2Parser::InterfaceMethodModifierContext::InterfaceMethodModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::AnnotationContext* Java9_v2Parser::InterfaceMethodModifierContext::annotation() {
  return getRuleContext<Java9_v2Parser::AnnotationContext>(0);
}

tree::TerminalNode* Java9_v2Parser::InterfaceMethodModifierContext::PUBLIC() {
  return getToken(Java9_v2Parser::PUBLIC, 0);
}

tree::TerminalNode* Java9_v2Parser::InterfaceMethodModifierContext::PRIVATE() {
  return getToken(Java9_v2Parser::PRIVATE, 0);
}

tree::TerminalNode* Java9_v2Parser::InterfaceMethodModifierContext::ABSTRACT() {
  return getToken(Java9_v2Parser::ABSTRACT, 0);
}

tree::TerminalNode* Java9_v2Parser::InterfaceMethodModifierContext::DEFAULT() {
  return getToken(Java9_v2Parser::DEFAULT, 0);
}

tree::TerminalNode* Java9_v2Parser::InterfaceMethodModifierContext::STATIC() {
  return getToken(Java9_v2Parser::STATIC, 0);
}

tree::TerminalNode* Java9_v2Parser::InterfaceMethodModifierContext::STRICTFP() {
  return getToken(Java9_v2Parser::STRICTFP, 0);
}


size_t Java9_v2Parser::InterfaceMethodModifierContext::getRuleIndex() const {
  return Java9_v2Parser::RuleInterfaceMethodModifier;
}

void Java9_v2Parser::InterfaceMethodModifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterfaceMethodModifier(this);
}

void Java9_v2Parser::InterfaceMethodModifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterfaceMethodModifier(this);
}


antlrcpp::Any Java9_v2Parser::InterfaceMethodModifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitInterfaceMethodModifier(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::InterfaceMethodModifierContext* Java9_v2Parser::interfaceMethodModifier() {
  InterfaceMethodModifierContext *_localctx = _tracker.createInstance<InterfaceMethodModifierContext>(_ctx, getState());
  enterRule(_localctx, 226, Java9_v2Parser::RuleInterfaceMethodModifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1472);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Java9_v2Parser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(1465);
        annotation();
        break;
      }

      case Java9_v2Parser::PUBLIC: {
        enterOuterAlt(_localctx, 2);
        setState(1466);
        match(Java9_v2Parser::PUBLIC);
        break;
      }

      case Java9_v2Parser::PRIVATE: {
        enterOuterAlt(_localctx, 3);
        setState(1467);
        match(Java9_v2Parser::PRIVATE);
        break;
      }

      case Java9_v2Parser::ABSTRACT: {
        enterOuterAlt(_localctx, 4);
        setState(1468);
        match(Java9_v2Parser::ABSTRACT);
        break;
      }

      case Java9_v2Parser::DEFAULT: {
        enterOuterAlt(_localctx, 5);
        setState(1469);
        match(Java9_v2Parser::DEFAULT);
        break;
      }

      case Java9_v2Parser::STATIC: {
        enterOuterAlt(_localctx, 6);
        setState(1470);
        match(Java9_v2Parser::STATIC);
        break;
      }

      case Java9_v2Parser::STRICTFP: {
        enterOuterAlt(_localctx, 7);
        setState(1471);
        match(Java9_v2Parser::STRICTFP);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationTypeDeclarationContext ------------------------------------------------------------------

Java9_v2Parser::AnnotationTypeDeclarationContext::AnnotationTypeDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::AnnotationTypeDeclarationContext::AT() {
  return getToken(Java9_v2Parser::AT, 0);
}

tree::TerminalNode* Java9_v2Parser::AnnotationTypeDeclarationContext::INTERFACE() {
  return getToken(Java9_v2Parser::INTERFACE, 0);
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::AnnotationTypeDeclarationContext::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

Java9_v2Parser::AnnotationTypeBodyContext* Java9_v2Parser::AnnotationTypeDeclarationContext::annotationTypeBody() {
  return getRuleContext<Java9_v2Parser::AnnotationTypeBodyContext>(0);
}

std::vector<Java9_v2Parser::InterfaceModifierContext *> Java9_v2Parser::AnnotationTypeDeclarationContext::interfaceModifier() {
  return getRuleContexts<Java9_v2Parser::InterfaceModifierContext>();
}

Java9_v2Parser::InterfaceModifierContext* Java9_v2Parser::AnnotationTypeDeclarationContext::interfaceModifier(size_t i) {
  return getRuleContext<Java9_v2Parser::InterfaceModifierContext>(i);
}


size_t Java9_v2Parser::AnnotationTypeDeclarationContext::getRuleIndex() const {
  return Java9_v2Parser::RuleAnnotationTypeDeclaration;
}

void Java9_v2Parser::AnnotationTypeDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotationTypeDeclaration(this);
}

void Java9_v2Parser::AnnotationTypeDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotationTypeDeclaration(this);
}


antlrcpp::Any Java9_v2Parser::AnnotationTypeDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitAnnotationTypeDeclaration(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::AnnotationTypeDeclarationContext* Java9_v2Parser::annotationTypeDeclaration() {
  AnnotationTypeDeclarationContext *_localctx = _tracker.createInstance<AnnotationTypeDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 228, Java9_v2Parser::RuleAnnotationTypeDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1477);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 147, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1474);
        interfaceModifier(); 
      }
      setState(1479);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 147, _ctx);
    }
    setState(1480);
    match(Java9_v2Parser::AT);
    setState(1481);
    match(Java9_v2Parser::INTERFACE);
    setState(1482);
    identifier();
    setState(1483);
    annotationTypeBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationTypeBodyContext ------------------------------------------------------------------

Java9_v2Parser::AnnotationTypeBodyContext::AnnotationTypeBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::AnnotationTypeBodyContext::LBRACE() {
  return getToken(Java9_v2Parser::LBRACE, 0);
}

tree::TerminalNode* Java9_v2Parser::AnnotationTypeBodyContext::RBRACE() {
  return getToken(Java9_v2Parser::RBRACE, 0);
}

std::vector<Java9_v2Parser::AnnotationTypeMemberDeclarationContext *> Java9_v2Parser::AnnotationTypeBodyContext::annotationTypeMemberDeclaration() {
  return getRuleContexts<Java9_v2Parser::AnnotationTypeMemberDeclarationContext>();
}

Java9_v2Parser::AnnotationTypeMemberDeclarationContext* Java9_v2Parser::AnnotationTypeBodyContext::annotationTypeMemberDeclaration(size_t i) {
  return getRuleContext<Java9_v2Parser::AnnotationTypeMemberDeclarationContext>(i);
}


size_t Java9_v2Parser::AnnotationTypeBodyContext::getRuleIndex() const {
  return Java9_v2Parser::RuleAnnotationTypeBody;
}

void Java9_v2Parser::AnnotationTypeBodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotationTypeBody(this);
}

void Java9_v2Parser::AnnotationTypeBodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotationTypeBody(this);
}


antlrcpp::Any Java9_v2Parser::AnnotationTypeBodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitAnnotationTypeBody(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::AnnotationTypeBodyContext* Java9_v2Parser::annotationTypeBody() {
  AnnotationTypeBodyContext *_localctx = _tracker.createInstance<AnnotationTypeBodyContext>(_ctx, getState());
  enterRule(_localctx, 230, Java9_v2Parser::RuleAnnotationTypeBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1485);
    match(Java9_v2Parser::LBRACE);
    setState(1489);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << Java9_v2Parser::T__0)
      | (1ULL << Java9_v2Parser::T__1)
      | (1ULL << Java9_v2Parser::T__2)
      | (1ULL << Java9_v2Parser::T__3)
      | (1ULL << Java9_v2Parser::T__4)
      | (1ULL << Java9_v2Parser::T__5)
      | (1ULL << Java9_v2Parser::T__6)
      | (1ULL << Java9_v2Parser::T__7)
      | (1ULL << Java9_v2Parser::T__8)
      | (1ULL << Java9_v2Parser::ABSTRACT)
      | (1ULL << Java9_v2Parser::BOOLEAN)
      | (1ULL << Java9_v2Parser::BYTE)
      | (1ULL << Java9_v2Parser::CHAR)
      | (1ULL << Java9_v2Parser::CLASS)
      | (1ULL << Java9_v2Parser::DOUBLE)
      | (1ULL << Java9_v2Parser::ENUM)
      | (1ULL << Java9_v2Parser::FINAL)
      | (1ULL << Java9_v2Parser::FLOAT)
      | (1ULL << Java9_v2Parser::INT)
      | (1ULL << Java9_v2Parser::INTERFACE)
      | (1ULL << Java9_v2Parser::LONG)
      | (1ULL << Java9_v2Parser::PRIVATE)
      | (1ULL << Java9_v2Parser::PROTECTED)
      | (1ULL << Java9_v2Parser::PUBLIC)
      | (1ULL << Java9_v2Parser::SHORT)
      | (1ULL << Java9_v2Parser::STATIC)
      | (1ULL << Java9_v2Parser::STRICTFP))) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 74)) & ((1ULL << (Java9_v2Parser::SEMI - 74))
      | (1ULL << (Java9_v2Parser::AT - 74))
      | (1ULL << (Java9_v2Parser::Identifier - 74)))) != 0)) {
      setState(1486);
      annotationTypeMemberDeclaration();
      setState(1491);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1492);
    match(Java9_v2Parser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationTypeMemberDeclarationContext ------------------------------------------------------------------

Java9_v2Parser::AnnotationTypeMemberDeclarationContext::AnnotationTypeMemberDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::AnnotationTypeMemberDeclarationContext::getRuleIndex() const {
  return Java9_v2Parser::RuleAnnotationTypeMemberDeclaration;
}

void Java9_v2Parser::AnnotationTypeMemberDeclarationContext::copyFrom(AnnotationTypeMemberDeclarationContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- AnnotationTypeMemberDeclaration1Context ------------------------------------------------------------------

Java9_v2Parser::AnnotationTypeElementDeclarationContext* Java9_v2Parser::AnnotationTypeMemberDeclaration1Context::annotationTypeElementDeclaration() {
  return getRuleContext<Java9_v2Parser::AnnotationTypeElementDeclarationContext>(0);
}

Java9_v2Parser::AnnotationTypeMemberDeclaration1Context::AnnotationTypeMemberDeclaration1Context(AnnotationTypeMemberDeclarationContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::AnnotationTypeMemberDeclaration1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotationTypeMemberDeclaration1(this);
}
void Java9_v2Parser::AnnotationTypeMemberDeclaration1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotationTypeMemberDeclaration1(this);
}

antlrcpp::Any Java9_v2Parser::AnnotationTypeMemberDeclaration1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitAnnotationTypeMemberDeclaration1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AnnotationTypeMemberDeclaration2Context ------------------------------------------------------------------

Java9_v2Parser::ConstantDeclarationContext* Java9_v2Parser::AnnotationTypeMemberDeclaration2Context::constantDeclaration() {
  return getRuleContext<Java9_v2Parser::ConstantDeclarationContext>(0);
}

Java9_v2Parser::AnnotationTypeMemberDeclaration2Context::AnnotationTypeMemberDeclaration2Context(AnnotationTypeMemberDeclarationContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::AnnotationTypeMemberDeclaration2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotationTypeMemberDeclaration2(this);
}
void Java9_v2Parser::AnnotationTypeMemberDeclaration2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotationTypeMemberDeclaration2(this);
}

antlrcpp::Any Java9_v2Parser::AnnotationTypeMemberDeclaration2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitAnnotationTypeMemberDeclaration2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AnnotationTypeMemberDeclaration3Context ------------------------------------------------------------------

Java9_v2Parser::ClassDeclarationContext* Java9_v2Parser::AnnotationTypeMemberDeclaration3Context::classDeclaration() {
  return getRuleContext<Java9_v2Parser::ClassDeclarationContext>(0);
}

Java9_v2Parser::AnnotationTypeMemberDeclaration3Context::AnnotationTypeMemberDeclaration3Context(AnnotationTypeMemberDeclarationContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::AnnotationTypeMemberDeclaration3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotationTypeMemberDeclaration3(this);
}
void Java9_v2Parser::AnnotationTypeMemberDeclaration3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotationTypeMemberDeclaration3(this);
}

antlrcpp::Any Java9_v2Parser::AnnotationTypeMemberDeclaration3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitAnnotationTypeMemberDeclaration3(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AnnotationTypeMemberDeclaration4Context ------------------------------------------------------------------

Java9_v2Parser::InterfaceDeclarationContext* Java9_v2Parser::AnnotationTypeMemberDeclaration4Context::interfaceDeclaration() {
  return getRuleContext<Java9_v2Parser::InterfaceDeclarationContext>(0);
}

Java9_v2Parser::AnnotationTypeMemberDeclaration4Context::AnnotationTypeMemberDeclaration4Context(AnnotationTypeMemberDeclarationContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::AnnotationTypeMemberDeclaration4Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotationTypeMemberDeclaration4(this);
}
void Java9_v2Parser::AnnotationTypeMemberDeclaration4Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotationTypeMemberDeclaration4(this);
}

antlrcpp::Any Java9_v2Parser::AnnotationTypeMemberDeclaration4Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitAnnotationTypeMemberDeclaration4(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AnnotationTypeMemberDeclaration5Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::AnnotationTypeMemberDeclaration5Context::SEMI() {
  return getToken(Java9_v2Parser::SEMI, 0);
}

Java9_v2Parser::AnnotationTypeMemberDeclaration5Context::AnnotationTypeMemberDeclaration5Context(AnnotationTypeMemberDeclarationContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::AnnotationTypeMemberDeclaration5Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotationTypeMemberDeclaration5(this);
}
void Java9_v2Parser::AnnotationTypeMemberDeclaration5Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotationTypeMemberDeclaration5(this);
}

antlrcpp::Any Java9_v2Parser::AnnotationTypeMemberDeclaration5Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitAnnotationTypeMemberDeclaration5(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::AnnotationTypeMemberDeclarationContext* Java9_v2Parser::annotationTypeMemberDeclaration() {
  AnnotationTypeMemberDeclarationContext *_localctx = _tracker.createInstance<AnnotationTypeMemberDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 232, Java9_v2Parser::RuleAnnotationTypeMemberDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1499);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 149, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<AnnotationTypeMemberDeclarationContext *>(_tracker.createInstance<Java9_v2Parser::AnnotationTypeMemberDeclaration1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(1494);
      annotationTypeElementDeclaration();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<AnnotationTypeMemberDeclarationContext *>(_tracker.createInstance<Java9_v2Parser::AnnotationTypeMemberDeclaration2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(1495);
      constantDeclaration();
      break;
    }

    case 3: {
      _localctx = dynamic_cast<AnnotationTypeMemberDeclarationContext *>(_tracker.createInstance<Java9_v2Parser::AnnotationTypeMemberDeclaration3Context>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(1496);
      classDeclaration();
      break;
    }

    case 4: {
      _localctx = dynamic_cast<AnnotationTypeMemberDeclarationContext *>(_tracker.createInstance<Java9_v2Parser::AnnotationTypeMemberDeclaration4Context>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(1497);
      interfaceDeclaration();
      break;
    }

    case 5: {
      _localctx = dynamic_cast<AnnotationTypeMemberDeclarationContext *>(_tracker.createInstance<Java9_v2Parser::AnnotationTypeMemberDeclaration5Context>(_localctx));
      enterOuterAlt(_localctx, 5);
      setState(1498);
      match(Java9_v2Parser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationTypeElementDeclarationContext ------------------------------------------------------------------

Java9_v2Parser::AnnotationTypeElementDeclarationContext::AnnotationTypeElementDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::UnannTypeContext* Java9_v2Parser::AnnotationTypeElementDeclarationContext::unannType() {
  return getRuleContext<Java9_v2Parser::UnannTypeContext>(0);
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::AnnotationTypeElementDeclarationContext::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

tree::TerminalNode* Java9_v2Parser::AnnotationTypeElementDeclarationContext::LPAREN() {
  return getToken(Java9_v2Parser::LPAREN, 0);
}

tree::TerminalNode* Java9_v2Parser::AnnotationTypeElementDeclarationContext::RPAREN() {
  return getToken(Java9_v2Parser::RPAREN, 0);
}

tree::TerminalNode* Java9_v2Parser::AnnotationTypeElementDeclarationContext::SEMI() {
  return getToken(Java9_v2Parser::SEMI, 0);
}

std::vector<Java9_v2Parser::AnnotationTypeElementModifierContext *> Java9_v2Parser::AnnotationTypeElementDeclarationContext::annotationTypeElementModifier() {
  return getRuleContexts<Java9_v2Parser::AnnotationTypeElementModifierContext>();
}

Java9_v2Parser::AnnotationTypeElementModifierContext* Java9_v2Parser::AnnotationTypeElementDeclarationContext::annotationTypeElementModifier(size_t i) {
  return getRuleContext<Java9_v2Parser::AnnotationTypeElementModifierContext>(i);
}

Java9_v2Parser::DimsContext* Java9_v2Parser::AnnotationTypeElementDeclarationContext::dims() {
  return getRuleContext<Java9_v2Parser::DimsContext>(0);
}

Java9_v2Parser::DefaultValueContext* Java9_v2Parser::AnnotationTypeElementDeclarationContext::defaultValue() {
  return getRuleContext<Java9_v2Parser::DefaultValueContext>(0);
}


size_t Java9_v2Parser::AnnotationTypeElementDeclarationContext::getRuleIndex() const {
  return Java9_v2Parser::RuleAnnotationTypeElementDeclaration;
}

void Java9_v2Parser::AnnotationTypeElementDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotationTypeElementDeclaration(this);
}

void Java9_v2Parser::AnnotationTypeElementDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotationTypeElementDeclaration(this);
}


antlrcpp::Any Java9_v2Parser::AnnotationTypeElementDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitAnnotationTypeElementDeclaration(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::AnnotationTypeElementDeclarationContext* Java9_v2Parser::annotationTypeElementDeclaration() {
  AnnotationTypeElementDeclarationContext *_localctx = _tracker.createInstance<AnnotationTypeElementDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 234, Java9_v2Parser::RuleAnnotationTypeElementDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1504);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java9_v2Parser::ABSTRACT

    || _la == Java9_v2Parser::PUBLIC || _la == Java9_v2Parser::AT) {
      setState(1501);
      annotationTypeElementModifier();
      setState(1506);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1507);
    unannType();
    setState(1508);
    identifier();
    setState(1509);
    match(Java9_v2Parser::LPAREN);
    setState(1510);
    match(Java9_v2Parser::RPAREN);
    setState(1512);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java9_v2Parser::LBRACK

    || _la == Java9_v2Parser::AT) {
      setState(1511);
      dims();
    }
    setState(1515);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java9_v2Parser::DEFAULT) {
      setState(1514);
      defaultValue();
    }
    setState(1517);
    match(Java9_v2Parser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationTypeElementModifierContext ------------------------------------------------------------------

Java9_v2Parser::AnnotationTypeElementModifierContext::AnnotationTypeElementModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::AnnotationContext* Java9_v2Parser::AnnotationTypeElementModifierContext::annotation() {
  return getRuleContext<Java9_v2Parser::AnnotationContext>(0);
}

tree::TerminalNode* Java9_v2Parser::AnnotationTypeElementModifierContext::PUBLIC() {
  return getToken(Java9_v2Parser::PUBLIC, 0);
}

tree::TerminalNode* Java9_v2Parser::AnnotationTypeElementModifierContext::ABSTRACT() {
  return getToken(Java9_v2Parser::ABSTRACT, 0);
}


size_t Java9_v2Parser::AnnotationTypeElementModifierContext::getRuleIndex() const {
  return Java9_v2Parser::RuleAnnotationTypeElementModifier;
}

void Java9_v2Parser::AnnotationTypeElementModifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotationTypeElementModifier(this);
}

void Java9_v2Parser::AnnotationTypeElementModifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotationTypeElementModifier(this);
}


antlrcpp::Any Java9_v2Parser::AnnotationTypeElementModifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitAnnotationTypeElementModifier(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::AnnotationTypeElementModifierContext* Java9_v2Parser::annotationTypeElementModifier() {
  AnnotationTypeElementModifierContext *_localctx = _tracker.createInstance<AnnotationTypeElementModifierContext>(_ctx, getState());
  enterRule(_localctx, 236, Java9_v2Parser::RuleAnnotationTypeElementModifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1522);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Java9_v2Parser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(1519);
        annotation();
        break;
      }

      case Java9_v2Parser::PUBLIC: {
        enterOuterAlt(_localctx, 2);
        setState(1520);
        match(Java9_v2Parser::PUBLIC);
        break;
      }

      case Java9_v2Parser::ABSTRACT: {
        enterOuterAlt(_localctx, 3);
        setState(1521);
        match(Java9_v2Parser::ABSTRACT);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DefaultValueContext ------------------------------------------------------------------

Java9_v2Parser::DefaultValueContext::DefaultValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::DefaultValueContext::DEFAULT() {
  return getToken(Java9_v2Parser::DEFAULT, 0);
}

Java9_v2Parser::ElementValueContext* Java9_v2Parser::DefaultValueContext::elementValue() {
  return getRuleContext<Java9_v2Parser::ElementValueContext>(0);
}


size_t Java9_v2Parser::DefaultValueContext::getRuleIndex() const {
  return Java9_v2Parser::RuleDefaultValue;
}

void Java9_v2Parser::DefaultValueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefaultValue(this);
}

void Java9_v2Parser::DefaultValueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefaultValue(this);
}


antlrcpp::Any Java9_v2Parser::DefaultValueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitDefaultValue(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::DefaultValueContext* Java9_v2Parser::defaultValue() {
  DefaultValueContext *_localctx = _tracker.createInstance<DefaultValueContext>(_ctx, getState());
  enterRule(_localctx, 238, Java9_v2Parser::RuleDefaultValue);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1524);
    match(Java9_v2Parser::DEFAULT);
    setState(1525);
    elementValue();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationContext ------------------------------------------------------------------

Java9_v2Parser::AnnotationContext::AnnotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::AnnotationContext::getRuleIndex() const {
  return Java9_v2Parser::RuleAnnotation;
}

void Java9_v2Parser::AnnotationContext::copyFrom(AnnotationContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- Annotation3Context ------------------------------------------------------------------

Java9_v2Parser::SingleElementAnnotationContext* Java9_v2Parser::Annotation3Context::singleElementAnnotation() {
  return getRuleContext<Java9_v2Parser::SingleElementAnnotationContext>(0);
}

Java9_v2Parser::Annotation3Context::Annotation3Context(AnnotationContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::Annotation3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation3(this);
}
void Java9_v2Parser::Annotation3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation3(this);
}

antlrcpp::Any Java9_v2Parser::Annotation3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitAnnotation3(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Annotation2Context ------------------------------------------------------------------

Java9_v2Parser::MarkerAnnotationContext* Java9_v2Parser::Annotation2Context::markerAnnotation() {
  return getRuleContext<Java9_v2Parser::MarkerAnnotationContext>(0);
}

Java9_v2Parser::Annotation2Context::Annotation2Context(AnnotationContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::Annotation2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation2(this);
}
void Java9_v2Parser::Annotation2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation2(this);
}

antlrcpp::Any Java9_v2Parser::Annotation2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitAnnotation2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Annotation1Context ------------------------------------------------------------------

Java9_v2Parser::NormalAnnotationContext* Java9_v2Parser::Annotation1Context::normalAnnotation() {
  return getRuleContext<Java9_v2Parser::NormalAnnotationContext>(0);
}

Java9_v2Parser::Annotation1Context::Annotation1Context(AnnotationContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::Annotation1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation1(this);
}
void Java9_v2Parser::Annotation1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation1(this);
}

antlrcpp::Any Java9_v2Parser::Annotation1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitAnnotation1(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::AnnotationContext* Java9_v2Parser::annotation() {
  AnnotationContext *_localctx = _tracker.createInstance<AnnotationContext>(_ctx, getState());
  enterRule(_localctx, 240, Java9_v2Parser::RuleAnnotation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1530);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 154, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<AnnotationContext *>(_tracker.createInstance<Java9_v2Parser::Annotation1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(1527);
      normalAnnotation();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<AnnotationContext *>(_tracker.createInstance<Java9_v2Parser::Annotation2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(1528);
      markerAnnotation();
      break;
    }

    case 3: {
      _localctx = dynamic_cast<AnnotationContext *>(_tracker.createInstance<Java9_v2Parser::Annotation3Context>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(1529);
      singleElementAnnotation();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NormalAnnotationContext ------------------------------------------------------------------

Java9_v2Parser::NormalAnnotationContext::NormalAnnotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::NormalAnnotationContext::AT() {
  return getToken(Java9_v2Parser::AT, 0);
}

Java9_v2Parser::TypeNameContext* Java9_v2Parser::NormalAnnotationContext::typeName() {
  return getRuleContext<Java9_v2Parser::TypeNameContext>(0);
}

tree::TerminalNode* Java9_v2Parser::NormalAnnotationContext::LPAREN() {
  return getToken(Java9_v2Parser::LPAREN, 0);
}

tree::TerminalNode* Java9_v2Parser::NormalAnnotationContext::RPAREN() {
  return getToken(Java9_v2Parser::RPAREN, 0);
}

Java9_v2Parser::ElementValuePairListContext* Java9_v2Parser::NormalAnnotationContext::elementValuePairList() {
  return getRuleContext<Java9_v2Parser::ElementValuePairListContext>(0);
}


size_t Java9_v2Parser::NormalAnnotationContext::getRuleIndex() const {
  return Java9_v2Parser::RuleNormalAnnotation;
}

void Java9_v2Parser::NormalAnnotationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNormalAnnotation(this);
}

void Java9_v2Parser::NormalAnnotationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNormalAnnotation(this);
}


antlrcpp::Any Java9_v2Parser::NormalAnnotationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitNormalAnnotation(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::NormalAnnotationContext* Java9_v2Parser::normalAnnotation() {
  NormalAnnotationContext *_localctx = _tracker.createInstance<NormalAnnotationContext>(_ctx, getState());
  enterRule(_localctx, 242, Java9_v2Parser::RuleNormalAnnotation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1532);
    match(Java9_v2Parser::AT);
    setState(1533);
    typeName();
    setState(1534);
    match(Java9_v2Parser::LPAREN);
    setState(1536);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << Java9_v2Parser::T__0)
      | (1ULL << Java9_v2Parser::T__1)
      | (1ULL << Java9_v2Parser::T__2)
      | (1ULL << Java9_v2Parser::T__3)
      | (1ULL << Java9_v2Parser::T__4)
      | (1ULL << Java9_v2Parser::T__5)
      | (1ULL << Java9_v2Parser::T__6)
      | (1ULL << Java9_v2Parser::T__7)
      | (1ULL << Java9_v2Parser::T__8))) != 0) || _la == Java9_v2Parser::Identifier) {
      setState(1535);
      elementValuePairList();
    }
    setState(1538);
    match(Java9_v2Parser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementValuePairListContext ------------------------------------------------------------------

Java9_v2Parser::ElementValuePairListContext::ElementValuePairListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Java9_v2Parser::ElementValuePairContext *> Java9_v2Parser::ElementValuePairListContext::elementValuePair() {
  return getRuleContexts<Java9_v2Parser::ElementValuePairContext>();
}

Java9_v2Parser::ElementValuePairContext* Java9_v2Parser::ElementValuePairListContext::elementValuePair(size_t i) {
  return getRuleContext<Java9_v2Parser::ElementValuePairContext>(i);
}

std::vector<tree::TerminalNode *> Java9_v2Parser::ElementValuePairListContext::COMMA() {
  return getTokens(Java9_v2Parser::COMMA);
}

tree::TerminalNode* Java9_v2Parser::ElementValuePairListContext::COMMA(size_t i) {
  return getToken(Java9_v2Parser::COMMA, i);
}


size_t Java9_v2Parser::ElementValuePairListContext::getRuleIndex() const {
  return Java9_v2Parser::RuleElementValuePairList;
}

void Java9_v2Parser::ElementValuePairListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElementValuePairList(this);
}

void Java9_v2Parser::ElementValuePairListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElementValuePairList(this);
}


antlrcpp::Any Java9_v2Parser::ElementValuePairListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitElementValuePairList(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::ElementValuePairListContext* Java9_v2Parser::elementValuePairList() {
  ElementValuePairListContext *_localctx = _tracker.createInstance<ElementValuePairListContext>(_ctx, getState());
  enterRule(_localctx, 244, Java9_v2Parser::RuleElementValuePairList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1540);
    elementValuePair();
    setState(1545);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java9_v2Parser::COMMA) {
      setState(1541);
      match(Java9_v2Parser::COMMA);
      setState(1542);
      elementValuePair();
      setState(1547);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementValuePairContext ------------------------------------------------------------------

Java9_v2Parser::ElementValuePairContext::ElementValuePairContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::ElementValuePairContext::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

tree::TerminalNode* Java9_v2Parser::ElementValuePairContext::ASSIGN() {
  return getToken(Java9_v2Parser::ASSIGN, 0);
}

Java9_v2Parser::ElementValueContext* Java9_v2Parser::ElementValuePairContext::elementValue() {
  return getRuleContext<Java9_v2Parser::ElementValueContext>(0);
}


size_t Java9_v2Parser::ElementValuePairContext::getRuleIndex() const {
  return Java9_v2Parser::RuleElementValuePair;
}

void Java9_v2Parser::ElementValuePairContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElementValuePair(this);
}

void Java9_v2Parser::ElementValuePairContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElementValuePair(this);
}


antlrcpp::Any Java9_v2Parser::ElementValuePairContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitElementValuePair(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::ElementValuePairContext* Java9_v2Parser::elementValuePair() {
  ElementValuePairContext *_localctx = _tracker.createInstance<ElementValuePairContext>(_ctx, getState());
  enterRule(_localctx, 246, Java9_v2Parser::RuleElementValuePair);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1548);
    identifier();
    setState(1549);
    match(Java9_v2Parser::ASSIGN);
    setState(1550);
    elementValue();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementValueContext ------------------------------------------------------------------

Java9_v2Parser::ElementValueContext::ElementValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::ElementValueContext::getRuleIndex() const {
  return Java9_v2Parser::RuleElementValue;
}

void Java9_v2Parser::ElementValueContext::copyFrom(ElementValueContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ElementValue2Context ------------------------------------------------------------------

Java9_v2Parser::ElementValueArrayInitializerContext* Java9_v2Parser::ElementValue2Context::elementValueArrayInitializer() {
  return getRuleContext<Java9_v2Parser::ElementValueArrayInitializerContext>(0);
}

Java9_v2Parser::ElementValue2Context::ElementValue2Context(ElementValueContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ElementValue2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElementValue2(this);
}
void Java9_v2Parser::ElementValue2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElementValue2(this);
}

antlrcpp::Any Java9_v2Parser::ElementValue2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitElementValue2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ElementValue1Context ------------------------------------------------------------------

Java9_v2Parser::ConditionalExpressionContext* Java9_v2Parser::ElementValue1Context::conditionalExpression() {
  return getRuleContext<Java9_v2Parser::ConditionalExpressionContext>(0);
}

Java9_v2Parser::ElementValue1Context::ElementValue1Context(ElementValueContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ElementValue1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElementValue1(this);
}
void Java9_v2Parser::ElementValue1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElementValue1(this);
}

antlrcpp::Any Java9_v2Parser::ElementValue1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitElementValue1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ElementValu3Context ------------------------------------------------------------------

Java9_v2Parser::AnnotationContext* Java9_v2Parser::ElementValu3Context::annotation() {
  return getRuleContext<Java9_v2Parser::AnnotationContext>(0);
}

Java9_v2Parser::ElementValu3Context::ElementValu3Context(ElementValueContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ElementValu3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElementValu3(this);
}
void Java9_v2Parser::ElementValu3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElementValu3(this);
}

antlrcpp::Any Java9_v2Parser::ElementValu3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitElementValu3(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::ElementValueContext* Java9_v2Parser::elementValue() {
  ElementValueContext *_localctx = _tracker.createInstance<ElementValueContext>(_ctx, getState());
  enterRule(_localctx, 248, Java9_v2Parser::RuleElementValue);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1555);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 157, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<ElementValueContext *>(_tracker.createInstance<Java9_v2Parser::ElementValue1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(1552);
      conditionalExpression();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<ElementValueContext *>(_tracker.createInstance<Java9_v2Parser::ElementValue2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(1553);
      elementValueArrayInitializer();
      break;
    }

    case 3: {
      _localctx = dynamic_cast<ElementValueContext *>(_tracker.createInstance<Java9_v2Parser::ElementValu3Context>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(1554);
      annotation();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementValueArrayInitializerContext ------------------------------------------------------------------

Java9_v2Parser::ElementValueArrayInitializerContext::ElementValueArrayInitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::ElementValueArrayInitializerContext::LBRACE() {
  return getToken(Java9_v2Parser::LBRACE, 0);
}

tree::TerminalNode* Java9_v2Parser::ElementValueArrayInitializerContext::RBRACE() {
  return getToken(Java9_v2Parser::RBRACE, 0);
}

Java9_v2Parser::ElementValueListContext* Java9_v2Parser::ElementValueArrayInitializerContext::elementValueList() {
  return getRuleContext<Java9_v2Parser::ElementValueListContext>(0);
}

tree::TerminalNode* Java9_v2Parser::ElementValueArrayInitializerContext::COMMA() {
  return getToken(Java9_v2Parser::COMMA, 0);
}


size_t Java9_v2Parser::ElementValueArrayInitializerContext::getRuleIndex() const {
  return Java9_v2Parser::RuleElementValueArrayInitializer;
}

void Java9_v2Parser::ElementValueArrayInitializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElementValueArrayInitializer(this);
}

void Java9_v2Parser::ElementValueArrayInitializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElementValueArrayInitializer(this);
}


antlrcpp::Any Java9_v2Parser::ElementValueArrayInitializerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitElementValueArrayInitializer(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::ElementValueArrayInitializerContext* Java9_v2Parser::elementValueArrayInitializer() {
  ElementValueArrayInitializerContext *_localctx = _tracker.createInstance<ElementValueArrayInitializerContext>(_ctx, getState());
  enterRule(_localctx, 250, Java9_v2Parser::RuleElementValueArrayInitializer);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1557);
    match(Java9_v2Parser::LBRACE);
    setState(1559);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << Java9_v2Parser::T__0)
      | (1ULL << Java9_v2Parser::T__1)
      | (1ULL << Java9_v2Parser::T__2)
      | (1ULL << Java9_v2Parser::T__3)
      | (1ULL << Java9_v2Parser::T__4)
      | (1ULL << Java9_v2Parser::T__5)
      | (1ULL << Java9_v2Parser::T__6)
      | (1ULL << Java9_v2Parser::T__7)
      | (1ULL << Java9_v2Parser::T__8)
      | (1ULL << Java9_v2Parser::BOOLEAN)
      | (1ULL << Java9_v2Parser::BYTE)
      | (1ULL << Java9_v2Parser::CHAR)
      | (1ULL << Java9_v2Parser::DOUBLE)
      | (1ULL << Java9_v2Parser::FLOAT)
      | (1ULL << Java9_v2Parser::INT)
      | (1ULL << Java9_v2Parser::LONG)
      | (1ULL << Java9_v2Parser::NEW)
      | (1ULL << Java9_v2Parser::SHORT)
      | (1ULL << Java9_v2Parser::SUPER)
      | (1ULL << Java9_v2Parser::THIS)
      | (1ULL << Java9_v2Parser::VOID)
      | (1ULL << Java9_v2Parser::IntegerLiteral)
      | (1ULL << Java9_v2Parser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (Java9_v2Parser::BooleanLiteral - 64))
      | (1ULL << (Java9_v2Parser::CharacterLiteral - 64))
      | (1ULL << (Java9_v2Parser::StringLiteral - 64))
      | (1ULL << (Java9_v2Parser::NullLiteral - 64))
      | (1ULL << (Java9_v2Parser::LPAREN - 64))
      | (1ULL << (Java9_v2Parser::LBRACE - 64))
      | (1ULL << (Java9_v2Parser::AT - 64))
      | (1ULL << (Java9_v2Parser::BANG - 64))
      | (1ULL << (Java9_v2Parser::TILDE - 64))
      | (1ULL << (Java9_v2Parser::INC - 64))
      | (1ULL << (Java9_v2Parser::DEC - 64))
      | (1ULL << (Java9_v2Parser::ADD - 64))
      | (1ULL << (Java9_v2Parser::SUB - 64))
      | (1ULL << (Java9_v2Parser::Identifier - 64)))) != 0)) {
      setState(1558);
      elementValueList();
    }
    setState(1562);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java9_v2Parser::COMMA) {
      setState(1561);
      match(Java9_v2Parser::COMMA);
    }
    setState(1564);
    match(Java9_v2Parser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementValueListContext ------------------------------------------------------------------

Java9_v2Parser::ElementValueListContext::ElementValueListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Java9_v2Parser::ElementValueContext *> Java9_v2Parser::ElementValueListContext::elementValue() {
  return getRuleContexts<Java9_v2Parser::ElementValueContext>();
}

Java9_v2Parser::ElementValueContext* Java9_v2Parser::ElementValueListContext::elementValue(size_t i) {
  return getRuleContext<Java9_v2Parser::ElementValueContext>(i);
}

std::vector<tree::TerminalNode *> Java9_v2Parser::ElementValueListContext::COMMA() {
  return getTokens(Java9_v2Parser::COMMA);
}

tree::TerminalNode* Java9_v2Parser::ElementValueListContext::COMMA(size_t i) {
  return getToken(Java9_v2Parser::COMMA, i);
}


size_t Java9_v2Parser::ElementValueListContext::getRuleIndex() const {
  return Java9_v2Parser::RuleElementValueList;
}

void Java9_v2Parser::ElementValueListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElementValueList(this);
}

void Java9_v2Parser::ElementValueListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElementValueList(this);
}


antlrcpp::Any Java9_v2Parser::ElementValueListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitElementValueList(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::ElementValueListContext* Java9_v2Parser::elementValueList() {
  ElementValueListContext *_localctx = _tracker.createInstance<ElementValueListContext>(_ctx, getState());
  enterRule(_localctx, 252, Java9_v2Parser::RuleElementValueList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1566);
    elementValue();
    setState(1571);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 160, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1567);
        match(Java9_v2Parser::COMMA);
        setState(1568);
        elementValue(); 
      }
      setState(1573);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 160, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MarkerAnnotationContext ------------------------------------------------------------------

Java9_v2Parser::MarkerAnnotationContext::MarkerAnnotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::MarkerAnnotationContext::AT() {
  return getToken(Java9_v2Parser::AT, 0);
}

Java9_v2Parser::TypeNameContext* Java9_v2Parser::MarkerAnnotationContext::typeName() {
  return getRuleContext<Java9_v2Parser::TypeNameContext>(0);
}


size_t Java9_v2Parser::MarkerAnnotationContext::getRuleIndex() const {
  return Java9_v2Parser::RuleMarkerAnnotation;
}

void Java9_v2Parser::MarkerAnnotationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMarkerAnnotation(this);
}

void Java9_v2Parser::MarkerAnnotationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMarkerAnnotation(this);
}


antlrcpp::Any Java9_v2Parser::MarkerAnnotationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitMarkerAnnotation(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::MarkerAnnotationContext* Java9_v2Parser::markerAnnotation() {
  MarkerAnnotationContext *_localctx = _tracker.createInstance<MarkerAnnotationContext>(_ctx, getState());
  enterRule(_localctx, 254, Java9_v2Parser::RuleMarkerAnnotation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1574);
    match(Java9_v2Parser::AT);
    setState(1575);
    typeName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SingleElementAnnotationContext ------------------------------------------------------------------

Java9_v2Parser::SingleElementAnnotationContext::SingleElementAnnotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::SingleElementAnnotationContext::AT() {
  return getToken(Java9_v2Parser::AT, 0);
}

Java9_v2Parser::TypeNameContext* Java9_v2Parser::SingleElementAnnotationContext::typeName() {
  return getRuleContext<Java9_v2Parser::TypeNameContext>(0);
}

tree::TerminalNode* Java9_v2Parser::SingleElementAnnotationContext::LPAREN() {
  return getToken(Java9_v2Parser::LPAREN, 0);
}

Java9_v2Parser::ElementValueContext* Java9_v2Parser::SingleElementAnnotationContext::elementValue() {
  return getRuleContext<Java9_v2Parser::ElementValueContext>(0);
}

tree::TerminalNode* Java9_v2Parser::SingleElementAnnotationContext::RPAREN() {
  return getToken(Java9_v2Parser::RPAREN, 0);
}


size_t Java9_v2Parser::SingleElementAnnotationContext::getRuleIndex() const {
  return Java9_v2Parser::RuleSingleElementAnnotation;
}

void Java9_v2Parser::SingleElementAnnotationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSingleElementAnnotation(this);
}

void Java9_v2Parser::SingleElementAnnotationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSingleElementAnnotation(this);
}


antlrcpp::Any Java9_v2Parser::SingleElementAnnotationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitSingleElementAnnotation(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::SingleElementAnnotationContext* Java9_v2Parser::singleElementAnnotation() {
  SingleElementAnnotationContext *_localctx = _tracker.createInstance<SingleElementAnnotationContext>(_ctx, getState());
  enterRule(_localctx, 256, Java9_v2Parser::RuleSingleElementAnnotation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1577);
    match(Java9_v2Parser::AT);
    setState(1578);
    typeName();
    setState(1579);
    match(Java9_v2Parser::LPAREN);
    setState(1580);
    elementValue();
    setState(1581);
    match(Java9_v2Parser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayInitializerContext ------------------------------------------------------------------

Java9_v2Parser::ArrayInitializerContext::ArrayInitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::ArrayInitializerContext::LBRACE() {
  return getToken(Java9_v2Parser::LBRACE, 0);
}

tree::TerminalNode* Java9_v2Parser::ArrayInitializerContext::RBRACE() {
  return getToken(Java9_v2Parser::RBRACE, 0);
}

Java9_v2Parser::VariableInitializerListContext* Java9_v2Parser::ArrayInitializerContext::variableInitializerList() {
  return getRuleContext<Java9_v2Parser::VariableInitializerListContext>(0);
}

tree::TerminalNode* Java9_v2Parser::ArrayInitializerContext::COMMA() {
  return getToken(Java9_v2Parser::COMMA, 0);
}


size_t Java9_v2Parser::ArrayInitializerContext::getRuleIndex() const {
  return Java9_v2Parser::RuleArrayInitializer;
}

void Java9_v2Parser::ArrayInitializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayInitializer(this);
}

void Java9_v2Parser::ArrayInitializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayInitializer(this);
}


antlrcpp::Any Java9_v2Parser::ArrayInitializerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitArrayInitializer(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::ArrayInitializerContext* Java9_v2Parser::arrayInitializer() {
  ArrayInitializerContext *_localctx = _tracker.createInstance<ArrayInitializerContext>(_ctx, getState());
  enterRule(_localctx, 258, Java9_v2Parser::RuleArrayInitializer);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1583);
    match(Java9_v2Parser::LBRACE);
    setState(1585);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << Java9_v2Parser::T__0)
      | (1ULL << Java9_v2Parser::T__1)
      | (1ULL << Java9_v2Parser::T__2)
      | (1ULL << Java9_v2Parser::T__3)
      | (1ULL << Java9_v2Parser::T__4)
      | (1ULL << Java9_v2Parser::T__5)
      | (1ULL << Java9_v2Parser::T__6)
      | (1ULL << Java9_v2Parser::T__7)
      | (1ULL << Java9_v2Parser::T__8)
      | (1ULL << Java9_v2Parser::BOOLEAN)
      | (1ULL << Java9_v2Parser::BYTE)
      | (1ULL << Java9_v2Parser::CHAR)
      | (1ULL << Java9_v2Parser::DOUBLE)
      | (1ULL << Java9_v2Parser::FLOAT)
      | (1ULL << Java9_v2Parser::INT)
      | (1ULL << Java9_v2Parser::LONG)
      | (1ULL << Java9_v2Parser::NEW)
      | (1ULL << Java9_v2Parser::SHORT)
      | (1ULL << Java9_v2Parser::SUPER)
      | (1ULL << Java9_v2Parser::THIS)
      | (1ULL << Java9_v2Parser::VOID)
      | (1ULL << Java9_v2Parser::IntegerLiteral)
      | (1ULL << Java9_v2Parser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (Java9_v2Parser::BooleanLiteral - 64))
      | (1ULL << (Java9_v2Parser::CharacterLiteral - 64))
      | (1ULL << (Java9_v2Parser::StringLiteral - 64))
      | (1ULL << (Java9_v2Parser::NullLiteral - 64))
      | (1ULL << (Java9_v2Parser::LPAREN - 64))
      | (1ULL << (Java9_v2Parser::LBRACE - 64))
      | (1ULL << (Java9_v2Parser::AT - 64))
      | (1ULL << (Java9_v2Parser::BANG - 64))
      | (1ULL << (Java9_v2Parser::TILDE - 64))
      | (1ULL << (Java9_v2Parser::INC - 64))
      | (1ULL << (Java9_v2Parser::DEC - 64))
      | (1ULL << (Java9_v2Parser::ADD - 64))
      | (1ULL << (Java9_v2Parser::SUB - 64))
      | (1ULL << (Java9_v2Parser::Identifier - 64)))) != 0)) {
      setState(1584);
      variableInitializerList();
    }
    setState(1588);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java9_v2Parser::COMMA) {
      setState(1587);
      match(Java9_v2Parser::COMMA);
    }
    setState(1590);
    match(Java9_v2Parser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableInitializerListContext ------------------------------------------------------------------

Java9_v2Parser::VariableInitializerListContext::VariableInitializerListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Java9_v2Parser::VariableInitializerContext *> Java9_v2Parser::VariableInitializerListContext::variableInitializer() {
  return getRuleContexts<Java9_v2Parser::VariableInitializerContext>();
}

Java9_v2Parser::VariableInitializerContext* Java9_v2Parser::VariableInitializerListContext::variableInitializer(size_t i) {
  return getRuleContext<Java9_v2Parser::VariableInitializerContext>(i);
}

std::vector<tree::TerminalNode *> Java9_v2Parser::VariableInitializerListContext::COMMA() {
  return getTokens(Java9_v2Parser::COMMA);
}

tree::TerminalNode* Java9_v2Parser::VariableInitializerListContext::COMMA(size_t i) {
  return getToken(Java9_v2Parser::COMMA, i);
}


size_t Java9_v2Parser::VariableInitializerListContext::getRuleIndex() const {
  return Java9_v2Parser::RuleVariableInitializerList;
}

void Java9_v2Parser::VariableInitializerListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariableInitializerList(this);
}

void Java9_v2Parser::VariableInitializerListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariableInitializerList(this);
}


antlrcpp::Any Java9_v2Parser::VariableInitializerListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitVariableInitializerList(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::VariableInitializerListContext* Java9_v2Parser::variableInitializerList() {
  VariableInitializerListContext *_localctx = _tracker.createInstance<VariableInitializerListContext>(_ctx, getState());
  enterRule(_localctx, 260, Java9_v2Parser::RuleVariableInitializerList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1592);
    variableInitializer();
    setState(1597);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 163, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1593);
        match(Java9_v2Parser::COMMA);
        setState(1594);
        variableInitializer(); 
      }
      setState(1599);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 163, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockContext ------------------------------------------------------------------

Java9_v2Parser::BlockContext::BlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::BlockContext::LBRACE() {
  return getToken(Java9_v2Parser::LBRACE, 0);
}

tree::TerminalNode* Java9_v2Parser::BlockContext::RBRACE() {
  return getToken(Java9_v2Parser::RBRACE, 0);
}

Java9_v2Parser::BlockStatementsContext* Java9_v2Parser::BlockContext::blockStatements() {
  return getRuleContext<Java9_v2Parser::BlockStatementsContext>(0);
}


size_t Java9_v2Parser::BlockContext::getRuleIndex() const {
  return Java9_v2Parser::RuleBlock;
}

void Java9_v2Parser::BlockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlock(this);
}

void Java9_v2Parser::BlockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlock(this);
}


antlrcpp::Any Java9_v2Parser::BlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitBlock(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::BlockContext* Java9_v2Parser::block() {
  BlockContext *_localctx = _tracker.createInstance<BlockContext>(_ctx, getState());
  enterRule(_localctx, 262, Java9_v2Parser::RuleBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1600);
    match(Java9_v2Parser::LBRACE);
    setState(1602);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << Java9_v2Parser::T__0)
      | (1ULL << Java9_v2Parser::T__1)
      | (1ULL << Java9_v2Parser::T__2)
      | (1ULL << Java9_v2Parser::T__3)
      | (1ULL << Java9_v2Parser::T__4)
      | (1ULL << Java9_v2Parser::T__5)
      | (1ULL << Java9_v2Parser::T__6)
      | (1ULL << Java9_v2Parser::T__7)
      | (1ULL << Java9_v2Parser::T__8)
      | (1ULL << Java9_v2Parser::ABSTRACT)
      | (1ULL << Java9_v2Parser::ASSERT)
      | (1ULL << Java9_v2Parser::BOOLEAN)
      | (1ULL << Java9_v2Parser::BREAK)
      | (1ULL << Java9_v2Parser::BYTE)
      | (1ULL << Java9_v2Parser::CHAR)
      | (1ULL << Java9_v2Parser::CLASS)
      | (1ULL << Java9_v2Parser::CONTINUE)
      | (1ULL << Java9_v2Parser::DO)
      | (1ULL << Java9_v2Parser::DOUBLE)
      | (1ULL << Java9_v2Parser::ENUM)
      | (1ULL << Java9_v2Parser::FINAL)
      | (1ULL << Java9_v2Parser::FLOAT)
      | (1ULL << Java9_v2Parser::FOR)
      | (1ULL << Java9_v2Parser::IF)
      | (1ULL << Java9_v2Parser::INT)
      | (1ULL << Java9_v2Parser::LONG)
      | (1ULL << Java9_v2Parser::NEW)
      | (1ULL << Java9_v2Parser::PRIVATE)
      | (1ULL << Java9_v2Parser::PROTECTED)
      | (1ULL << Java9_v2Parser::PUBLIC)
      | (1ULL << Java9_v2Parser::RETURN)
      | (1ULL << Java9_v2Parser::SHORT)
      | (1ULL << Java9_v2Parser::STATIC)
      | (1ULL << Java9_v2Parser::STRICTFP)
      | (1ULL << Java9_v2Parser::SUPER)
      | (1ULL << Java9_v2Parser::SWITCH)
      | (1ULL << Java9_v2Parser::SYNCHRONIZED)
      | (1ULL << Java9_v2Parser::THIS)
      | (1ULL << Java9_v2Parser::THROW)
      | (1ULL << Java9_v2Parser::TRY)
      | (1ULL << Java9_v2Parser::VOID)
      | (1ULL << Java9_v2Parser::WHILE)
      | (1ULL << Java9_v2Parser::IntegerLiteral)
      | (1ULL << Java9_v2Parser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (Java9_v2Parser::BooleanLiteral - 64))
      | (1ULL << (Java9_v2Parser::CharacterLiteral - 64))
      | (1ULL << (Java9_v2Parser::StringLiteral - 64))
      | (1ULL << (Java9_v2Parser::NullLiteral - 64))
      | (1ULL << (Java9_v2Parser::LPAREN - 64))
      | (1ULL << (Java9_v2Parser::LBRACE - 64))
      | (1ULL << (Java9_v2Parser::SEMI - 64))
      | (1ULL << (Java9_v2Parser::AT - 64))
      | (1ULL << (Java9_v2Parser::INC - 64))
      | (1ULL << (Java9_v2Parser::DEC - 64))
      | (1ULL << (Java9_v2Parser::Identifier - 64)))) != 0)) {
      setState(1601);
      blockStatements();
    }
    setState(1604);
    match(Java9_v2Parser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockStatementsContext ------------------------------------------------------------------

Java9_v2Parser::BlockStatementsContext::BlockStatementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Java9_v2Parser::BlockStatementContext *> Java9_v2Parser::BlockStatementsContext::blockStatement() {
  return getRuleContexts<Java9_v2Parser::BlockStatementContext>();
}

Java9_v2Parser::BlockStatementContext* Java9_v2Parser::BlockStatementsContext::blockStatement(size_t i) {
  return getRuleContext<Java9_v2Parser::BlockStatementContext>(i);
}


size_t Java9_v2Parser::BlockStatementsContext::getRuleIndex() const {
  return Java9_v2Parser::RuleBlockStatements;
}

void Java9_v2Parser::BlockStatementsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlockStatements(this);
}

void Java9_v2Parser::BlockStatementsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlockStatements(this);
}


antlrcpp::Any Java9_v2Parser::BlockStatementsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitBlockStatements(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::BlockStatementsContext* Java9_v2Parser::blockStatements() {
  BlockStatementsContext *_localctx = _tracker.createInstance<BlockStatementsContext>(_ctx, getState());
  enterRule(_localctx, 264, Java9_v2Parser::RuleBlockStatements);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1607); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1606);
      blockStatement();
      setState(1609); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << Java9_v2Parser::T__0)
      | (1ULL << Java9_v2Parser::T__1)
      | (1ULL << Java9_v2Parser::T__2)
      | (1ULL << Java9_v2Parser::T__3)
      | (1ULL << Java9_v2Parser::T__4)
      | (1ULL << Java9_v2Parser::T__5)
      | (1ULL << Java9_v2Parser::T__6)
      | (1ULL << Java9_v2Parser::T__7)
      | (1ULL << Java9_v2Parser::T__8)
      | (1ULL << Java9_v2Parser::ABSTRACT)
      | (1ULL << Java9_v2Parser::ASSERT)
      | (1ULL << Java9_v2Parser::BOOLEAN)
      | (1ULL << Java9_v2Parser::BREAK)
      | (1ULL << Java9_v2Parser::BYTE)
      | (1ULL << Java9_v2Parser::CHAR)
      | (1ULL << Java9_v2Parser::CLASS)
      | (1ULL << Java9_v2Parser::CONTINUE)
      | (1ULL << Java9_v2Parser::DO)
      | (1ULL << Java9_v2Parser::DOUBLE)
      | (1ULL << Java9_v2Parser::ENUM)
      | (1ULL << Java9_v2Parser::FINAL)
      | (1ULL << Java9_v2Parser::FLOAT)
      | (1ULL << Java9_v2Parser::FOR)
      | (1ULL << Java9_v2Parser::IF)
      | (1ULL << Java9_v2Parser::INT)
      | (1ULL << Java9_v2Parser::LONG)
      | (1ULL << Java9_v2Parser::NEW)
      | (1ULL << Java9_v2Parser::PRIVATE)
      | (1ULL << Java9_v2Parser::PROTECTED)
      | (1ULL << Java9_v2Parser::PUBLIC)
      | (1ULL << Java9_v2Parser::RETURN)
      | (1ULL << Java9_v2Parser::SHORT)
      | (1ULL << Java9_v2Parser::STATIC)
      | (1ULL << Java9_v2Parser::STRICTFP)
      | (1ULL << Java9_v2Parser::SUPER)
      | (1ULL << Java9_v2Parser::SWITCH)
      | (1ULL << Java9_v2Parser::SYNCHRONIZED)
      | (1ULL << Java9_v2Parser::THIS)
      | (1ULL << Java9_v2Parser::THROW)
      | (1ULL << Java9_v2Parser::TRY)
      | (1ULL << Java9_v2Parser::VOID)
      | (1ULL << Java9_v2Parser::WHILE)
      | (1ULL << Java9_v2Parser::IntegerLiteral)
      | (1ULL << Java9_v2Parser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (Java9_v2Parser::BooleanLiteral - 64))
      | (1ULL << (Java9_v2Parser::CharacterLiteral - 64))
      | (1ULL << (Java9_v2Parser::StringLiteral - 64))
      | (1ULL << (Java9_v2Parser::NullLiteral - 64))
      | (1ULL << (Java9_v2Parser::LPAREN - 64))
      | (1ULL << (Java9_v2Parser::LBRACE - 64))
      | (1ULL << (Java9_v2Parser::SEMI - 64))
      | (1ULL << (Java9_v2Parser::AT - 64))
      | (1ULL << (Java9_v2Parser::INC - 64))
      | (1ULL << (Java9_v2Parser::DEC - 64))
      | (1ULL << (Java9_v2Parser::Identifier - 64)))) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockStatementContext ------------------------------------------------------------------

Java9_v2Parser::BlockStatementContext::BlockStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::BlockStatementContext::getRuleIndex() const {
  return Java9_v2Parser::RuleBlockStatement;
}

void Java9_v2Parser::BlockStatementContext::copyFrom(BlockStatementContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- BlockStatement1Context ------------------------------------------------------------------

Java9_v2Parser::LocalVariableDeclarationStatementContext* Java9_v2Parser::BlockStatement1Context::localVariableDeclarationStatement() {
  return getRuleContext<Java9_v2Parser::LocalVariableDeclarationStatementContext>(0);
}

Java9_v2Parser::BlockStatement1Context::BlockStatement1Context(BlockStatementContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::BlockStatement1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlockStatement1(this);
}
void Java9_v2Parser::BlockStatement1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlockStatement1(this);
}

antlrcpp::Any Java9_v2Parser::BlockStatement1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitBlockStatement1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- BlockStatement3Context ------------------------------------------------------------------

Java9_v2Parser::StatementContext* Java9_v2Parser::BlockStatement3Context::statement() {
  return getRuleContext<Java9_v2Parser::StatementContext>(0);
}

Java9_v2Parser::BlockStatement3Context::BlockStatement3Context(BlockStatementContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::BlockStatement3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlockStatement3(this);
}
void Java9_v2Parser::BlockStatement3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlockStatement3(this);
}

antlrcpp::Any Java9_v2Parser::BlockStatement3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitBlockStatement3(this);
  else
    return visitor->visitChildren(this);
}
//----------------- BlockStatement2Context ------------------------------------------------------------------

Java9_v2Parser::ClassDeclarationContext* Java9_v2Parser::BlockStatement2Context::classDeclaration() {
  return getRuleContext<Java9_v2Parser::ClassDeclarationContext>(0);
}

Java9_v2Parser::BlockStatement2Context::BlockStatement2Context(BlockStatementContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::BlockStatement2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlockStatement2(this);
}
void Java9_v2Parser::BlockStatement2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlockStatement2(this);
}

antlrcpp::Any Java9_v2Parser::BlockStatement2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitBlockStatement2(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::BlockStatementContext* Java9_v2Parser::blockStatement() {
  BlockStatementContext *_localctx = _tracker.createInstance<BlockStatementContext>(_ctx, getState());
  enterRule(_localctx, 266, Java9_v2Parser::RuleBlockStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1614);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 166, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<BlockStatementContext *>(_tracker.createInstance<Java9_v2Parser::BlockStatement1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(1611);
      localVariableDeclarationStatement();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<BlockStatementContext *>(_tracker.createInstance<Java9_v2Parser::BlockStatement2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(1612);
      classDeclaration();
      break;
    }

    case 3: {
      _localctx = dynamic_cast<BlockStatementContext *>(_tracker.createInstance<Java9_v2Parser::BlockStatement3Context>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(1613);
      statement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LocalVariableDeclarationStatementContext ------------------------------------------------------------------

Java9_v2Parser::LocalVariableDeclarationStatementContext::LocalVariableDeclarationStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::LocalVariableDeclarationContext* Java9_v2Parser::LocalVariableDeclarationStatementContext::localVariableDeclaration() {
  return getRuleContext<Java9_v2Parser::LocalVariableDeclarationContext>(0);
}

tree::TerminalNode* Java9_v2Parser::LocalVariableDeclarationStatementContext::SEMI() {
  return getToken(Java9_v2Parser::SEMI, 0);
}


size_t Java9_v2Parser::LocalVariableDeclarationStatementContext::getRuleIndex() const {
  return Java9_v2Parser::RuleLocalVariableDeclarationStatement;
}

void Java9_v2Parser::LocalVariableDeclarationStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLocalVariableDeclarationStatement(this);
}

void Java9_v2Parser::LocalVariableDeclarationStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLocalVariableDeclarationStatement(this);
}


antlrcpp::Any Java9_v2Parser::LocalVariableDeclarationStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitLocalVariableDeclarationStatement(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::LocalVariableDeclarationStatementContext* Java9_v2Parser::localVariableDeclarationStatement() {
  LocalVariableDeclarationStatementContext *_localctx = _tracker.createInstance<LocalVariableDeclarationStatementContext>(_ctx, getState());
  enterRule(_localctx, 268, Java9_v2Parser::RuleLocalVariableDeclarationStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1616);
    localVariableDeclaration();
    setState(1617);
    match(Java9_v2Parser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LocalVariableDeclarationContext ------------------------------------------------------------------

Java9_v2Parser::LocalVariableDeclarationContext::LocalVariableDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::UnannTypeContext* Java9_v2Parser::LocalVariableDeclarationContext::unannType() {
  return getRuleContext<Java9_v2Parser::UnannTypeContext>(0);
}

Java9_v2Parser::VariableDeclaratorListContext* Java9_v2Parser::LocalVariableDeclarationContext::variableDeclaratorList() {
  return getRuleContext<Java9_v2Parser::VariableDeclaratorListContext>(0);
}

std::vector<Java9_v2Parser::VariableModifierContext *> Java9_v2Parser::LocalVariableDeclarationContext::variableModifier() {
  return getRuleContexts<Java9_v2Parser::VariableModifierContext>();
}

Java9_v2Parser::VariableModifierContext* Java9_v2Parser::LocalVariableDeclarationContext::variableModifier(size_t i) {
  return getRuleContext<Java9_v2Parser::VariableModifierContext>(i);
}


size_t Java9_v2Parser::LocalVariableDeclarationContext::getRuleIndex() const {
  return Java9_v2Parser::RuleLocalVariableDeclaration;
}

void Java9_v2Parser::LocalVariableDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLocalVariableDeclaration(this);
}

void Java9_v2Parser::LocalVariableDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLocalVariableDeclaration(this);
}


antlrcpp::Any Java9_v2Parser::LocalVariableDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitLocalVariableDeclaration(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::LocalVariableDeclarationContext* Java9_v2Parser::localVariableDeclaration() {
  LocalVariableDeclarationContext *_localctx = _tracker.createInstance<LocalVariableDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 270, Java9_v2Parser::RuleLocalVariableDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1622);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java9_v2Parser::FINAL

    || _la == Java9_v2Parser::AT) {
      setState(1619);
      variableModifier();
      setState(1624);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1625);
    unannType();
    setState(1626);
    variableDeclaratorList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementContext ------------------------------------------------------------------

Java9_v2Parser::StatementContext::StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::StatementContext::getRuleIndex() const {
  return Java9_v2Parser::RuleStatement;
}

void Java9_v2Parser::StatementContext::copyFrom(StatementContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- Statement5Context ------------------------------------------------------------------

Java9_v2Parser::WhileStatementContext* Java9_v2Parser::Statement5Context::whileStatement() {
  return getRuleContext<Java9_v2Parser::WhileStatementContext>(0);
}

Java9_v2Parser::Statement5Context::Statement5Context(StatementContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::Statement5Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatement5(this);
}
void Java9_v2Parser::Statement5Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatement5(this);
}

antlrcpp::Any Java9_v2Parser::Statement5Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitStatement5(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Statement6Context ------------------------------------------------------------------

Java9_v2Parser::ForStatementContext* Java9_v2Parser::Statement6Context::forStatement() {
  return getRuleContext<Java9_v2Parser::ForStatementContext>(0);
}

Java9_v2Parser::Statement6Context::Statement6Context(StatementContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::Statement6Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatement6(this);
}
void Java9_v2Parser::Statement6Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatement6(this);
}

antlrcpp::Any Java9_v2Parser::Statement6Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitStatement6(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Statement3Context ------------------------------------------------------------------

Java9_v2Parser::IfThenStatementContext* Java9_v2Parser::Statement3Context::ifThenStatement() {
  return getRuleContext<Java9_v2Parser::IfThenStatementContext>(0);
}

Java9_v2Parser::Statement3Context::Statement3Context(StatementContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::Statement3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatement3(this);
}
void Java9_v2Parser::Statement3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatement3(this);
}

antlrcpp::Any Java9_v2Parser::Statement3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitStatement3(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Statement4Context ------------------------------------------------------------------

Java9_v2Parser::IfThenElseStatementContext* Java9_v2Parser::Statement4Context::ifThenElseStatement() {
  return getRuleContext<Java9_v2Parser::IfThenElseStatementContext>(0);
}

Java9_v2Parser::Statement4Context::Statement4Context(StatementContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::Statement4Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatement4(this);
}
void Java9_v2Parser::Statement4Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatement4(this);
}

antlrcpp::Any Java9_v2Parser::Statement4Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitStatement4(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Statement1Context ------------------------------------------------------------------

Java9_v2Parser::StatementWithoutTrailingSubstatementContext* Java9_v2Parser::Statement1Context::statementWithoutTrailingSubstatement() {
  return getRuleContext<Java9_v2Parser::StatementWithoutTrailingSubstatementContext>(0);
}

Java9_v2Parser::Statement1Context::Statement1Context(StatementContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::Statement1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatement1(this);
}
void Java9_v2Parser::Statement1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatement1(this);
}

antlrcpp::Any Java9_v2Parser::Statement1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitStatement1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Statement2Context ------------------------------------------------------------------

Java9_v2Parser::LabeledStatementContext* Java9_v2Parser::Statement2Context::labeledStatement() {
  return getRuleContext<Java9_v2Parser::LabeledStatementContext>(0);
}

Java9_v2Parser::Statement2Context::Statement2Context(StatementContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::Statement2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatement2(this);
}
void Java9_v2Parser::Statement2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatement2(this);
}

antlrcpp::Any Java9_v2Parser::Statement2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitStatement2(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::StatementContext* Java9_v2Parser::statement() {
  StatementContext *_localctx = _tracker.createInstance<StatementContext>(_ctx, getState());
  enterRule(_localctx, 272, Java9_v2Parser::RuleStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1634);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 168, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<StatementContext *>(_tracker.createInstance<Java9_v2Parser::Statement1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(1628);
      statementWithoutTrailingSubstatement();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<StatementContext *>(_tracker.createInstance<Java9_v2Parser::Statement2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(1629);
      labeledStatement();
      break;
    }

    case 3: {
      _localctx = dynamic_cast<StatementContext *>(_tracker.createInstance<Java9_v2Parser::Statement3Context>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(1630);
      ifThenStatement();
      break;
    }

    case 4: {
      _localctx = dynamic_cast<StatementContext *>(_tracker.createInstance<Java9_v2Parser::Statement4Context>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(1631);
      ifThenElseStatement();
      break;
    }

    case 5: {
      _localctx = dynamic_cast<StatementContext *>(_tracker.createInstance<Java9_v2Parser::Statement5Context>(_localctx));
      enterOuterAlt(_localctx, 5);
      setState(1632);
      whileStatement();
      break;
    }

    case 6: {
      _localctx = dynamic_cast<StatementContext *>(_tracker.createInstance<Java9_v2Parser::Statement6Context>(_localctx));
      enterOuterAlt(_localctx, 6);
      setState(1633);
      forStatement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementNoShortIfContext ------------------------------------------------------------------

Java9_v2Parser::StatementNoShortIfContext::StatementNoShortIfContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::StatementNoShortIfContext::getRuleIndex() const {
  return Java9_v2Parser::RuleStatementNoShortIf;
}

void Java9_v2Parser::StatementNoShortIfContext::copyFrom(StatementNoShortIfContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- StatementNoShortIf5Context ------------------------------------------------------------------

Java9_v2Parser::ForStatementNoShortIfContext* Java9_v2Parser::StatementNoShortIf5Context::forStatementNoShortIf() {
  return getRuleContext<Java9_v2Parser::ForStatementNoShortIfContext>(0);
}

Java9_v2Parser::StatementNoShortIf5Context::StatementNoShortIf5Context(StatementNoShortIfContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::StatementNoShortIf5Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatementNoShortIf5(this);
}
void Java9_v2Parser::StatementNoShortIf5Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatementNoShortIf5(this);
}

antlrcpp::Any Java9_v2Parser::StatementNoShortIf5Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitStatementNoShortIf5(this);
  else
    return visitor->visitChildren(this);
}
//----------------- StatementNoShortIf2Context ------------------------------------------------------------------

Java9_v2Parser::LabeledStatementNoShortIfContext* Java9_v2Parser::StatementNoShortIf2Context::labeledStatementNoShortIf() {
  return getRuleContext<Java9_v2Parser::LabeledStatementNoShortIfContext>(0);
}

Java9_v2Parser::StatementNoShortIf2Context::StatementNoShortIf2Context(StatementNoShortIfContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::StatementNoShortIf2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatementNoShortIf2(this);
}
void Java9_v2Parser::StatementNoShortIf2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatementNoShortIf2(this);
}

antlrcpp::Any Java9_v2Parser::StatementNoShortIf2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitStatementNoShortIf2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- StatementNoShortIf1Context ------------------------------------------------------------------

Java9_v2Parser::StatementWithoutTrailingSubstatementContext* Java9_v2Parser::StatementNoShortIf1Context::statementWithoutTrailingSubstatement() {
  return getRuleContext<Java9_v2Parser::StatementWithoutTrailingSubstatementContext>(0);
}

Java9_v2Parser::StatementNoShortIf1Context::StatementNoShortIf1Context(StatementNoShortIfContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::StatementNoShortIf1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatementNoShortIf1(this);
}
void Java9_v2Parser::StatementNoShortIf1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatementNoShortIf1(this);
}

antlrcpp::Any Java9_v2Parser::StatementNoShortIf1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitStatementNoShortIf1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- StatementNoShortIf4Context ------------------------------------------------------------------

Java9_v2Parser::WhileStatementNoShortIfContext* Java9_v2Parser::StatementNoShortIf4Context::whileStatementNoShortIf() {
  return getRuleContext<Java9_v2Parser::WhileStatementNoShortIfContext>(0);
}

Java9_v2Parser::StatementNoShortIf4Context::StatementNoShortIf4Context(StatementNoShortIfContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::StatementNoShortIf4Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatementNoShortIf4(this);
}
void Java9_v2Parser::StatementNoShortIf4Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatementNoShortIf4(this);
}

antlrcpp::Any Java9_v2Parser::StatementNoShortIf4Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitStatementNoShortIf4(this);
  else
    return visitor->visitChildren(this);
}
//----------------- StatementNoShortIf3Context ------------------------------------------------------------------

Java9_v2Parser::IfThenElseStatementNoShortIfContext* Java9_v2Parser::StatementNoShortIf3Context::ifThenElseStatementNoShortIf() {
  return getRuleContext<Java9_v2Parser::IfThenElseStatementNoShortIfContext>(0);
}

Java9_v2Parser::StatementNoShortIf3Context::StatementNoShortIf3Context(StatementNoShortIfContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::StatementNoShortIf3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatementNoShortIf3(this);
}
void Java9_v2Parser::StatementNoShortIf3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatementNoShortIf3(this);
}

antlrcpp::Any Java9_v2Parser::StatementNoShortIf3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitStatementNoShortIf3(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::StatementNoShortIfContext* Java9_v2Parser::statementNoShortIf() {
  StatementNoShortIfContext *_localctx = _tracker.createInstance<StatementNoShortIfContext>(_ctx, getState());
  enterRule(_localctx, 274, Java9_v2Parser::RuleStatementNoShortIf);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1641);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 169, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<StatementNoShortIfContext *>(_tracker.createInstance<Java9_v2Parser::StatementNoShortIf1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(1636);
      statementWithoutTrailingSubstatement();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<StatementNoShortIfContext *>(_tracker.createInstance<Java9_v2Parser::StatementNoShortIf2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(1637);
      labeledStatementNoShortIf();
      break;
    }

    case 3: {
      _localctx = dynamic_cast<StatementNoShortIfContext *>(_tracker.createInstance<Java9_v2Parser::StatementNoShortIf3Context>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(1638);
      ifThenElseStatementNoShortIf();
      break;
    }

    case 4: {
      _localctx = dynamic_cast<StatementNoShortIfContext *>(_tracker.createInstance<Java9_v2Parser::StatementNoShortIf4Context>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(1639);
      whileStatementNoShortIf();
      break;
    }

    case 5: {
      _localctx = dynamic_cast<StatementNoShortIfContext *>(_tracker.createInstance<Java9_v2Parser::StatementNoShortIf5Context>(_localctx));
      enterOuterAlt(_localctx, 5);
      setState(1640);
      forStatementNoShortIf();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementWithoutTrailingSubstatementContext ------------------------------------------------------------------

Java9_v2Parser::StatementWithoutTrailingSubstatementContext::StatementWithoutTrailingSubstatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::StatementWithoutTrailingSubstatementContext::getRuleIndex() const {
  return Java9_v2Parser::RuleStatementWithoutTrailingSubstatement;
}

void Java9_v2Parser::StatementWithoutTrailingSubstatementContext::copyFrom(StatementWithoutTrailingSubstatementContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- StatementWithoutTrailingSubstatement8Context ------------------------------------------------------------------

Java9_v2Parser::ContinueStatementContext* Java9_v2Parser::StatementWithoutTrailingSubstatement8Context::continueStatement() {
  return getRuleContext<Java9_v2Parser::ContinueStatementContext>(0);
}

Java9_v2Parser::StatementWithoutTrailingSubstatement8Context::StatementWithoutTrailingSubstatement8Context(StatementWithoutTrailingSubstatementContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::StatementWithoutTrailingSubstatement8Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatementWithoutTrailingSubstatement8(this);
}
void Java9_v2Parser::StatementWithoutTrailingSubstatement8Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatementWithoutTrailingSubstatement8(this);
}

antlrcpp::Any Java9_v2Parser::StatementWithoutTrailingSubstatement8Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitStatementWithoutTrailingSubstatement8(this);
  else
    return visitor->visitChildren(this);
}
//----------------- StatementWithoutTrailingSubstatement9Context ------------------------------------------------------------------

Java9_v2Parser::ReturnStatementContext* Java9_v2Parser::StatementWithoutTrailingSubstatement9Context::returnStatement() {
  return getRuleContext<Java9_v2Parser::ReturnStatementContext>(0);
}

Java9_v2Parser::StatementWithoutTrailingSubstatement9Context::StatementWithoutTrailingSubstatement9Context(StatementWithoutTrailingSubstatementContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::StatementWithoutTrailingSubstatement9Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatementWithoutTrailingSubstatement9(this);
}
void Java9_v2Parser::StatementWithoutTrailingSubstatement9Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatementWithoutTrailingSubstatement9(this);
}

antlrcpp::Any Java9_v2Parser::StatementWithoutTrailingSubstatement9Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitStatementWithoutTrailingSubstatement9(this);
  else
    return visitor->visitChildren(this);
}
//----------------- StatementWithoutTrailingSubstatement4Context ------------------------------------------------------------------

Java9_v2Parser::AssertStatementContext* Java9_v2Parser::StatementWithoutTrailingSubstatement4Context::assertStatement() {
  return getRuleContext<Java9_v2Parser::AssertStatementContext>(0);
}

Java9_v2Parser::StatementWithoutTrailingSubstatement4Context::StatementWithoutTrailingSubstatement4Context(StatementWithoutTrailingSubstatementContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::StatementWithoutTrailingSubstatement4Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatementWithoutTrailingSubstatement4(this);
}
void Java9_v2Parser::StatementWithoutTrailingSubstatement4Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatementWithoutTrailingSubstatement4(this);
}

antlrcpp::Any Java9_v2Parser::StatementWithoutTrailingSubstatement4Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitStatementWithoutTrailingSubstatement4(this);
  else
    return visitor->visitChildren(this);
}
//----------------- StatementWithoutTrailingSubstatement5Context ------------------------------------------------------------------

Java9_v2Parser::SwitchStatementContext* Java9_v2Parser::StatementWithoutTrailingSubstatement5Context::switchStatement() {
  return getRuleContext<Java9_v2Parser::SwitchStatementContext>(0);
}

Java9_v2Parser::StatementWithoutTrailingSubstatement5Context::StatementWithoutTrailingSubstatement5Context(StatementWithoutTrailingSubstatementContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::StatementWithoutTrailingSubstatement5Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatementWithoutTrailingSubstatement5(this);
}
void Java9_v2Parser::StatementWithoutTrailingSubstatement5Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatementWithoutTrailingSubstatement5(this);
}

antlrcpp::Any Java9_v2Parser::StatementWithoutTrailingSubstatement5Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitStatementWithoutTrailingSubstatement5(this);
  else
    return visitor->visitChildren(this);
}
//----------------- StatementWithoutTrailingSubstatement6Context ------------------------------------------------------------------

Java9_v2Parser::DoStatementContext* Java9_v2Parser::StatementWithoutTrailingSubstatement6Context::doStatement() {
  return getRuleContext<Java9_v2Parser::DoStatementContext>(0);
}

Java9_v2Parser::StatementWithoutTrailingSubstatement6Context::StatementWithoutTrailingSubstatement6Context(StatementWithoutTrailingSubstatementContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::StatementWithoutTrailingSubstatement6Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatementWithoutTrailingSubstatement6(this);
}
void Java9_v2Parser::StatementWithoutTrailingSubstatement6Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatementWithoutTrailingSubstatement6(this);
}

antlrcpp::Any Java9_v2Parser::StatementWithoutTrailingSubstatement6Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitStatementWithoutTrailingSubstatement6(this);
  else
    return visitor->visitChildren(this);
}
//----------------- StatementWithoutTrailingSubstatement7Context ------------------------------------------------------------------

Java9_v2Parser::BreakStatementContext* Java9_v2Parser::StatementWithoutTrailingSubstatement7Context::breakStatement() {
  return getRuleContext<Java9_v2Parser::BreakStatementContext>(0);
}

Java9_v2Parser::StatementWithoutTrailingSubstatement7Context::StatementWithoutTrailingSubstatement7Context(StatementWithoutTrailingSubstatementContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::StatementWithoutTrailingSubstatement7Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatementWithoutTrailingSubstatement7(this);
}
void Java9_v2Parser::StatementWithoutTrailingSubstatement7Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatementWithoutTrailingSubstatement7(this);
}

antlrcpp::Any Java9_v2Parser::StatementWithoutTrailingSubstatement7Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitStatementWithoutTrailingSubstatement7(this);
  else
    return visitor->visitChildren(this);
}
//----------------- StatementWithoutTrailingSubstatement1Context ------------------------------------------------------------------

Java9_v2Parser::BlockContext* Java9_v2Parser::StatementWithoutTrailingSubstatement1Context::block() {
  return getRuleContext<Java9_v2Parser::BlockContext>(0);
}

Java9_v2Parser::StatementWithoutTrailingSubstatement1Context::StatementWithoutTrailingSubstatement1Context(StatementWithoutTrailingSubstatementContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::StatementWithoutTrailingSubstatement1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatementWithoutTrailingSubstatement1(this);
}
void Java9_v2Parser::StatementWithoutTrailingSubstatement1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatementWithoutTrailingSubstatement1(this);
}

antlrcpp::Any Java9_v2Parser::StatementWithoutTrailingSubstatement1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitStatementWithoutTrailingSubstatement1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- StatementWithoutTrailingSubstatement10Context ------------------------------------------------------------------

Java9_v2Parser::SynchronizedStatementContext* Java9_v2Parser::StatementWithoutTrailingSubstatement10Context::synchronizedStatement() {
  return getRuleContext<Java9_v2Parser::SynchronizedStatementContext>(0);
}

Java9_v2Parser::StatementWithoutTrailingSubstatement10Context::StatementWithoutTrailingSubstatement10Context(StatementWithoutTrailingSubstatementContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::StatementWithoutTrailingSubstatement10Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatementWithoutTrailingSubstatement10(this);
}
void Java9_v2Parser::StatementWithoutTrailingSubstatement10Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatementWithoutTrailingSubstatement10(this);
}

antlrcpp::Any Java9_v2Parser::StatementWithoutTrailingSubstatement10Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitStatementWithoutTrailingSubstatement10(this);
  else
    return visitor->visitChildren(this);
}
//----------------- StatementWithoutTrailingSubstatement2Context ------------------------------------------------------------------

Java9_v2Parser::EmptyStatementContext* Java9_v2Parser::StatementWithoutTrailingSubstatement2Context::emptyStatement() {
  return getRuleContext<Java9_v2Parser::EmptyStatementContext>(0);
}

Java9_v2Parser::StatementWithoutTrailingSubstatement2Context::StatementWithoutTrailingSubstatement2Context(StatementWithoutTrailingSubstatementContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::StatementWithoutTrailingSubstatement2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatementWithoutTrailingSubstatement2(this);
}
void Java9_v2Parser::StatementWithoutTrailingSubstatement2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatementWithoutTrailingSubstatement2(this);
}

antlrcpp::Any Java9_v2Parser::StatementWithoutTrailingSubstatement2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitStatementWithoutTrailingSubstatement2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- StatementWithoutTrailingSubstatement3Context ------------------------------------------------------------------

Java9_v2Parser::ExpressionStatementContext* Java9_v2Parser::StatementWithoutTrailingSubstatement3Context::expressionStatement() {
  return getRuleContext<Java9_v2Parser::ExpressionStatementContext>(0);
}

Java9_v2Parser::StatementWithoutTrailingSubstatement3Context::StatementWithoutTrailingSubstatement3Context(StatementWithoutTrailingSubstatementContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::StatementWithoutTrailingSubstatement3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatementWithoutTrailingSubstatement3(this);
}
void Java9_v2Parser::StatementWithoutTrailingSubstatement3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatementWithoutTrailingSubstatement3(this);
}

antlrcpp::Any Java9_v2Parser::StatementWithoutTrailingSubstatement3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitStatementWithoutTrailingSubstatement3(this);
  else
    return visitor->visitChildren(this);
}
//----------------- StatementWithoutTrailingSubstatement11Context ------------------------------------------------------------------

Java9_v2Parser::ThrowStatementContext* Java9_v2Parser::StatementWithoutTrailingSubstatement11Context::throwStatement() {
  return getRuleContext<Java9_v2Parser::ThrowStatementContext>(0);
}

Java9_v2Parser::StatementWithoutTrailingSubstatement11Context::StatementWithoutTrailingSubstatement11Context(StatementWithoutTrailingSubstatementContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::StatementWithoutTrailingSubstatement11Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatementWithoutTrailingSubstatement11(this);
}
void Java9_v2Parser::StatementWithoutTrailingSubstatement11Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatementWithoutTrailingSubstatement11(this);
}

antlrcpp::Any Java9_v2Parser::StatementWithoutTrailingSubstatement11Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitStatementWithoutTrailingSubstatement11(this);
  else
    return visitor->visitChildren(this);
}
//----------------- StatementWithoutTrailingSubstatement12Context ------------------------------------------------------------------

Java9_v2Parser::TryStatementContext* Java9_v2Parser::StatementWithoutTrailingSubstatement12Context::tryStatement() {
  return getRuleContext<Java9_v2Parser::TryStatementContext>(0);
}

Java9_v2Parser::StatementWithoutTrailingSubstatement12Context::StatementWithoutTrailingSubstatement12Context(StatementWithoutTrailingSubstatementContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::StatementWithoutTrailingSubstatement12Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatementWithoutTrailingSubstatement12(this);
}
void Java9_v2Parser::StatementWithoutTrailingSubstatement12Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatementWithoutTrailingSubstatement12(this);
}

antlrcpp::Any Java9_v2Parser::StatementWithoutTrailingSubstatement12Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitStatementWithoutTrailingSubstatement12(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::StatementWithoutTrailingSubstatementContext* Java9_v2Parser::statementWithoutTrailingSubstatement() {
  StatementWithoutTrailingSubstatementContext *_localctx = _tracker.createInstance<StatementWithoutTrailingSubstatementContext>(_ctx, getState());
  enterRule(_localctx, 276, Java9_v2Parser::RuleStatementWithoutTrailingSubstatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1655);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Java9_v2Parser::LBRACE: {
        _localctx = dynamic_cast<StatementWithoutTrailingSubstatementContext *>(_tracker.createInstance<Java9_v2Parser::StatementWithoutTrailingSubstatement1Context>(_localctx));
        enterOuterAlt(_localctx, 1);
        setState(1643);
        block();
        break;
      }

      case Java9_v2Parser::SEMI: {
        _localctx = dynamic_cast<StatementWithoutTrailingSubstatementContext *>(_tracker.createInstance<Java9_v2Parser::StatementWithoutTrailingSubstatement2Context>(_localctx));
        enterOuterAlt(_localctx, 2);
        setState(1644);
        emptyStatement();
        break;
      }

      case Java9_v2Parser::T__0:
      case Java9_v2Parser::T__1:
      case Java9_v2Parser::T__2:
      case Java9_v2Parser::T__3:
      case Java9_v2Parser::T__4:
      case Java9_v2Parser::T__5:
      case Java9_v2Parser::T__6:
      case Java9_v2Parser::T__7:
      case Java9_v2Parser::T__8:
      case Java9_v2Parser::BOOLEAN:
      case Java9_v2Parser::BYTE:
      case Java9_v2Parser::CHAR:
      case Java9_v2Parser::DOUBLE:
      case Java9_v2Parser::FLOAT:
      case Java9_v2Parser::INT:
      case Java9_v2Parser::LONG:
      case Java9_v2Parser::NEW:
      case Java9_v2Parser::SHORT:
      case Java9_v2Parser::SUPER:
      case Java9_v2Parser::THIS:
      case Java9_v2Parser::VOID:
      case Java9_v2Parser::IntegerLiteral:
      case Java9_v2Parser::FloatingPointLiteral:
      case Java9_v2Parser::BooleanLiteral:
      case Java9_v2Parser::CharacterLiteral:
      case Java9_v2Parser::StringLiteral:
      case Java9_v2Parser::NullLiteral:
      case Java9_v2Parser::LPAREN:
      case Java9_v2Parser::AT:
      case Java9_v2Parser::INC:
      case Java9_v2Parser::DEC:
      case Java9_v2Parser::Identifier: {
        _localctx = dynamic_cast<StatementWithoutTrailingSubstatementContext *>(_tracker.createInstance<Java9_v2Parser::StatementWithoutTrailingSubstatement3Context>(_localctx));
        enterOuterAlt(_localctx, 3);
        setState(1645);
        expressionStatement();
        break;
      }

      case Java9_v2Parser::ASSERT: {
        _localctx = dynamic_cast<StatementWithoutTrailingSubstatementContext *>(_tracker.createInstance<Java9_v2Parser::StatementWithoutTrailingSubstatement4Context>(_localctx));
        enterOuterAlt(_localctx, 4);
        setState(1646);
        assertStatement();
        break;
      }

      case Java9_v2Parser::SWITCH: {
        _localctx = dynamic_cast<StatementWithoutTrailingSubstatementContext *>(_tracker.createInstance<Java9_v2Parser::StatementWithoutTrailingSubstatement5Context>(_localctx));
        enterOuterAlt(_localctx, 5);
        setState(1647);
        switchStatement();
        break;
      }

      case Java9_v2Parser::DO: {
        _localctx = dynamic_cast<StatementWithoutTrailingSubstatementContext *>(_tracker.createInstance<Java9_v2Parser::StatementWithoutTrailingSubstatement6Context>(_localctx));
        enterOuterAlt(_localctx, 6);
        setState(1648);
        doStatement();
        break;
      }

      case Java9_v2Parser::BREAK: {
        _localctx = dynamic_cast<StatementWithoutTrailingSubstatementContext *>(_tracker.createInstance<Java9_v2Parser::StatementWithoutTrailingSubstatement7Context>(_localctx));
        enterOuterAlt(_localctx, 7);
        setState(1649);
        breakStatement();
        break;
      }

      case Java9_v2Parser::CONTINUE: {
        _localctx = dynamic_cast<StatementWithoutTrailingSubstatementContext *>(_tracker.createInstance<Java9_v2Parser::StatementWithoutTrailingSubstatement8Context>(_localctx));
        enterOuterAlt(_localctx, 8);
        setState(1650);
        continueStatement();
        break;
      }

      case Java9_v2Parser::RETURN: {
        _localctx = dynamic_cast<StatementWithoutTrailingSubstatementContext *>(_tracker.createInstance<Java9_v2Parser::StatementWithoutTrailingSubstatement9Context>(_localctx));
        enterOuterAlt(_localctx, 9);
        setState(1651);
        returnStatement();
        break;
      }

      case Java9_v2Parser::SYNCHRONIZED: {
        _localctx = dynamic_cast<StatementWithoutTrailingSubstatementContext *>(_tracker.createInstance<Java9_v2Parser::StatementWithoutTrailingSubstatement10Context>(_localctx));
        enterOuterAlt(_localctx, 10);
        setState(1652);
        synchronizedStatement();
        break;
      }

      case Java9_v2Parser::THROW: {
        _localctx = dynamic_cast<StatementWithoutTrailingSubstatementContext *>(_tracker.createInstance<Java9_v2Parser::StatementWithoutTrailingSubstatement11Context>(_localctx));
        enterOuterAlt(_localctx, 11);
        setState(1653);
        throwStatement();
        break;
      }

      case Java9_v2Parser::TRY: {
        _localctx = dynamic_cast<StatementWithoutTrailingSubstatementContext *>(_tracker.createInstance<Java9_v2Parser::StatementWithoutTrailingSubstatement12Context>(_localctx));
        enterOuterAlt(_localctx, 12);
        setState(1654);
        tryStatement();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EmptyStatementContext ------------------------------------------------------------------

Java9_v2Parser::EmptyStatementContext::EmptyStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::EmptyStatementContext::SEMI() {
  return getToken(Java9_v2Parser::SEMI, 0);
}


size_t Java9_v2Parser::EmptyStatementContext::getRuleIndex() const {
  return Java9_v2Parser::RuleEmptyStatement;
}

void Java9_v2Parser::EmptyStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEmptyStatement(this);
}

void Java9_v2Parser::EmptyStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEmptyStatement(this);
}


antlrcpp::Any Java9_v2Parser::EmptyStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitEmptyStatement(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::EmptyStatementContext* Java9_v2Parser::emptyStatement() {
  EmptyStatementContext *_localctx = _tracker.createInstance<EmptyStatementContext>(_ctx, getState());
  enterRule(_localctx, 278, Java9_v2Parser::RuleEmptyStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1657);
    match(Java9_v2Parser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabeledStatementContext ------------------------------------------------------------------

Java9_v2Parser::LabeledStatementContext::LabeledStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::LabeledStatementContext::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

tree::TerminalNode* Java9_v2Parser::LabeledStatementContext::COLON() {
  return getToken(Java9_v2Parser::COLON, 0);
}

Java9_v2Parser::StatementContext* Java9_v2Parser::LabeledStatementContext::statement() {
  return getRuleContext<Java9_v2Parser::StatementContext>(0);
}


size_t Java9_v2Parser::LabeledStatementContext::getRuleIndex() const {
  return Java9_v2Parser::RuleLabeledStatement;
}

void Java9_v2Parser::LabeledStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLabeledStatement(this);
}

void Java9_v2Parser::LabeledStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLabeledStatement(this);
}


antlrcpp::Any Java9_v2Parser::LabeledStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitLabeledStatement(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::LabeledStatementContext* Java9_v2Parser::labeledStatement() {
  LabeledStatementContext *_localctx = _tracker.createInstance<LabeledStatementContext>(_ctx, getState());
  enterRule(_localctx, 280, Java9_v2Parser::RuleLabeledStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1659);
    identifier();
    setState(1660);
    match(Java9_v2Parser::COLON);
    setState(1661);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabeledStatementNoShortIfContext ------------------------------------------------------------------

Java9_v2Parser::LabeledStatementNoShortIfContext::LabeledStatementNoShortIfContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::LabeledStatementNoShortIfContext::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

tree::TerminalNode* Java9_v2Parser::LabeledStatementNoShortIfContext::COLON() {
  return getToken(Java9_v2Parser::COLON, 0);
}

Java9_v2Parser::StatementNoShortIfContext* Java9_v2Parser::LabeledStatementNoShortIfContext::statementNoShortIf() {
  return getRuleContext<Java9_v2Parser::StatementNoShortIfContext>(0);
}


size_t Java9_v2Parser::LabeledStatementNoShortIfContext::getRuleIndex() const {
  return Java9_v2Parser::RuleLabeledStatementNoShortIf;
}

void Java9_v2Parser::LabeledStatementNoShortIfContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLabeledStatementNoShortIf(this);
}

void Java9_v2Parser::LabeledStatementNoShortIfContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLabeledStatementNoShortIf(this);
}


antlrcpp::Any Java9_v2Parser::LabeledStatementNoShortIfContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitLabeledStatementNoShortIf(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::LabeledStatementNoShortIfContext* Java9_v2Parser::labeledStatementNoShortIf() {
  LabeledStatementNoShortIfContext *_localctx = _tracker.createInstance<LabeledStatementNoShortIfContext>(_ctx, getState());
  enterRule(_localctx, 282, Java9_v2Parser::RuleLabeledStatementNoShortIf);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1663);
    identifier();
    setState(1664);
    match(Java9_v2Parser::COLON);
    setState(1665);
    statementNoShortIf();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionStatementContext ------------------------------------------------------------------

Java9_v2Parser::ExpressionStatementContext::ExpressionStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::StatementExpressionContext* Java9_v2Parser::ExpressionStatementContext::statementExpression() {
  return getRuleContext<Java9_v2Parser::StatementExpressionContext>(0);
}

tree::TerminalNode* Java9_v2Parser::ExpressionStatementContext::SEMI() {
  return getToken(Java9_v2Parser::SEMI, 0);
}


size_t Java9_v2Parser::ExpressionStatementContext::getRuleIndex() const {
  return Java9_v2Parser::RuleExpressionStatement;
}

void Java9_v2Parser::ExpressionStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpressionStatement(this);
}

void Java9_v2Parser::ExpressionStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpressionStatement(this);
}


antlrcpp::Any Java9_v2Parser::ExpressionStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitExpressionStatement(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::ExpressionStatementContext* Java9_v2Parser::expressionStatement() {
  ExpressionStatementContext *_localctx = _tracker.createInstance<ExpressionStatementContext>(_ctx, getState());
  enterRule(_localctx, 284, Java9_v2Parser::RuleExpressionStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1667);
    statementExpression();
    setState(1668);
    match(Java9_v2Parser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementExpressionContext ------------------------------------------------------------------

Java9_v2Parser::StatementExpressionContext::StatementExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::StatementExpressionContext::getRuleIndex() const {
  return Java9_v2Parser::RuleStatementExpression;
}

void Java9_v2Parser::StatementExpressionContext::copyFrom(StatementExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- StatementExpression3Context ------------------------------------------------------------------

Java9_v2Parser::PreDecrementExpressionContext* Java9_v2Parser::StatementExpression3Context::preDecrementExpression() {
  return getRuleContext<Java9_v2Parser::PreDecrementExpressionContext>(0);
}

Java9_v2Parser::StatementExpression3Context::StatementExpression3Context(StatementExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::StatementExpression3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatementExpression3(this);
}
void Java9_v2Parser::StatementExpression3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatementExpression3(this);
}

antlrcpp::Any Java9_v2Parser::StatementExpression3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitStatementExpression3(this);
  else
    return visitor->visitChildren(this);
}
//----------------- StatementExpression4Context ------------------------------------------------------------------

Java9_v2Parser::PostIncrementExpressionContext* Java9_v2Parser::StatementExpression4Context::postIncrementExpression() {
  return getRuleContext<Java9_v2Parser::PostIncrementExpressionContext>(0);
}

Java9_v2Parser::StatementExpression4Context::StatementExpression4Context(StatementExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::StatementExpression4Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatementExpression4(this);
}
void Java9_v2Parser::StatementExpression4Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatementExpression4(this);
}

antlrcpp::Any Java9_v2Parser::StatementExpression4Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitStatementExpression4(this);
  else
    return visitor->visitChildren(this);
}
//----------------- StatementExpression5Context ------------------------------------------------------------------

Java9_v2Parser::PostDecrementExpressionContext* Java9_v2Parser::StatementExpression5Context::postDecrementExpression() {
  return getRuleContext<Java9_v2Parser::PostDecrementExpressionContext>(0);
}

Java9_v2Parser::StatementExpression5Context::StatementExpression5Context(StatementExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::StatementExpression5Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatementExpression5(this);
}
void Java9_v2Parser::StatementExpression5Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatementExpression5(this);
}

antlrcpp::Any Java9_v2Parser::StatementExpression5Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitStatementExpression5(this);
  else
    return visitor->visitChildren(this);
}
//----------------- StatementExpression6Context ------------------------------------------------------------------

Java9_v2Parser::MethodInvocationContext* Java9_v2Parser::StatementExpression6Context::methodInvocation() {
  return getRuleContext<Java9_v2Parser::MethodInvocationContext>(0);
}

Java9_v2Parser::StatementExpression6Context::StatementExpression6Context(StatementExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::StatementExpression6Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatementExpression6(this);
}
void Java9_v2Parser::StatementExpression6Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatementExpression6(this);
}

antlrcpp::Any Java9_v2Parser::StatementExpression6Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitStatementExpression6(this);
  else
    return visitor->visitChildren(this);
}
//----------------- StatementExpression1Context ------------------------------------------------------------------

Java9_v2Parser::AssignmentContext* Java9_v2Parser::StatementExpression1Context::assignment() {
  return getRuleContext<Java9_v2Parser::AssignmentContext>(0);
}

Java9_v2Parser::StatementExpression1Context::StatementExpression1Context(StatementExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::StatementExpression1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatementExpression1(this);
}
void Java9_v2Parser::StatementExpression1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatementExpression1(this);
}

antlrcpp::Any Java9_v2Parser::StatementExpression1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitStatementExpression1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- StatementExpression2Context ------------------------------------------------------------------

Java9_v2Parser::PreIncrementExpressionContext* Java9_v2Parser::StatementExpression2Context::preIncrementExpression() {
  return getRuleContext<Java9_v2Parser::PreIncrementExpressionContext>(0);
}

Java9_v2Parser::StatementExpression2Context::StatementExpression2Context(StatementExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::StatementExpression2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatementExpression2(this);
}
void Java9_v2Parser::StatementExpression2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatementExpression2(this);
}

antlrcpp::Any Java9_v2Parser::StatementExpression2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitStatementExpression2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- StatementExpression7Context ------------------------------------------------------------------

Java9_v2Parser::ClassInstanceCreationExpressionContext* Java9_v2Parser::StatementExpression7Context::classInstanceCreationExpression() {
  return getRuleContext<Java9_v2Parser::ClassInstanceCreationExpressionContext>(0);
}

Java9_v2Parser::StatementExpression7Context::StatementExpression7Context(StatementExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::StatementExpression7Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatementExpression7(this);
}
void Java9_v2Parser::StatementExpression7Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatementExpression7(this);
}

antlrcpp::Any Java9_v2Parser::StatementExpression7Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitStatementExpression7(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::StatementExpressionContext* Java9_v2Parser::statementExpression() {
  StatementExpressionContext *_localctx = _tracker.createInstance<StatementExpressionContext>(_ctx, getState());
  enterRule(_localctx, 286, Java9_v2Parser::RuleStatementExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1677);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 171, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<StatementExpressionContext *>(_tracker.createInstance<Java9_v2Parser::StatementExpression1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(1670);
      assignment();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<StatementExpressionContext *>(_tracker.createInstance<Java9_v2Parser::StatementExpression2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(1671);
      preIncrementExpression();
      break;
    }

    case 3: {
      _localctx = dynamic_cast<StatementExpressionContext *>(_tracker.createInstance<Java9_v2Parser::StatementExpression3Context>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(1672);
      preDecrementExpression();
      break;
    }

    case 4: {
      _localctx = dynamic_cast<StatementExpressionContext *>(_tracker.createInstance<Java9_v2Parser::StatementExpression4Context>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(1673);
      postIncrementExpression();
      break;
    }

    case 5: {
      _localctx = dynamic_cast<StatementExpressionContext *>(_tracker.createInstance<Java9_v2Parser::StatementExpression5Context>(_localctx));
      enterOuterAlt(_localctx, 5);
      setState(1674);
      postDecrementExpression();
      break;
    }

    case 6: {
      _localctx = dynamic_cast<StatementExpressionContext *>(_tracker.createInstance<Java9_v2Parser::StatementExpression6Context>(_localctx));
      enterOuterAlt(_localctx, 6);
      setState(1675);
      methodInvocation();
      break;
    }

    case 7: {
      _localctx = dynamic_cast<StatementExpressionContext *>(_tracker.createInstance<Java9_v2Parser::StatementExpression7Context>(_localctx));
      enterOuterAlt(_localctx, 7);
      setState(1676);
      classInstanceCreationExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfThenStatementContext ------------------------------------------------------------------

Java9_v2Parser::IfThenStatementContext::IfThenStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::IfThenStatementContext::IF() {
  return getToken(Java9_v2Parser::IF, 0);
}

tree::TerminalNode* Java9_v2Parser::IfThenStatementContext::LPAREN() {
  return getToken(Java9_v2Parser::LPAREN, 0);
}

Java9_v2Parser::ExpressionContext* Java9_v2Parser::IfThenStatementContext::expression() {
  return getRuleContext<Java9_v2Parser::ExpressionContext>(0);
}

tree::TerminalNode* Java9_v2Parser::IfThenStatementContext::RPAREN() {
  return getToken(Java9_v2Parser::RPAREN, 0);
}

Java9_v2Parser::StatementContext* Java9_v2Parser::IfThenStatementContext::statement() {
  return getRuleContext<Java9_v2Parser::StatementContext>(0);
}


size_t Java9_v2Parser::IfThenStatementContext::getRuleIndex() const {
  return Java9_v2Parser::RuleIfThenStatement;
}

void Java9_v2Parser::IfThenStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIfThenStatement(this);
}

void Java9_v2Parser::IfThenStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIfThenStatement(this);
}


antlrcpp::Any Java9_v2Parser::IfThenStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitIfThenStatement(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::IfThenStatementContext* Java9_v2Parser::ifThenStatement() {
  IfThenStatementContext *_localctx = _tracker.createInstance<IfThenStatementContext>(_ctx, getState());
  enterRule(_localctx, 288, Java9_v2Parser::RuleIfThenStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1679);
    match(Java9_v2Parser::IF);
    setState(1680);
    match(Java9_v2Parser::LPAREN);
    setState(1681);
    expression();
    setState(1682);
    match(Java9_v2Parser::RPAREN);
    setState(1683);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfThenElseStatementContext ------------------------------------------------------------------

Java9_v2Parser::IfThenElseStatementContext::IfThenElseStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::IfThenElseStatementContext::IF() {
  return getToken(Java9_v2Parser::IF, 0);
}

tree::TerminalNode* Java9_v2Parser::IfThenElseStatementContext::LPAREN() {
  return getToken(Java9_v2Parser::LPAREN, 0);
}

Java9_v2Parser::ExpressionContext* Java9_v2Parser::IfThenElseStatementContext::expression() {
  return getRuleContext<Java9_v2Parser::ExpressionContext>(0);
}

tree::TerminalNode* Java9_v2Parser::IfThenElseStatementContext::RPAREN() {
  return getToken(Java9_v2Parser::RPAREN, 0);
}

Java9_v2Parser::StatementNoShortIfContext* Java9_v2Parser::IfThenElseStatementContext::statementNoShortIf() {
  return getRuleContext<Java9_v2Parser::StatementNoShortIfContext>(0);
}

tree::TerminalNode* Java9_v2Parser::IfThenElseStatementContext::ELSE() {
  return getToken(Java9_v2Parser::ELSE, 0);
}

Java9_v2Parser::StatementContext* Java9_v2Parser::IfThenElseStatementContext::statement() {
  return getRuleContext<Java9_v2Parser::StatementContext>(0);
}


size_t Java9_v2Parser::IfThenElseStatementContext::getRuleIndex() const {
  return Java9_v2Parser::RuleIfThenElseStatement;
}

void Java9_v2Parser::IfThenElseStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIfThenElseStatement(this);
}

void Java9_v2Parser::IfThenElseStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIfThenElseStatement(this);
}


antlrcpp::Any Java9_v2Parser::IfThenElseStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitIfThenElseStatement(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::IfThenElseStatementContext* Java9_v2Parser::ifThenElseStatement() {
  IfThenElseStatementContext *_localctx = _tracker.createInstance<IfThenElseStatementContext>(_ctx, getState());
  enterRule(_localctx, 290, Java9_v2Parser::RuleIfThenElseStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1685);
    match(Java9_v2Parser::IF);
    setState(1686);
    match(Java9_v2Parser::LPAREN);
    setState(1687);
    expression();
    setState(1688);
    match(Java9_v2Parser::RPAREN);
    setState(1689);
    statementNoShortIf();
    setState(1690);
    match(Java9_v2Parser::ELSE);
    setState(1691);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfThenElseStatementNoShortIfContext ------------------------------------------------------------------

Java9_v2Parser::IfThenElseStatementNoShortIfContext::IfThenElseStatementNoShortIfContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::IfThenElseStatementNoShortIfContext::IF() {
  return getToken(Java9_v2Parser::IF, 0);
}

tree::TerminalNode* Java9_v2Parser::IfThenElseStatementNoShortIfContext::LPAREN() {
  return getToken(Java9_v2Parser::LPAREN, 0);
}

Java9_v2Parser::ExpressionContext* Java9_v2Parser::IfThenElseStatementNoShortIfContext::expression() {
  return getRuleContext<Java9_v2Parser::ExpressionContext>(0);
}

tree::TerminalNode* Java9_v2Parser::IfThenElseStatementNoShortIfContext::RPAREN() {
  return getToken(Java9_v2Parser::RPAREN, 0);
}

std::vector<Java9_v2Parser::StatementNoShortIfContext *> Java9_v2Parser::IfThenElseStatementNoShortIfContext::statementNoShortIf() {
  return getRuleContexts<Java9_v2Parser::StatementNoShortIfContext>();
}

Java9_v2Parser::StatementNoShortIfContext* Java9_v2Parser::IfThenElseStatementNoShortIfContext::statementNoShortIf(size_t i) {
  return getRuleContext<Java9_v2Parser::StatementNoShortIfContext>(i);
}

tree::TerminalNode* Java9_v2Parser::IfThenElseStatementNoShortIfContext::ELSE() {
  return getToken(Java9_v2Parser::ELSE, 0);
}


size_t Java9_v2Parser::IfThenElseStatementNoShortIfContext::getRuleIndex() const {
  return Java9_v2Parser::RuleIfThenElseStatementNoShortIf;
}

void Java9_v2Parser::IfThenElseStatementNoShortIfContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIfThenElseStatementNoShortIf(this);
}

void Java9_v2Parser::IfThenElseStatementNoShortIfContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIfThenElseStatementNoShortIf(this);
}


antlrcpp::Any Java9_v2Parser::IfThenElseStatementNoShortIfContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitIfThenElseStatementNoShortIf(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::IfThenElseStatementNoShortIfContext* Java9_v2Parser::ifThenElseStatementNoShortIf() {
  IfThenElseStatementNoShortIfContext *_localctx = _tracker.createInstance<IfThenElseStatementNoShortIfContext>(_ctx, getState());
  enterRule(_localctx, 292, Java9_v2Parser::RuleIfThenElseStatementNoShortIf);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1693);
    match(Java9_v2Parser::IF);
    setState(1694);
    match(Java9_v2Parser::LPAREN);
    setState(1695);
    expression();
    setState(1696);
    match(Java9_v2Parser::RPAREN);
    setState(1697);
    statementNoShortIf();
    setState(1698);
    match(Java9_v2Parser::ELSE);
    setState(1699);
    statementNoShortIf();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssertStatementContext ------------------------------------------------------------------

Java9_v2Parser::AssertStatementContext::AssertStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::AssertStatementContext::getRuleIndex() const {
  return Java9_v2Parser::RuleAssertStatement;
}

void Java9_v2Parser::AssertStatementContext::copyFrom(AssertStatementContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- AssertStatement2Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::AssertStatement2Context::ASSERT() {
  return getToken(Java9_v2Parser::ASSERT, 0);
}

std::vector<Java9_v2Parser::ExpressionContext *> Java9_v2Parser::AssertStatement2Context::expression() {
  return getRuleContexts<Java9_v2Parser::ExpressionContext>();
}

Java9_v2Parser::ExpressionContext* Java9_v2Parser::AssertStatement2Context::expression(size_t i) {
  return getRuleContext<Java9_v2Parser::ExpressionContext>(i);
}

tree::TerminalNode* Java9_v2Parser::AssertStatement2Context::COLON() {
  return getToken(Java9_v2Parser::COLON, 0);
}

tree::TerminalNode* Java9_v2Parser::AssertStatement2Context::SEMI() {
  return getToken(Java9_v2Parser::SEMI, 0);
}

Java9_v2Parser::AssertStatement2Context::AssertStatement2Context(AssertStatementContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::AssertStatement2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssertStatement2(this);
}
void Java9_v2Parser::AssertStatement2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssertStatement2(this);
}

antlrcpp::Any Java9_v2Parser::AssertStatement2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitAssertStatement2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AssertStatement1Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::AssertStatement1Context::ASSERT() {
  return getToken(Java9_v2Parser::ASSERT, 0);
}

Java9_v2Parser::ExpressionContext* Java9_v2Parser::AssertStatement1Context::expression() {
  return getRuleContext<Java9_v2Parser::ExpressionContext>(0);
}

tree::TerminalNode* Java9_v2Parser::AssertStatement1Context::SEMI() {
  return getToken(Java9_v2Parser::SEMI, 0);
}

Java9_v2Parser::AssertStatement1Context::AssertStatement1Context(AssertStatementContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::AssertStatement1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssertStatement1(this);
}
void Java9_v2Parser::AssertStatement1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssertStatement1(this);
}

antlrcpp::Any Java9_v2Parser::AssertStatement1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitAssertStatement1(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::AssertStatementContext* Java9_v2Parser::assertStatement() {
  AssertStatementContext *_localctx = _tracker.createInstance<AssertStatementContext>(_ctx, getState());
  enterRule(_localctx, 294, Java9_v2Parser::RuleAssertStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1711);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 172, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<AssertStatementContext *>(_tracker.createInstance<Java9_v2Parser::AssertStatement1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(1701);
      match(Java9_v2Parser::ASSERT);
      setState(1702);
      expression();
      setState(1703);
      match(Java9_v2Parser::SEMI);
      break;
    }

    case 2: {
      _localctx = dynamic_cast<AssertStatementContext *>(_tracker.createInstance<Java9_v2Parser::AssertStatement2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(1705);
      match(Java9_v2Parser::ASSERT);
      setState(1706);
      expression();
      setState(1707);
      match(Java9_v2Parser::COLON);
      setState(1708);
      expression();
      setState(1709);
      match(Java9_v2Parser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchStatementContext ------------------------------------------------------------------

Java9_v2Parser::SwitchStatementContext::SwitchStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::SwitchStatementContext::SWITCH() {
  return getToken(Java9_v2Parser::SWITCH, 0);
}

tree::TerminalNode* Java9_v2Parser::SwitchStatementContext::LPAREN() {
  return getToken(Java9_v2Parser::LPAREN, 0);
}

Java9_v2Parser::ExpressionContext* Java9_v2Parser::SwitchStatementContext::expression() {
  return getRuleContext<Java9_v2Parser::ExpressionContext>(0);
}

tree::TerminalNode* Java9_v2Parser::SwitchStatementContext::RPAREN() {
  return getToken(Java9_v2Parser::RPAREN, 0);
}

Java9_v2Parser::SwitchBlockContext* Java9_v2Parser::SwitchStatementContext::switchBlock() {
  return getRuleContext<Java9_v2Parser::SwitchBlockContext>(0);
}


size_t Java9_v2Parser::SwitchStatementContext::getRuleIndex() const {
  return Java9_v2Parser::RuleSwitchStatement;
}

void Java9_v2Parser::SwitchStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSwitchStatement(this);
}

void Java9_v2Parser::SwitchStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSwitchStatement(this);
}


antlrcpp::Any Java9_v2Parser::SwitchStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitSwitchStatement(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::SwitchStatementContext* Java9_v2Parser::switchStatement() {
  SwitchStatementContext *_localctx = _tracker.createInstance<SwitchStatementContext>(_ctx, getState());
  enterRule(_localctx, 296, Java9_v2Parser::RuleSwitchStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1713);
    match(Java9_v2Parser::SWITCH);
    setState(1714);
    match(Java9_v2Parser::LPAREN);
    setState(1715);
    expression();
    setState(1716);
    match(Java9_v2Parser::RPAREN);
    setState(1717);
    switchBlock();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchBlockContext ------------------------------------------------------------------

Java9_v2Parser::SwitchBlockContext::SwitchBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::SwitchBlockContext::LBRACE() {
  return getToken(Java9_v2Parser::LBRACE, 0);
}

tree::TerminalNode* Java9_v2Parser::SwitchBlockContext::RBRACE() {
  return getToken(Java9_v2Parser::RBRACE, 0);
}

std::vector<Java9_v2Parser::SwitchBlockStatementGroupContext *> Java9_v2Parser::SwitchBlockContext::switchBlockStatementGroup() {
  return getRuleContexts<Java9_v2Parser::SwitchBlockStatementGroupContext>();
}

Java9_v2Parser::SwitchBlockStatementGroupContext* Java9_v2Parser::SwitchBlockContext::switchBlockStatementGroup(size_t i) {
  return getRuleContext<Java9_v2Parser::SwitchBlockStatementGroupContext>(i);
}

std::vector<Java9_v2Parser::SwitchLabelContext *> Java9_v2Parser::SwitchBlockContext::switchLabel() {
  return getRuleContexts<Java9_v2Parser::SwitchLabelContext>();
}

Java9_v2Parser::SwitchLabelContext* Java9_v2Parser::SwitchBlockContext::switchLabel(size_t i) {
  return getRuleContext<Java9_v2Parser::SwitchLabelContext>(i);
}


size_t Java9_v2Parser::SwitchBlockContext::getRuleIndex() const {
  return Java9_v2Parser::RuleSwitchBlock;
}

void Java9_v2Parser::SwitchBlockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSwitchBlock(this);
}

void Java9_v2Parser::SwitchBlockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSwitchBlock(this);
}


antlrcpp::Any Java9_v2Parser::SwitchBlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitSwitchBlock(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::SwitchBlockContext* Java9_v2Parser::switchBlock() {
  SwitchBlockContext *_localctx = _tracker.createInstance<SwitchBlockContext>(_ctx, getState());
  enterRule(_localctx, 298, Java9_v2Parser::RuleSwitchBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1719);
    match(Java9_v2Parser::LBRACE);
    setState(1723);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 173, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1720);
        switchBlockStatementGroup(); 
      }
      setState(1725);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 173, _ctx);
    }
    setState(1729);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java9_v2Parser::CASE

    || _la == Java9_v2Parser::DEFAULT) {
      setState(1726);
      switchLabel();
      setState(1731);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1732);
    match(Java9_v2Parser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchBlockStatementGroupContext ------------------------------------------------------------------

Java9_v2Parser::SwitchBlockStatementGroupContext::SwitchBlockStatementGroupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::SwitchLabelsContext* Java9_v2Parser::SwitchBlockStatementGroupContext::switchLabels() {
  return getRuleContext<Java9_v2Parser::SwitchLabelsContext>(0);
}

Java9_v2Parser::BlockStatementsContext* Java9_v2Parser::SwitchBlockStatementGroupContext::blockStatements() {
  return getRuleContext<Java9_v2Parser::BlockStatementsContext>(0);
}


size_t Java9_v2Parser::SwitchBlockStatementGroupContext::getRuleIndex() const {
  return Java9_v2Parser::RuleSwitchBlockStatementGroup;
}

void Java9_v2Parser::SwitchBlockStatementGroupContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSwitchBlockStatementGroup(this);
}

void Java9_v2Parser::SwitchBlockStatementGroupContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSwitchBlockStatementGroup(this);
}


antlrcpp::Any Java9_v2Parser::SwitchBlockStatementGroupContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitSwitchBlockStatementGroup(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::SwitchBlockStatementGroupContext* Java9_v2Parser::switchBlockStatementGroup() {
  SwitchBlockStatementGroupContext *_localctx = _tracker.createInstance<SwitchBlockStatementGroupContext>(_ctx, getState());
  enterRule(_localctx, 300, Java9_v2Parser::RuleSwitchBlockStatementGroup);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1734);
    switchLabels();
    setState(1735);
    blockStatements();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchLabelsContext ------------------------------------------------------------------

Java9_v2Parser::SwitchLabelsContext::SwitchLabelsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Java9_v2Parser::SwitchLabelContext *> Java9_v2Parser::SwitchLabelsContext::switchLabel() {
  return getRuleContexts<Java9_v2Parser::SwitchLabelContext>();
}

Java9_v2Parser::SwitchLabelContext* Java9_v2Parser::SwitchLabelsContext::switchLabel(size_t i) {
  return getRuleContext<Java9_v2Parser::SwitchLabelContext>(i);
}


size_t Java9_v2Parser::SwitchLabelsContext::getRuleIndex() const {
  return Java9_v2Parser::RuleSwitchLabels;
}

void Java9_v2Parser::SwitchLabelsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSwitchLabels(this);
}

void Java9_v2Parser::SwitchLabelsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSwitchLabels(this);
}


antlrcpp::Any Java9_v2Parser::SwitchLabelsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitSwitchLabels(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::SwitchLabelsContext* Java9_v2Parser::switchLabels() {
  SwitchLabelsContext *_localctx = _tracker.createInstance<SwitchLabelsContext>(_ctx, getState());
  enterRule(_localctx, 302, Java9_v2Parser::RuleSwitchLabels);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1738); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1737);
      switchLabel();
      setState(1740); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == Java9_v2Parser::CASE

    || _la == Java9_v2Parser::DEFAULT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchLabelContext ------------------------------------------------------------------

Java9_v2Parser::SwitchLabelContext::SwitchLabelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::SwitchLabelContext::getRuleIndex() const {
  return Java9_v2Parser::RuleSwitchLabel;
}

void Java9_v2Parser::SwitchLabelContext::copyFrom(SwitchLabelContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- SwitchLabel3Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::SwitchLabel3Context::DEFAULT() {
  return getToken(Java9_v2Parser::DEFAULT, 0);
}

tree::TerminalNode* Java9_v2Parser::SwitchLabel3Context::COLON() {
  return getToken(Java9_v2Parser::COLON, 0);
}

Java9_v2Parser::SwitchLabel3Context::SwitchLabel3Context(SwitchLabelContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::SwitchLabel3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSwitchLabel3(this);
}
void Java9_v2Parser::SwitchLabel3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSwitchLabel3(this);
}

antlrcpp::Any Java9_v2Parser::SwitchLabel3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitSwitchLabel3(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SwitchLabel2Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::SwitchLabel2Context::CASE() {
  return getToken(Java9_v2Parser::CASE, 0);
}

Java9_v2Parser::EnumConstantNameContext* Java9_v2Parser::SwitchLabel2Context::enumConstantName() {
  return getRuleContext<Java9_v2Parser::EnumConstantNameContext>(0);
}

tree::TerminalNode* Java9_v2Parser::SwitchLabel2Context::COLON() {
  return getToken(Java9_v2Parser::COLON, 0);
}

Java9_v2Parser::SwitchLabel2Context::SwitchLabel2Context(SwitchLabelContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::SwitchLabel2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSwitchLabel2(this);
}
void Java9_v2Parser::SwitchLabel2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSwitchLabel2(this);
}

antlrcpp::Any Java9_v2Parser::SwitchLabel2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitSwitchLabel2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SwitchLabel1Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::SwitchLabel1Context::CASE() {
  return getToken(Java9_v2Parser::CASE, 0);
}

Java9_v2Parser::ConstantExpressionContext* Java9_v2Parser::SwitchLabel1Context::constantExpression() {
  return getRuleContext<Java9_v2Parser::ConstantExpressionContext>(0);
}

tree::TerminalNode* Java9_v2Parser::SwitchLabel1Context::COLON() {
  return getToken(Java9_v2Parser::COLON, 0);
}

Java9_v2Parser::SwitchLabel1Context::SwitchLabel1Context(SwitchLabelContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::SwitchLabel1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSwitchLabel1(this);
}
void Java9_v2Parser::SwitchLabel1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSwitchLabel1(this);
}

antlrcpp::Any Java9_v2Parser::SwitchLabel1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitSwitchLabel1(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::SwitchLabelContext* Java9_v2Parser::switchLabel() {
  SwitchLabelContext *_localctx = _tracker.createInstance<SwitchLabelContext>(_ctx, getState());
  enterRule(_localctx, 304, Java9_v2Parser::RuleSwitchLabel);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1752);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 176, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<SwitchLabelContext *>(_tracker.createInstance<Java9_v2Parser::SwitchLabel1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(1742);
      match(Java9_v2Parser::CASE);
      setState(1743);
      constantExpression();
      setState(1744);
      match(Java9_v2Parser::COLON);
      break;
    }

    case 2: {
      _localctx = dynamic_cast<SwitchLabelContext *>(_tracker.createInstance<Java9_v2Parser::SwitchLabel2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(1746);
      match(Java9_v2Parser::CASE);
      setState(1747);
      enumConstantName();
      setState(1748);
      match(Java9_v2Parser::COLON);
      break;
    }

    case 3: {
      _localctx = dynamic_cast<SwitchLabelContext *>(_tracker.createInstance<Java9_v2Parser::SwitchLabel3Context>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(1750);
      match(Java9_v2Parser::DEFAULT);
      setState(1751);
      match(Java9_v2Parser::COLON);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumConstantNameContext ------------------------------------------------------------------

Java9_v2Parser::EnumConstantNameContext::EnumConstantNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::EnumConstantNameContext::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}


size_t Java9_v2Parser::EnumConstantNameContext::getRuleIndex() const {
  return Java9_v2Parser::RuleEnumConstantName;
}

void Java9_v2Parser::EnumConstantNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumConstantName(this);
}

void Java9_v2Parser::EnumConstantNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumConstantName(this);
}


antlrcpp::Any Java9_v2Parser::EnumConstantNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitEnumConstantName(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::EnumConstantNameContext* Java9_v2Parser::enumConstantName() {
  EnumConstantNameContext *_localctx = _tracker.createInstance<EnumConstantNameContext>(_ctx, getState());
  enterRule(_localctx, 306, Java9_v2Parser::RuleEnumConstantName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1754);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhileStatementContext ------------------------------------------------------------------

Java9_v2Parser::WhileStatementContext::WhileStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::WhileStatementContext::WHILE() {
  return getToken(Java9_v2Parser::WHILE, 0);
}

tree::TerminalNode* Java9_v2Parser::WhileStatementContext::LPAREN() {
  return getToken(Java9_v2Parser::LPAREN, 0);
}

Java9_v2Parser::ExpressionContext* Java9_v2Parser::WhileStatementContext::expression() {
  return getRuleContext<Java9_v2Parser::ExpressionContext>(0);
}

tree::TerminalNode* Java9_v2Parser::WhileStatementContext::RPAREN() {
  return getToken(Java9_v2Parser::RPAREN, 0);
}

Java9_v2Parser::StatementContext* Java9_v2Parser::WhileStatementContext::statement() {
  return getRuleContext<Java9_v2Parser::StatementContext>(0);
}


size_t Java9_v2Parser::WhileStatementContext::getRuleIndex() const {
  return Java9_v2Parser::RuleWhileStatement;
}

void Java9_v2Parser::WhileStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhileStatement(this);
}

void Java9_v2Parser::WhileStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhileStatement(this);
}


antlrcpp::Any Java9_v2Parser::WhileStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitWhileStatement(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::WhileStatementContext* Java9_v2Parser::whileStatement() {
  WhileStatementContext *_localctx = _tracker.createInstance<WhileStatementContext>(_ctx, getState());
  enterRule(_localctx, 308, Java9_v2Parser::RuleWhileStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1756);
    match(Java9_v2Parser::WHILE);
    setState(1757);
    match(Java9_v2Parser::LPAREN);
    setState(1758);
    expression();
    setState(1759);
    match(Java9_v2Parser::RPAREN);
    setState(1760);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhileStatementNoShortIfContext ------------------------------------------------------------------

Java9_v2Parser::WhileStatementNoShortIfContext::WhileStatementNoShortIfContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::WhileStatementNoShortIfContext::WHILE() {
  return getToken(Java9_v2Parser::WHILE, 0);
}

tree::TerminalNode* Java9_v2Parser::WhileStatementNoShortIfContext::LPAREN() {
  return getToken(Java9_v2Parser::LPAREN, 0);
}

Java9_v2Parser::ExpressionContext* Java9_v2Parser::WhileStatementNoShortIfContext::expression() {
  return getRuleContext<Java9_v2Parser::ExpressionContext>(0);
}

tree::TerminalNode* Java9_v2Parser::WhileStatementNoShortIfContext::RPAREN() {
  return getToken(Java9_v2Parser::RPAREN, 0);
}

Java9_v2Parser::StatementNoShortIfContext* Java9_v2Parser::WhileStatementNoShortIfContext::statementNoShortIf() {
  return getRuleContext<Java9_v2Parser::StatementNoShortIfContext>(0);
}


size_t Java9_v2Parser::WhileStatementNoShortIfContext::getRuleIndex() const {
  return Java9_v2Parser::RuleWhileStatementNoShortIf;
}

void Java9_v2Parser::WhileStatementNoShortIfContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhileStatementNoShortIf(this);
}

void Java9_v2Parser::WhileStatementNoShortIfContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhileStatementNoShortIf(this);
}


antlrcpp::Any Java9_v2Parser::WhileStatementNoShortIfContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitWhileStatementNoShortIf(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::WhileStatementNoShortIfContext* Java9_v2Parser::whileStatementNoShortIf() {
  WhileStatementNoShortIfContext *_localctx = _tracker.createInstance<WhileStatementNoShortIfContext>(_ctx, getState());
  enterRule(_localctx, 310, Java9_v2Parser::RuleWhileStatementNoShortIf);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1762);
    match(Java9_v2Parser::WHILE);
    setState(1763);
    match(Java9_v2Parser::LPAREN);
    setState(1764);
    expression();
    setState(1765);
    match(Java9_v2Parser::RPAREN);
    setState(1766);
    statementNoShortIf();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DoStatementContext ------------------------------------------------------------------

Java9_v2Parser::DoStatementContext::DoStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::DoStatementContext::DO() {
  return getToken(Java9_v2Parser::DO, 0);
}

Java9_v2Parser::StatementContext* Java9_v2Parser::DoStatementContext::statement() {
  return getRuleContext<Java9_v2Parser::StatementContext>(0);
}

tree::TerminalNode* Java9_v2Parser::DoStatementContext::WHILE() {
  return getToken(Java9_v2Parser::WHILE, 0);
}

tree::TerminalNode* Java9_v2Parser::DoStatementContext::LPAREN() {
  return getToken(Java9_v2Parser::LPAREN, 0);
}

Java9_v2Parser::ExpressionContext* Java9_v2Parser::DoStatementContext::expression() {
  return getRuleContext<Java9_v2Parser::ExpressionContext>(0);
}

tree::TerminalNode* Java9_v2Parser::DoStatementContext::RPAREN() {
  return getToken(Java9_v2Parser::RPAREN, 0);
}

tree::TerminalNode* Java9_v2Parser::DoStatementContext::SEMI() {
  return getToken(Java9_v2Parser::SEMI, 0);
}


size_t Java9_v2Parser::DoStatementContext::getRuleIndex() const {
  return Java9_v2Parser::RuleDoStatement;
}

void Java9_v2Parser::DoStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDoStatement(this);
}

void Java9_v2Parser::DoStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDoStatement(this);
}


antlrcpp::Any Java9_v2Parser::DoStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitDoStatement(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::DoStatementContext* Java9_v2Parser::doStatement() {
  DoStatementContext *_localctx = _tracker.createInstance<DoStatementContext>(_ctx, getState());
  enterRule(_localctx, 312, Java9_v2Parser::RuleDoStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1768);
    match(Java9_v2Parser::DO);
    setState(1769);
    statement();
    setState(1770);
    match(Java9_v2Parser::WHILE);
    setState(1771);
    match(Java9_v2Parser::LPAREN);
    setState(1772);
    expression();
    setState(1773);
    match(Java9_v2Parser::RPAREN);
    setState(1774);
    match(Java9_v2Parser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForStatementContext ------------------------------------------------------------------

Java9_v2Parser::ForStatementContext::ForStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::ForStatementContext::getRuleIndex() const {
  return Java9_v2Parser::RuleForStatement;
}

void Java9_v2Parser::ForStatementContext::copyFrom(ForStatementContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ForStatement1Context ------------------------------------------------------------------

Java9_v2Parser::BasicForStatementContext* Java9_v2Parser::ForStatement1Context::basicForStatement() {
  return getRuleContext<Java9_v2Parser::BasicForStatementContext>(0);
}

Java9_v2Parser::ForStatement1Context::ForStatement1Context(ForStatementContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ForStatement1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForStatement1(this);
}
void Java9_v2Parser::ForStatement1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForStatement1(this);
}

antlrcpp::Any Java9_v2Parser::ForStatement1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitForStatement1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ForStatement2Context ------------------------------------------------------------------

Java9_v2Parser::EnhancedForStatementContext* Java9_v2Parser::ForStatement2Context::enhancedForStatement() {
  return getRuleContext<Java9_v2Parser::EnhancedForStatementContext>(0);
}

Java9_v2Parser::ForStatement2Context::ForStatement2Context(ForStatementContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ForStatement2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForStatement2(this);
}
void Java9_v2Parser::ForStatement2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForStatement2(this);
}

antlrcpp::Any Java9_v2Parser::ForStatement2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitForStatement2(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::ForStatementContext* Java9_v2Parser::forStatement() {
  ForStatementContext *_localctx = _tracker.createInstance<ForStatementContext>(_ctx, getState());
  enterRule(_localctx, 314, Java9_v2Parser::RuleForStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1778);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 177, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<ForStatementContext *>(_tracker.createInstance<Java9_v2Parser::ForStatement1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(1776);
      basicForStatement();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<ForStatementContext *>(_tracker.createInstance<Java9_v2Parser::ForStatement2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(1777);
      enhancedForStatement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForStatementNoShortIfContext ------------------------------------------------------------------

Java9_v2Parser::ForStatementNoShortIfContext::ForStatementNoShortIfContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::ForStatementNoShortIfContext::getRuleIndex() const {
  return Java9_v2Parser::RuleForStatementNoShortIf;
}

void Java9_v2Parser::ForStatementNoShortIfContext::copyFrom(ForStatementNoShortIfContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ForStatementNoShortIf3Context ------------------------------------------------------------------

Java9_v2Parser::BasicForStatementNoShortIfContext* Java9_v2Parser::ForStatementNoShortIf3Context::basicForStatementNoShortIf() {
  return getRuleContext<Java9_v2Parser::BasicForStatementNoShortIfContext>(0);
}

Java9_v2Parser::ForStatementNoShortIf3Context::ForStatementNoShortIf3Context(ForStatementNoShortIfContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ForStatementNoShortIf3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForStatementNoShortIf3(this);
}
void Java9_v2Parser::ForStatementNoShortIf3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForStatementNoShortIf3(this);
}

antlrcpp::Any Java9_v2Parser::ForStatementNoShortIf3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitForStatementNoShortIf3(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ForStatementNoShortIf4Context ------------------------------------------------------------------

Java9_v2Parser::EnhancedForStatementNoShortIfContext* Java9_v2Parser::ForStatementNoShortIf4Context::enhancedForStatementNoShortIf() {
  return getRuleContext<Java9_v2Parser::EnhancedForStatementNoShortIfContext>(0);
}

Java9_v2Parser::ForStatementNoShortIf4Context::ForStatementNoShortIf4Context(ForStatementNoShortIfContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ForStatementNoShortIf4Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForStatementNoShortIf4(this);
}
void Java9_v2Parser::ForStatementNoShortIf4Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForStatementNoShortIf4(this);
}

antlrcpp::Any Java9_v2Parser::ForStatementNoShortIf4Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitForStatementNoShortIf4(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::ForStatementNoShortIfContext* Java9_v2Parser::forStatementNoShortIf() {
  ForStatementNoShortIfContext *_localctx = _tracker.createInstance<ForStatementNoShortIfContext>(_ctx, getState());
  enterRule(_localctx, 316, Java9_v2Parser::RuleForStatementNoShortIf);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1782);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 178, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<ForStatementNoShortIfContext *>(_tracker.createInstance<Java9_v2Parser::ForStatementNoShortIf3Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(1780);
      basicForStatementNoShortIf();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<ForStatementNoShortIfContext *>(_tracker.createInstance<Java9_v2Parser::ForStatementNoShortIf4Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(1781);
      enhancedForStatementNoShortIf();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BasicForStatementContext ------------------------------------------------------------------

Java9_v2Parser::BasicForStatementContext::BasicForStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::BasicForStatementContext::FOR() {
  return getToken(Java9_v2Parser::FOR, 0);
}

tree::TerminalNode* Java9_v2Parser::BasicForStatementContext::LPAREN() {
  return getToken(Java9_v2Parser::LPAREN, 0);
}

std::vector<tree::TerminalNode *> Java9_v2Parser::BasicForStatementContext::SEMI() {
  return getTokens(Java9_v2Parser::SEMI);
}

tree::TerminalNode* Java9_v2Parser::BasicForStatementContext::SEMI(size_t i) {
  return getToken(Java9_v2Parser::SEMI, i);
}

tree::TerminalNode* Java9_v2Parser::BasicForStatementContext::RPAREN() {
  return getToken(Java9_v2Parser::RPAREN, 0);
}

Java9_v2Parser::StatementContext* Java9_v2Parser::BasicForStatementContext::statement() {
  return getRuleContext<Java9_v2Parser::StatementContext>(0);
}

Java9_v2Parser::ForInitContext* Java9_v2Parser::BasicForStatementContext::forInit() {
  return getRuleContext<Java9_v2Parser::ForInitContext>(0);
}

Java9_v2Parser::ExpressionContext* Java9_v2Parser::BasicForStatementContext::expression() {
  return getRuleContext<Java9_v2Parser::ExpressionContext>(0);
}

Java9_v2Parser::ForUpdateContext* Java9_v2Parser::BasicForStatementContext::forUpdate() {
  return getRuleContext<Java9_v2Parser::ForUpdateContext>(0);
}


size_t Java9_v2Parser::BasicForStatementContext::getRuleIndex() const {
  return Java9_v2Parser::RuleBasicForStatement;
}

void Java9_v2Parser::BasicForStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBasicForStatement(this);
}

void Java9_v2Parser::BasicForStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBasicForStatement(this);
}


antlrcpp::Any Java9_v2Parser::BasicForStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitBasicForStatement(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::BasicForStatementContext* Java9_v2Parser::basicForStatement() {
  BasicForStatementContext *_localctx = _tracker.createInstance<BasicForStatementContext>(_ctx, getState());
  enterRule(_localctx, 318, Java9_v2Parser::RuleBasicForStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1784);
    match(Java9_v2Parser::FOR);
    setState(1785);
    match(Java9_v2Parser::LPAREN);
    setState(1787);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << Java9_v2Parser::T__0)
      | (1ULL << Java9_v2Parser::T__1)
      | (1ULL << Java9_v2Parser::T__2)
      | (1ULL << Java9_v2Parser::T__3)
      | (1ULL << Java9_v2Parser::T__4)
      | (1ULL << Java9_v2Parser::T__5)
      | (1ULL << Java9_v2Parser::T__6)
      | (1ULL << Java9_v2Parser::T__7)
      | (1ULL << Java9_v2Parser::T__8)
      | (1ULL << Java9_v2Parser::BOOLEAN)
      | (1ULL << Java9_v2Parser::BYTE)
      | (1ULL << Java9_v2Parser::CHAR)
      | (1ULL << Java9_v2Parser::DOUBLE)
      | (1ULL << Java9_v2Parser::FINAL)
      | (1ULL << Java9_v2Parser::FLOAT)
      | (1ULL << Java9_v2Parser::INT)
      | (1ULL << Java9_v2Parser::LONG)
      | (1ULL << Java9_v2Parser::NEW)
      | (1ULL << Java9_v2Parser::SHORT)
      | (1ULL << Java9_v2Parser::SUPER)
      | (1ULL << Java9_v2Parser::THIS)
      | (1ULL << Java9_v2Parser::VOID)
      | (1ULL << Java9_v2Parser::IntegerLiteral)
      | (1ULL << Java9_v2Parser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (Java9_v2Parser::BooleanLiteral - 64))
      | (1ULL << (Java9_v2Parser::CharacterLiteral - 64))
      | (1ULL << (Java9_v2Parser::StringLiteral - 64))
      | (1ULL << (Java9_v2Parser::NullLiteral - 64))
      | (1ULL << (Java9_v2Parser::LPAREN - 64))
      | (1ULL << (Java9_v2Parser::AT - 64))
      | (1ULL << (Java9_v2Parser::INC - 64))
      | (1ULL << (Java9_v2Parser::DEC - 64))
      | (1ULL << (Java9_v2Parser::Identifier - 64)))) != 0)) {
      setState(1786);
      forInit();
    }
    setState(1789);
    match(Java9_v2Parser::SEMI);
    setState(1791);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << Java9_v2Parser::T__0)
      | (1ULL << Java9_v2Parser::T__1)
      | (1ULL << Java9_v2Parser::T__2)
      | (1ULL << Java9_v2Parser::T__3)
      | (1ULL << Java9_v2Parser::T__4)
      | (1ULL << Java9_v2Parser::T__5)
      | (1ULL << Java9_v2Parser::T__6)
      | (1ULL << Java9_v2Parser::T__7)
      | (1ULL << Java9_v2Parser::T__8)
      | (1ULL << Java9_v2Parser::BOOLEAN)
      | (1ULL << Java9_v2Parser::BYTE)
      | (1ULL << Java9_v2Parser::CHAR)
      | (1ULL << Java9_v2Parser::DOUBLE)
      | (1ULL << Java9_v2Parser::FLOAT)
      | (1ULL << Java9_v2Parser::INT)
      | (1ULL << Java9_v2Parser::LONG)
      | (1ULL << Java9_v2Parser::NEW)
      | (1ULL << Java9_v2Parser::SHORT)
      | (1ULL << Java9_v2Parser::SUPER)
      | (1ULL << Java9_v2Parser::THIS)
      | (1ULL << Java9_v2Parser::VOID)
      | (1ULL << Java9_v2Parser::IntegerLiteral)
      | (1ULL << Java9_v2Parser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (Java9_v2Parser::BooleanLiteral - 64))
      | (1ULL << (Java9_v2Parser::CharacterLiteral - 64))
      | (1ULL << (Java9_v2Parser::StringLiteral - 64))
      | (1ULL << (Java9_v2Parser::NullLiteral - 64))
      | (1ULL << (Java9_v2Parser::LPAREN - 64))
      | (1ULL << (Java9_v2Parser::AT - 64))
      | (1ULL << (Java9_v2Parser::BANG - 64))
      | (1ULL << (Java9_v2Parser::TILDE - 64))
      | (1ULL << (Java9_v2Parser::INC - 64))
      | (1ULL << (Java9_v2Parser::DEC - 64))
      | (1ULL << (Java9_v2Parser::ADD - 64))
      | (1ULL << (Java9_v2Parser::SUB - 64))
      | (1ULL << (Java9_v2Parser::Identifier - 64)))) != 0)) {
      setState(1790);
      expression();
    }
    setState(1793);
    match(Java9_v2Parser::SEMI);
    setState(1795);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << Java9_v2Parser::T__0)
      | (1ULL << Java9_v2Parser::T__1)
      | (1ULL << Java9_v2Parser::T__2)
      | (1ULL << Java9_v2Parser::T__3)
      | (1ULL << Java9_v2Parser::T__4)
      | (1ULL << Java9_v2Parser::T__5)
      | (1ULL << Java9_v2Parser::T__6)
      | (1ULL << Java9_v2Parser::T__7)
      | (1ULL << Java9_v2Parser::T__8)
      | (1ULL << Java9_v2Parser::BOOLEAN)
      | (1ULL << Java9_v2Parser::BYTE)
      | (1ULL << Java9_v2Parser::CHAR)
      | (1ULL << Java9_v2Parser::DOUBLE)
      | (1ULL << Java9_v2Parser::FLOAT)
      | (1ULL << Java9_v2Parser::INT)
      | (1ULL << Java9_v2Parser::LONG)
      | (1ULL << Java9_v2Parser::NEW)
      | (1ULL << Java9_v2Parser::SHORT)
      | (1ULL << Java9_v2Parser::SUPER)
      | (1ULL << Java9_v2Parser::THIS)
      | (1ULL << Java9_v2Parser::VOID)
      | (1ULL << Java9_v2Parser::IntegerLiteral)
      | (1ULL << Java9_v2Parser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (Java9_v2Parser::BooleanLiteral - 64))
      | (1ULL << (Java9_v2Parser::CharacterLiteral - 64))
      | (1ULL << (Java9_v2Parser::StringLiteral - 64))
      | (1ULL << (Java9_v2Parser::NullLiteral - 64))
      | (1ULL << (Java9_v2Parser::LPAREN - 64))
      | (1ULL << (Java9_v2Parser::AT - 64))
      | (1ULL << (Java9_v2Parser::INC - 64))
      | (1ULL << (Java9_v2Parser::DEC - 64))
      | (1ULL << (Java9_v2Parser::Identifier - 64)))) != 0)) {
      setState(1794);
      forUpdate();
    }
    setState(1797);
    match(Java9_v2Parser::RPAREN);
    setState(1798);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BasicForStatementNoShortIfContext ------------------------------------------------------------------

Java9_v2Parser::BasicForStatementNoShortIfContext::BasicForStatementNoShortIfContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::BasicForStatementNoShortIfContext::FOR() {
  return getToken(Java9_v2Parser::FOR, 0);
}

tree::TerminalNode* Java9_v2Parser::BasicForStatementNoShortIfContext::LPAREN() {
  return getToken(Java9_v2Parser::LPAREN, 0);
}

std::vector<tree::TerminalNode *> Java9_v2Parser::BasicForStatementNoShortIfContext::SEMI() {
  return getTokens(Java9_v2Parser::SEMI);
}

tree::TerminalNode* Java9_v2Parser::BasicForStatementNoShortIfContext::SEMI(size_t i) {
  return getToken(Java9_v2Parser::SEMI, i);
}

tree::TerminalNode* Java9_v2Parser::BasicForStatementNoShortIfContext::RPAREN() {
  return getToken(Java9_v2Parser::RPAREN, 0);
}

Java9_v2Parser::StatementNoShortIfContext* Java9_v2Parser::BasicForStatementNoShortIfContext::statementNoShortIf() {
  return getRuleContext<Java9_v2Parser::StatementNoShortIfContext>(0);
}

Java9_v2Parser::ForInitContext* Java9_v2Parser::BasicForStatementNoShortIfContext::forInit() {
  return getRuleContext<Java9_v2Parser::ForInitContext>(0);
}

Java9_v2Parser::ExpressionContext* Java9_v2Parser::BasicForStatementNoShortIfContext::expression() {
  return getRuleContext<Java9_v2Parser::ExpressionContext>(0);
}

Java9_v2Parser::ForUpdateContext* Java9_v2Parser::BasicForStatementNoShortIfContext::forUpdate() {
  return getRuleContext<Java9_v2Parser::ForUpdateContext>(0);
}


size_t Java9_v2Parser::BasicForStatementNoShortIfContext::getRuleIndex() const {
  return Java9_v2Parser::RuleBasicForStatementNoShortIf;
}

void Java9_v2Parser::BasicForStatementNoShortIfContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBasicForStatementNoShortIf(this);
}

void Java9_v2Parser::BasicForStatementNoShortIfContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBasicForStatementNoShortIf(this);
}


antlrcpp::Any Java9_v2Parser::BasicForStatementNoShortIfContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitBasicForStatementNoShortIf(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::BasicForStatementNoShortIfContext* Java9_v2Parser::basicForStatementNoShortIf() {
  BasicForStatementNoShortIfContext *_localctx = _tracker.createInstance<BasicForStatementNoShortIfContext>(_ctx, getState());
  enterRule(_localctx, 320, Java9_v2Parser::RuleBasicForStatementNoShortIf);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1800);
    match(Java9_v2Parser::FOR);
    setState(1801);
    match(Java9_v2Parser::LPAREN);
    setState(1803);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << Java9_v2Parser::T__0)
      | (1ULL << Java9_v2Parser::T__1)
      | (1ULL << Java9_v2Parser::T__2)
      | (1ULL << Java9_v2Parser::T__3)
      | (1ULL << Java9_v2Parser::T__4)
      | (1ULL << Java9_v2Parser::T__5)
      | (1ULL << Java9_v2Parser::T__6)
      | (1ULL << Java9_v2Parser::T__7)
      | (1ULL << Java9_v2Parser::T__8)
      | (1ULL << Java9_v2Parser::BOOLEAN)
      | (1ULL << Java9_v2Parser::BYTE)
      | (1ULL << Java9_v2Parser::CHAR)
      | (1ULL << Java9_v2Parser::DOUBLE)
      | (1ULL << Java9_v2Parser::FINAL)
      | (1ULL << Java9_v2Parser::FLOAT)
      | (1ULL << Java9_v2Parser::INT)
      | (1ULL << Java9_v2Parser::LONG)
      | (1ULL << Java9_v2Parser::NEW)
      | (1ULL << Java9_v2Parser::SHORT)
      | (1ULL << Java9_v2Parser::SUPER)
      | (1ULL << Java9_v2Parser::THIS)
      | (1ULL << Java9_v2Parser::VOID)
      | (1ULL << Java9_v2Parser::IntegerLiteral)
      | (1ULL << Java9_v2Parser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (Java9_v2Parser::BooleanLiteral - 64))
      | (1ULL << (Java9_v2Parser::CharacterLiteral - 64))
      | (1ULL << (Java9_v2Parser::StringLiteral - 64))
      | (1ULL << (Java9_v2Parser::NullLiteral - 64))
      | (1ULL << (Java9_v2Parser::LPAREN - 64))
      | (1ULL << (Java9_v2Parser::AT - 64))
      | (1ULL << (Java9_v2Parser::INC - 64))
      | (1ULL << (Java9_v2Parser::DEC - 64))
      | (1ULL << (Java9_v2Parser::Identifier - 64)))) != 0)) {
      setState(1802);
      forInit();
    }
    setState(1805);
    match(Java9_v2Parser::SEMI);
    setState(1807);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << Java9_v2Parser::T__0)
      | (1ULL << Java9_v2Parser::T__1)
      | (1ULL << Java9_v2Parser::T__2)
      | (1ULL << Java9_v2Parser::T__3)
      | (1ULL << Java9_v2Parser::T__4)
      | (1ULL << Java9_v2Parser::T__5)
      | (1ULL << Java9_v2Parser::T__6)
      | (1ULL << Java9_v2Parser::T__7)
      | (1ULL << Java9_v2Parser::T__8)
      | (1ULL << Java9_v2Parser::BOOLEAN)
      | (1ULL << Java9_v2Parser::BYTE)
      | (1ULL << Java9_v2Parser::CHAR)
      | (1ULL << Java9_v2Parser::DOUBLE)
      | (1ULL << Java9_v2Parser::FLOAT)
      | (1ULL << Java9_v2Parser::INT)
      | (1ULL << Java9_v2Parser::LONG)
      | (1ULL << Java9_v2Parser::NEW)
      | (1ULL << Java9_v2Parser::SHORT)
      | (1ULL << Java9_v2Parser::SUPER)
      | (1ULL << Java9_v2Parser::THIS)
      | (1ULL << Java9_v2Parser::VOID)
      | (1ULL << Java9_v2Parser::IntegerLiteral)
      | (1ULL << Java9_v2Parser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (Java9_v2Parser::BooleanLiteral - 64))
      | (1ULL << (Java9_v2Parser::CharacterLiteral - 64))
      | (1ULL << (Java9_v2Parser::StringLiteral - 64))
      | (1ULL << (Java9_v2Parser::NullLiteral - 64))
      | (1ULL << (Java9_v2Parser::LPAREN - 64))
      | (1ULL << (Java9_v2Parser::AT - 64))
      | (1ULL << (Java9_v2Parser::BANG - 64))
      | (1ULL << (Java9_v2Parser::TILDE - 64))
      | (1ULL << (Java9_v2Parser::INC - 64))
      | (1ULL << (Java9_v2Parser::DEC - 64))
      | (1ULL << (Java9_v2Parser::ADD - 64))
      | (1ULL << (Java9_v2Parser::SUB - 64))
      | (1ULL << (Java9_v2Parser::Identifier - 64)))) != 0)) {
      setState(1806);
      expression();
    }
    setState(1809);
    match(Java9_v2Parser::SEMI);
    setState(1811);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << Java9_v2Parser::T__0)
      | (1ULL << Java9_v2Parser::T__1)
      | (1ULL << Java9_v2Parser::T__2)
      | (1ULL << Java9_v2Parser::T__3)
      | (1ULL << Java9_v2Parser::T__4)
      | (1ULL << Java9_v2Parser::T__5)
      | (1ULL << Java9_v2Parser::T__6)
      | (1ULL << Java9_v2Parser::T__7)
      | (1ULL << Java9_v2Parser::T__8)
      | (1ULL << Java9_v2Parser::BOOLEAN)
      | (1ULL << Java9_v2Parser::BYTE)
      | (1ULL << Java9_v2Parser::CHAR)
      | (1ULL << Java9_v2Parser::DOUBLE)
      | (1ULL << Java9_v2Parser::FLOAT)
      | (1ULL << Java9_v2Parser::INT)
      | (1ULL << Java9_v2Parser::LONG)
      | (1ULL << Java9_v2Parser::NEW)
      | (1ULL << Java9_v2Parser::SHORT)
      | (1ULL << Java9_v2Parser::SUPER)
      | (1ULL << Java9_v2Parser::THIS)
      | (1ULL << Java9_v2Parser::VOID)
      | (1ULL << Java9_v2Parser::IntegerLiteral)
      | (1ULL << Java9_v2Parser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (Java9_v2Parser::BooleanLiteral - 64))
      | (1ULL << (Java9_v2Parser::CharacterLiteral - 64))
      | (1ULL << (Java9_v2Parser::StringLiteral - 64))
      | (1ULL << (Java9_v2Parser::NullLiteral - 64))
      | (1ULL << (Java9_v2Parser::LPAREN - 64))
      | (1ULL << (Java9_v2Parser::AT - 64))
      | (1ULL << (Java9_v2Parser::INC - 64))
      | (1ULL << (Java9_v2Parser::DEC - 64))
      | (1ULL << (Java9_v2Parser::Identifier - 64)))) != 0)) {
      setState(1810);
      forUpdate();
    }
    setState(1813);
    match(Java9_v2Parser::RPAREN);
    setState(1814);
    statementNoShortIf();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForInitContext ------------------------------------------------------------------

Java9_v2Parser::ForInitContext::ForInitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::ForInitContext::getRuleIndex() const {
  return Java9_v2Parser::RuleForInit;
}

void Java9_v2Parser::ForInitContext::copyFrom(ForInitContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ForInit1Context ------------------------------------------------------------------

Java9_v2Parser::StatementExpressionListContext* Java9_v2Parser::ForInit1Context::statementExpressionList() {
  return getRuleContext<Java9_v2Parser::StatementExpressionListContext>(0);
}

Java9_v2Parser::ForInit1Context::ForInit1Context(ForInitContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ForInit1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForInit1(this);
}
void Java9_v2Parser::ForInit1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForInit1(this);
}

antlrcpp::Any Java9_v2Parser::ForInit1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitForInit1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ForInit2Context ------------------------------------------------------------------

Java9_v2Parser::LocalVariableDeclarationContext* Java9_v2Parser::ForInit2Context::localVariableDeclaration() {
  return getRuleContext<Java9_v2Parser::LocalVariableDeclarationContext>(0);
}

Java9_v2Parser::ForInit2Context::ForInit2Context(ForInitContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ForInit2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForInit2(this);
}
void Java9_v2Parser::ForInit2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForInit2(this);
}

antlrcpp::Any Java9_v2Parser::ForInit2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitForInit2(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::ForInitContext* Java9_v2Parser::forInit() {
  ForInitContext *_localctx = _tracker.createInstance<ForInitContext>(_ctx, getState());
  enterRule(_localctx, 322, Java9_v2Parser::RuleForInit);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1818);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 185, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<ForInitContext *>(_tracker.createInstance<Java9_v2Parser::ForInit1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(1816);
      statementExpressionList();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<ForInitContext *>(_tracker.createInstance<Java9_v2Parser::ForInit2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(1817);
      localVariableDeclaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForUpdateContext ------------------------------------------------------------------

Java9_v2Parser::ForUpdateContext::ForUpdateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::StatementExpressionListContext* Java9_v2Parser::ForUpdateContext::statementExpressionList() {
  return getRuleContext<Java9_v2Parser::StatementExpressionListContext>(0);
}


size_t Java9_v2Parser::ForUpdateContext::getRuleIndex() const {
  return Java9_v2Parser::RuleForUpdate;
}

void Java9_v2Parser::ForUpdateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForUpdate(this);
}

void Java9_v2Parser::ForUpdateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForUpdate(this);
}


antlrcpp::Any Java9_v2Parser::ForUpdateContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitForUpdate(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::ForUpdateContext* Java9_v2Parser::forUpdate() {
  ForUpdateContext *_localctx = _tracker.createInstance<ForUpdateContext>(_ctx, getState());
  enterRule(_localctx, 324, Java9_v2Parser::RuleForUpdate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1820);
    statementExpressionList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementExpressionListContext ------------------------------------------------------------------

Java9_v2Parser::StatementExpressionListContext::StatementExpressionListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Java9_v2Parser::StatementExpressionContext *> Java9_v2Parser::StatementExpressionListContext::statementExpression() {
  return getRuleContexts<Java9_v2Parser::StatementExpressionContext>();
}

Java9_v2Parser::StatementExpressionContext* Java9_v2Parser::StatementExpressionListContext::statementExpression(size_t i) {
  return getRuleContext<Java9_v2Parser::StatementExpressionContext>(i);
}

std::vector<tree::TerminalNode *> Java9_v2Parser::StatementExpressionListContext::COMMA() {
  return getTokens(Java9_v2Parser::COMMA);
}

tree::TerminalNode* Java9_v2Parser::StatementExpressionListContext::COMMA(size_t i) {
  return getToken(Java9_v2Parser::COMMA, i);
}


size_t Java9_v2Parser::StatementExpressionListContext::getRuleIndex() const {
  return Java9_v2Parser::RuleStatementExpressionList;
}

void Java9_v2Parser::StatementExpressionListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatementExpressionList(this);
}

void Java9_v2Parser::StatementExpressionListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatementExpressionList(this);
}


antlrcpp::Any Java9_v2Parser::StatementExpressionListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitStatementExpressionList(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::StatementExpressionListContext* Java9_v2Parser::statementExpressionList() {
  StatementExpressionListContext *_localctx = _tracker.createInstance<StatementExpressionListContext>(_ctx, getState());
  enterRule(_localctx, 326, Java9_v2Parser::RuleStatementExpressionList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1822);
    statementExpression();
    setState(1827);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java9_v2Parser::COMMA) {
      setState(1823);
      match(Java9_v2Parser::COMMA);
      setState(1824);
      statementExpression();
      setState(1829);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnhancedForStatementContext ------------------------------------------------------------------

Java9_v2Parser::EnhancedForStatementContext::EnhancedForStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::EnhancedForStatementContext::FOR() {
  return getToken(Java9_v2Parser::FOR, 0);
}

tree::TerminalNode* Java9_v2Parser::EnhancedForStatementContext::LPAREN() {
  return getToken(Java9_v2Parser::LPAREN, 0);
}

Java9_v2Parser::UnannTypeContext* Java9_v2Parser::EnhancedForStatementContext::unannType() {
  return getRuleContext<Java9_v2Parser::UnannTypeContext>(0);
}

Java9_v2Parser::VariableDeclaratorIdContext* Java9_v2Parser::EnhancedForStatementContext::variableDeclaratorId() {
  return getRuleContext<Java9_v2Parser::VariableDeclaratorIdContext>(0);
}

tree::TerminalNode* Java9_v2Parser::EnhancedForStatementContext::COLON() {
  return getToken(Java9_v2Parser::COLON, 0);
}

Java9_v2Parser::ExpressionContext* Java9_v2Parser::EnhancedForStatementContext::expression() {
  return getRuleContext<Java9_v2Parser::ExpressionContext>(0);
}

tree::TerminalNode* Java9_v2Parser::EnhancedForStatementContext::RPAREN() {
  return getToken(Java9_v2Parser::RPAREN, 0);
}

Java9_v2Parser::StatementContext* Java9_v2Parser::EnhancedForStatementContext::statement() {
  return getRuleContext<Java9_v2Parser::StatementContext>(0);
}

std::vector<Java9_v2Parser::VariableModifierContext *> Java9_v2Parser::EnhancedForStatementContext::variableModifier() {
  return getRuleContexts<Java9_v2Parser::VariableModifierContext>();
}

Java9_v2Parser::VariableModifierContext* Java9_v2Parser::EnhancedForStatementContext::variableModifier(size_t i) {
  return getRuleContext<Java9_v2Parser::VariableModifierContext>(i);
}


size_t Java9_v2Parser::EnhancedForStatementContext::getRuleIndex() const {
  return Java9_v2Parser::RuleEnhancedForStatement;
}

void Java9_v2Parser::EnhancedForStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnhancedForStatement(this);
}

void Java9_v2Parser::EnhancedForStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnhancedForStatement(this);
}


antlrcpp::Any Java9_v2Parser::EnhancedForStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitEnhancedForStatement(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::EnhancedForStatementContext* Java9_v2Parser::enhancedForStatement() {
  EnhancedForStatementContext *_localctx = _tracker.createInstance<EnhancedForStatementContext>(_ctx, getState());
  enterRule(_localctx, 328, Java9_v2Parser::RuleEnhancedForStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1830);
    match(Java9_v2Parser::FOR);
    setState(1831);
    match(Java9_v2Parser::LPAREN);
    setState(1835);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java9_v2Parser::FINAL

    || _la == Java9_v2Parser::AT) {
      setState(1832);
      variableModifier();
      setState(1837);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1838);
    unannType();
    setState(1839);
    variableDeclaratorId();
    setState(1840);
    match(Java9_v2Parser::COLON);
    setState(1841);
    expression();
    setState(1842);
    match(Java9_v2Parser::RPAREN);
    setState(1843);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnhancedForStatementNoShortIfContext ------------------------------------------------------------------

Java9_v2Parser::EnhancedForStatementNoShortIfContext::EnhancedForStatementNoShortIfContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::EnhancedForStatementNoShortIfContext::FOR() {
  return getToken(Java9_v2Parser::FOR, 0);
}

tree::TerminalNode* Java9_v2Parser::EnhancedForStatementNoShortIfContext::LPAREN() {
  return getToken(Java9_v2Parser::LPAREN, 0);
}

Java9_v2Parser::UnannTypeContext* Java9_v2Parser::EnhancedForStatementNoShortIfContext::unannType() {
  return getRuleContext<Java9_v2Parser::UnannTypeContext>(0);
}

Java9_v2Parser::VariableDeclaratorIdContext* Java9_v2Parser::EnhancedForStatementNoShortIfContext::variableDeclaratorId() {
  return getRuleContext<Java9_v2Parser::VariableDeclaratorIdContext>(0);
}

tree::TerminalNode* Java9_v2Parser::EnhancedForStatementNoShortIfContext::COLON() {
  return getToken(Java9_v2Parser::COLON, 0);
}

Java9_v2Parser::ExpressionContext* Java9_v2Parser::EnhancedForStatementNoShortIfContext::expression() {
  return getRuleContext<Java9_v2Parser::ExpressionContext>(0);
}

tree::TerminalNode* Java9_v2Parser::EnhancedForStatementNoShortIfContext::RPAREN() {
  return getToken(Java9_v2Parser::RPAREN, 0);
}

Java9_v2Parser::StatementNoShortIfContext* Java9_v2Parser::EnhancedForStatementNoShortIfContext::statementNoShortIf() {
  return getRuleContext<Java9_v2Parser::StatementNoShortIfContext>(0);
}

std::vector<Java9_v2Parser::VariableModifierContext *> Java9_v2Parser::EnhancedForStatementNoShortIfContext::variableModifier() {
  return getRuleContexts<Java9_v2Parser::VariableModifierContext>();
}

Java9_v2Parser::VariableModifierContext* Java9_v2Parser::EnhancedForStatementNoShortIfContext::variableModifier(size_t i) {
  return getRuleContext<Java9_v2Parser::VariableModifierContext>(i);
}


size_t Java9_v2Parser::EnhancedForStatementNoShortIfContext::getRuleIndex() const {
  return Java9_v2Parser::RuleEnhancedForStatementNoShortIf;
}

void Java9_v2Parser::EnhancedForStatementNoShortIfContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnhancedForStatementNoShortIf(this);
}

void Java9_v2Parser::EnhancedForStatementNoShortIfContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnhancedForStatementNoShortIf(this);
}


antlrcpp::Any Java9_v2Parser::EnhancedForStatementNoShortIfContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitEnhancedForStatementNoShortIf(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::EnhancedForStatementNoShortIfContext* Java9_v2Parser::enhancedForStatementNoShortIf() {
  EnhancedForStatementNoShortIfContext *_localctx = _tracker.createInstance<EnhancedForStatementNoShortIfContext>(_ctx, getState());
  enterRule(_localctx, 330, Java9_v2Parser::RuleEnhancedForStatementNoShortIf);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1845);
    match(Java9_v2Parser::FOR);
    setState(1846);
    match(Java9_v2Parser::LPAREN);
    setState(1850);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java9_v2Parser::FINAL

    || _la == Java9_v2Parser::AT) {
      setState(1847);
      variableModifier();
      setState(1852);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1853);
    unannType();
    setState(1854);
    variableDeclaratorId();
    setState(1855);
    match(Java9_v2Parser::COLON);
    setState(1856);
    expression();
    setState(1857);
    match(Java9_v2Parser::RPAREN);
    setState(1858);
    statementNoShortIf();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BreakStatementContext ------------------------------------------------------------------

Java9_v2Parser::BreakStatementContext::BreakStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::BreakStatementContext::BREAK() {
  return getToken(Java9_v2Parser::BREAK, 0);
}

tree::TerminalNode* Java9_v2Parser::BreakStatementContext::SEMI() {
  return getToken(Java9_v2Parser::SEMI, 0);
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::BreakStatementContext::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}


size_t Java9_v2Parser::BreakStatementContext::getRuleIndex() const {
  return Java9_v2Parser::RuleBreakStatement;
}

void Java9_v2Parser::BreakStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBreakStatement(this);
}

void Java9_v2Parser::BreakStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBreakStatement(this);
}


antlrcpp::Any Java9_v2Parser::BreakStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitBreakStatement(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::BreakStatementContext* Java9_v2Parser::breakStatement() {
  BreakStatementContext *_localctx = _tracker.createInstance<BreakStatementContext>(_ctx, getState());
  enterRule(_localctx, 332, Java9_v2Parser::RuleBreakStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1860);
    match(Java9_v2Parser::BREAK);
    setState(1862);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << Java9_v2Parser::T__0)
      | (1ULL << Java9_v2Parser::T__1)
      | (1ULL << Java9_v2Parser::T__2)
      | (1ULL << Java9_v2Parser::T__3)
      | (1ULL << Java9_v2Parser::T__4)
      | (1ULL << Java9_v2Parser::T__5)
      | (1ULL << Java9_v2Parser::T__6)
      | (1ULL << Java9_v2Parser::T__7)
      | (1ULL << Java9_v2Parser::T__8))) != 0) || _la == Java9_v2Parser::Identifier) {
      setState(1861);
      identifier();
    }
    setState(1864);
    match(Java9_v2Parser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ContinueStatementContext ------------------------------------------------------------------

Java9_v2Parser::ContinueStatementContext::ContinueStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::ContinueStatementContext::CONTINUE() {
  return getToken(Java9_v2Parser::CONTINUE, 0);
}

tree::TerminalNode* Java9_v2Parser::ContinueStatementContext::SEMI() {
  return getToken(Java9_v2Parser::SEMI, 0);
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::ContinueStatementContext::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}


size_t Java9_v2Parser::ContinueStatementContext::getRuleIndex() const {
  return Java9_v2Parser::RuleContinueStatement;
}

void Java9_v2Parser::ContinueStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterContinueStatement(this);
}

void Java9_v2Parser::ContinueStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitContinueStatement(this);
}


antlrcpp::Any Java9_v2Parser::ContinueStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitContinueStatement(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::ContinueStatementContext* Java9_v2Parser::continueStatement() {
  ContinueStatementContext *_localctx = _tracker.createInstance<ContinueStatementContext>(_ctx, getState());
  enterRule(_localctx, 334, Java9_v2Parser::RuleContinueStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1866);
    match(Java9_v2Parser::CONTINUE);
    setState(1868);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << Java9_v2Parser::T__0)
      | (1ULL << Java9_v2Parser::T__1)
      | (1ULL << Java9_v2Parser::T__2)
      | (1ULL << Java9_v2Parser::T__3)
      | (1ULL << Java9_v2Parser::T__4)
      | (1ULL << Java9_v2Parser::T__5)
      | (1ULL << Java9_v2Parser::T__6)
      | (1ULL << Java9_v2Parser::T__7)
      | (1ULL << Java9_v2Parser::T__8))) != 0) || _la == Java9_v2Parser::Identifier) {
      setState(1867);
      identifier();
    }
    setState(1870);
    match(Java9_v2Parser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReturnStatementContext ------------------------------------------------------------------

Java9_v2Parser::ReturnStatementContext::ReturnStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::ReturnStatementContext::RETURN() {
  return getToken(Java9_v2Parser::RETURN, 0);
}

tree::TerminalNode* Java9_v2Parser::ReturnStatementContext::SEMI() {
  return getToken(Java9_v2Parser::SEMI, 0);
}

Java9_v2Parser::ExpressionContext* Java9_v2Parser::ReturnStatementContext::expression() {
  return getRuleContext<Java9_v2Parser::ExpressionContext>(0);
}


size_t Java9_v2Parser::ReturnStatementContext::getRuleIndex() const {
  return Java9_v2Parser::RuleReturnStatement;
}

void Java9_v2Parser::ReturnStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReturnStatement(this);
}

void Java9_v2Parser::ReturnStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReturnStatement(this);
}


antlrcpp::Any Java9_v2Parser::ReturnStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitReturnStatement(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::ReturnStatementContext* Java9_v2Parser::returnStatement() {
  ReturnStatementContext *_localctx = _tracker.createInstance<ReturnStatementContext>(_ctx, getState());
  enterRule(_localctx, 336, Java9_v2Parser::RuleReturnStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1872);
    match(Java9_v2Parser::RETURN);
    setState(1874);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << Java9_v2Parser::T__0)
      | (1ULL << Java9_v2Parser::T__1)
      | (1ULL << Java9_v2Parser::T__2)
      | (1ULL << Java9_v2Parser::T__3)
      | (1ULL << Java9_v2Parser::T__4)
      | (1ULL << Java9_v2Parser::T__5)
      | (1ULL << Java9_v2Parser::T__6)
      | (1ULL << Java9_v2Parser::T__7)
      | (1ULL << Java9_v2Parser::T__8)
      | (1ULL << Java9_v2Parser::BOOLEAN)
      | (1ULL << Java9_v2Parser::BYTE)
      | (1ULL << Java9_v2Parser::CHAR)
      | (1ULL << Java9_v2Parser::DOUBLE)
      | (1ULL << Java9_v2Parser::FLOAT)
      | (1ULL << Java9_v2Parser::INT)
      | (1ULL << Java9_v2Parser::LONG)
      | (1ULL << Java9_v2Parser::NEW)
      | (1ULL << Java9_v2Parser::SHORT)
      | (1ULL << Java9_v2Parser::SUPER)
      | (1ULL << Java9_v2Parser::THIS)
      | (1ULL << Java9_v2Parser::VOID)
      | (1ULL << Java9_v2Parser::IntegerLiteral)
      | (1ULL << Java9_v2Parser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (Java9_v2Parser::BooleanLiteral - 64))
      | (1ULL << (Java9_v2Parser::CharacterLiteral - 64))
      | (1ULL << (Java9_v2Parser::StringLiteral - 64))
      | (1ULL << (Java9_v2Parser::NullLiteral - 64))
      | (1ULL << (Java9_v2Parser::LPAREN - 64))
      | (1ULL << (Java9_v2Parser::AT - 64))
      | (1ULL << (Java9_v2Parser::BANG - 64))
      | (1ULL << (Java9_v2Parser::TILDE - 64))
      | (1ULL << (Java9_v2Parser::INC - 64))
      | (1ULL << (Java9_v2Parser::DEC - 64))
      | (1ULL << (Java9_v2Parser::ADD - 64))
      | (1ULL << (Java9_v2Parser::SUB - 64))
      | (1ULL << (Java9_v2Parser::Identifier - 64)))) != 0)) {
      setState(1873);
      expression();
    }
    setState(1876);
    match(Java9_v2Parser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ThrowStatementContext ------------------------------------------------------------------

Java9_v2Parser::ThrowStatementContext::ThrowStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::ThrowStatementContext::THROW() {
  return getToken(Java9_v2Parser::THROW, 0);
}

Java9_v2Parser::ExpressionContext* Java9_v2Parser::ThrowStatementContext::expression() {
  return getRuleContext<Java9_v2Parser::ExpressionContext>(0);
}

tree::TerminalNode* Java9_v2Parser::ThrowStatementContext::SEMI() {
  return getToken(Java9_v2Parser::SEMI, 0);
}


size_t Java9_v2Parser::ThrowStatementContext::getRuleIndex() const {
  return Java9_v2Parser::RuleThrowStatement;
}

void Java9_v2Parser::ThrowStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterThrowStatement(this);
}

void Java9_v2Parser::ThrowStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitThrowStatement(this);
}


antlrcpp::Any Java9_v2Parser::ThrowStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitThrowStatement(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::ThrowStatementContext* Java9_v2Parser::throwStatement() {
  ThrowStatementContext *_localctx = _tracker.createInstance<ThrowStatementContext>(_ctx, getState());
  enterRule(_localctx, 338, Java9_v2Parser::RuleThrowStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1878);
    match(Java9_v2Parser::THROW);
    setState(1879);
    expression();
    setState(1880);
    match(Java9_v2Parser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SynchronizedStatementContext ------------------------------------------------------------------

Java9_v2Parser::SynchronizedStatementContext::SynchronizedStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::SynchronizedStatementContext::SYNCHRONIZED() {
  return getToken(Java9_v2Parser::SYNCHRONIZED, 0);
}

tree::TerminalNode* Java9_v2Parser::SynchronizedStatementContext::LPAREN() {
  return getToken(Java9_v2Parser::LPAREN, 0);
}

Java9_v2Parser::ExpressionContext* Java9_v2Parser::SynchronizedStatementContext::expression() {
  return getRuleContext<Java9_v2Parser::ExpressionContext>(0);
}

tree::TerminalNode* Java9_v2Parser::SynchronizedStatementContext::RPAREN() {
  return getToken(Java9_v2Parser::RPAREN, 0);
}

Java9_v2Parser::BlockContext* Java9_v2Parser::SynchronizedStatementContext::block() {
  return getRuleContext<Java9_v2Parser::BlockContext>(0);
}


size_t Java9_v2Parser::SynchronizedStatementContext::getRuleIndex() const {
  return Java9_v2Parser::RuleSynchronizedStatement;
}

void Java9_v2Parser::SynchronizedStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSynchronizedStatement(this);
}

void Java9_v2Parser::SynchronizedStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSynchronizedStatement(this);
}


antlrcpp::Any Java9_v2Parser::SynchronizedStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitSynchronizedStatement(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::SynchronizedStatementContext* Java9_v2Parser::synchronizedStatement() {
  SynchronizedStatementContext *_localctx = _tracker.createInstance<SynchronizedStatementContext>(_ctx, getState());
  enterRule(_localctx, 340, Java9_v2Parser::RuleSynchronizedStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1882);
    match(Java9_v2Parser::SYNCHRONIZED);
    setState(1883);
    match(Java9_v2Parser::LPAREN);
    setState(1884);
    expression();
    setState(1885);
    match(Java9_v2Parser::RPAREN);
    setState(1886);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TryStatementContext ------------------------------------------------------------------

Java9_v2Parser::TryStatementContext::TryStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::TryStatementContext::getRuleIndex() const {
  return Java9_v2Parser::RuleTryStatement;
}

void Java9_v2Parser::TryStatementContext::copyFrom(TryStatementContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- TryStatement2Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::TryStatement2Context::TRY() {
  return getToken(Java9_v2Parser::TRY, 0);
}

Java9_v2Parser::BlockContext* Java9_v2Parser::TryStatement2Context::block() {
  return getRuleContext<Java9_v2Parser::BlockContext>(0);
}

Java9_v2Parser::Finally_Context* Java9_v2Parser::TryStatement2Context::finally_() {
  return getRuleContext<Java9_v2Parser::Finally_Context>(0);
}

Java9_v2Parser::CatchesContext* Java9_v2Parser::TryStatement2Context::catches() {
  return getRuleContext<Java9_v2Parser::CatchesContext>(0);
}

Java9_v2Parser::TryStatement2Context::TryStatement2Context(TryStatementContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::TryStatement2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTryStatement2(this);
}
void Java9_v2Parser::TryStatement2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTryStatement2(this);
}

antlrcpp::Any Java9_v2Parser::TryStatement2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitTryStatement2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TryStatement3Context ------------------------------------------------------------------

Java9_v2Parser::TryWithResourcesStatementContext* Java9_v2Parser::TryStatement3Context::tryWithResourcesStatement() {
  return getRuleContext<Java9_v2Parser::TryWithResourcesStatementContext>(0);
}

Java9_v2Parser::TryStatement3Context::TryStatement3Context(TryStatementContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::TryStatement3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTryStatement3(this);
}
void Java9_v2Parser::TryStatement3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTryStatement3(this);
}

antlrcpp::Any Java9_v2Parser::TryStatement3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitTryStatement3(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TryStatement1Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::TryStatement1Context::TRY() {
  return getToken(Java9_v2Parser::TRY, 0);
}

Java9_v2Parser::BlockContext* Java9_v2Parser::TryStatement1Context::block() {
  return getRuleContext<Java9_v2Parser::BlockContext>(0);
}

Java9_v2Parser::CatchesContext* Java9_v2Parser::TryStatement1Context::catches() {
  return getRuleContext<Java9_v2Parser::CatchesContext>(0);
}

Java9_v2Parser::TryStatement1Context::TryStatement1Context(TryStatementContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::TryStatement1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTryStatement1(this);
}
void Java9_v2Parser::TryStatement1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTryStatement1(this);
}

antlrcpp::Any Java9_v2Parser::TryStatement1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitTryStatement1(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::TryStatementContext* Java9_v2Parser::tryStatement() {
  TryStatementContext *_localctx = _tracker.createInstance<TryStatementContext>(_ctx, getState());
  enterRule(_localctx, 342, Java9_v2Parser::RuleTryStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1900);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 193, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<TryStatementContext *>(_tracker.createInstance<Java9_v2Parser::TryStatement1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(1888);
      match(Java9_v2Parser::TRY);
      setState(1889);
      block();
      setState(1890);
      catches();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<TryStatementContext *>(_tracker.createInstance<Java9_v2Parser::TryStatement2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(1892);
      match(Java9_v2Parser::TRY);
      setState(1893);
      block();
      setState(1895);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java9_v2Parser::CATCH) {
        setState(1894);
        catches();
      }
      setState(1897);
      finally_();
      break;
    }

    case 3: {
      _localctx = dynamic_cast<TryStatementContext *>(_tracker.createInstance<Java9_v2Parser::TryStatement3Context>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(1899);
      tryWithResourcesStatement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CatchesContext ------------------------------------------------------------------

Java9_v2Parser::CatchesContext::CatchesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Java9_v2Parser::CatchClauseContext *> Java9_v2Parser::CatchesContext::catchClause() {
  return getRuleContexts<Java9_v2Parser::CatchClauseContext>();
}

Java9_v2Parser::CatchClauseContext* Java9_v2Parser::CatchesContext::catchClause(size_t i) {
  return getRuleContext<Java9_v2Parser::CatchClauseContext>(i);
}


size_t Java9_v2Parser::CatchesContext::getRuleIndex() const {
  return Java9_v2Parser::RuleCatches;
}

void Java9_v2Parser::CatchesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCatches(this);
}

void Java9_v2Parser::CatchesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCatches(this);
}


antlrcpp::Any Java9_v2Parser::CatchesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitCatches(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::CatchesContext* Java9_v2Parser::catches() {
  CatchesContext *_localctx = _tracker.createInstance<CatchesContext>(_ctx, getState());
  enterRule(_localctx, 344, Java9_v2Parser::RuleCatches);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1903); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1902);
      catchClause();
      setState(1905); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == Java9_v2Parser::CATCH);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CatchClauseContext ------------------------------------------------------------------

Java9_v2Parser::CatchClauseContext::CatchClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::CatchClauseContext::CATCH() {
  return getToken(Java9_v2Parser::CATCH, 0);
}

tree::TerminalNode* Java9_v2Parser::CatchClauseContext::LPAREN() {
  return getToken(Java9_v2Parser::LPAREN, 0);
}

Java9_v2Parser::CatchFormalParameterContext* Java9_v2Parser::CatchClauseContext::catchFormalParameter() {
  return getRuleContext<Java9_v2Parser::CatchFormalParameterContext>(0);
}

tree::TerminalNode* Java9_v2Parser::CatchClauseContext::RPAREN() {
  return getToken(Java9_v2Parser::RPAREN, 0);
}

Java9_v2Parser::BlockContext* Java9_v2Parser::CatchClauseContext::block() {
  return getRuleContext<Java9_v2Parser::BlockContext>(0);
}


size_t Java9_v2Parser::CatchClauseContext::getRuleIndex() const {
  return Java9_v2Parser::RuleCatchClause;
}

void Java9_v2Parser::CatchClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCatchClause(this);
}

void Java9_v2Parser::CatchClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCatchClause(this);
}


antlrcpp::Any Java9_v2Parser::CatchClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitCatchClause(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::CatchClauseContext* Java9_v2Parser::catchClause() {
  CatchClauseContext *_localctx = _tracker.createInstance<CatchClauseContext>(_ctx, getState());
  enterRule(_localctx, 346, Java9_v2Parser::RuleCatchClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1907);
    match(Java9_v2Parser::CATCH);
    setState(1908);
    match(Java9_v2Parser::LPAREN);
    setState(1909);
    catchFormalParameter();
    setState(1910);
    match(Java9_v2Parser::RPAREN);
    setState(1911);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CatchFormalParameterContext ------------------------------------------------------------------

Java9_v2Parser::CatchFormalParameterContext::CatchFormalParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::CatchTypeContext* Java9_v2Parser::CatchFormalParameterContext::catchType() {
  return getRuleContext<Java9_v2Parser::CatchTypeContext>(0);
}

Java9_v2Parser::VariableDeclaratorIdContext* Java9_v2Parser::CatchFormalParameterContext::variableDeclaratorId() {
  return getRuleContext<Java9_v2Parser::VariableDeclaratorIdContext>(0);
}

std::vector<Java9_v2Parser::VariableModifierContext *> Java9_v2Parser::CatchFormalParameterContext::variableModifier() {
  return getRuleContexts<Java9_v2Parser::VariableModifierContext>();
}

Java9_v2Parser::VariableModifierContext* Java9_v2Parser::CatchFormalParameterContext::variableModifier(size_t i) {
  return getRuleContext<Java9_v2Parser::VariableModifierContext>(i);
}


size_t Java9_v2Parser::CatchFormalParameterContext::getRuleIndex() const {
  return Java9_v2Parser::RuleCatchFormalParameter;
}

void Java9_v2Parser::CatchFormalParameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCatchFormalParameter(this);
}

void Java9_v2Parser::CatchFormalParameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCatchFormalParameter(this);
}


antlrcpp::Any Java9_v2Parser::CatchFormalParameterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitCatchFormalParameter(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::CatchFormalParameterContext* Java9_v2Parser::catchFormalParameter() {
  CatchFormalParameterContext *_localctx = _tracker.createInstance<CatchFormalParameterContext>(_ctx, getState());
  enterRule(_localctx, 348, Java9_v2Parser::RuleCatchFormalParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1916);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java9_v2Parser::FINAL

    || _la == Java9_v2Parser::AT) {
      setState(1913);
      variableModifier();
      setState(1918);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1919);
    catchType();
    setState(1920);
    variableDeclaratorId();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CatchTypeContext ------------------------------------------------------------------

Java9_v2Parser::CatchTypeContext::CatchTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::UnannClassTypeContext* Java9_v2Parser::CatchTypeContext::unannClassType() {
  return getRuleContext<Java9_v2Parser::UnannClassTypeContext>(0);
}

std::vector<tree::TerminalNode *> Java9_v2Parser::CatchTypeContext::BITOR() {
  return getTokens(Java9_v2Parser::BITOR);
}

tree::TerminalNode* Java9_v2Parser::CatchTypeContext::BITOR(size_t i) {
  return getToken(Java9_v2Parser::BITOR, i);
}

std::vector<Java9_v2Parser::ClassTypeContext *> Java9_v2Parser::CatchTypeContext::classType() {
  return getRuleContexts<Java9_v2Parser::ClassTypeContext>();
}

Java9_v2Parser::ClassTypeContext* Java9_v2Parser::CatchTypeContext::classType(size_t i) {
  return getRuleContext<Java9_v2Parser::ClassTypeContext>(i);
}


size_t Java9_v2Parser::CatchTypeContext::getRuleIndex() const {
  return Java9_v2Parser::RuleCatchType;
}

void Java9_v2Parser::CatchTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCatchType(this);
}

void Java9_v2Parser::CatchTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCatchType(this);
}


antlrcpp::Any Java9_v2Parser::CatchTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitCatchType(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::CatchTypeContext* Java9_v2Parser::catchType() {
  CatchTypeContext *_localctx = _tracker.createInstance<CatchTypeContext>(_ctx, getState());
  enterRule(_localctx, 350, Java9_v2Parser::RuleCatchType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1922);
    unannClassType();
    setState(1927);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java9_v2Parser::BITOR) {
      setState(1923);
      match(Java9_v2Parser::BITOR);
      setState(1924);
      classType();
      setState(1929);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Finally_Context ------------------------------------------------------------------

Java9_v2Parser::Finally_Context::Finally_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::Finally_Context::FINALLY() {
  return getToken(Java9_v2Parser::FINALLY, 0);
}

Java9_v2Parser::BlockContext* Java9_v2Parser::Finally_Context::block() {
  return getRuleContext<Java9_v2Parser::BlockContext>(0);
}


size_t Java9_v2Parser::Finally_Context::getRuleIndex() const {
  return Java9_v2Parser::RuleFinally_;
}

void Java9_v2Parser::Finally_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFinally_(this);
}

void Java9_v2Parser::Finally_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFinally_(this);
}


antlrcpp::Any Java9_v2Parser::Finally_Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitFinally_(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::Finally_Context* Java9_v2Parser::finally_() {
  Finally_Context *_localctx = _tracker.createInstance<Finally_Context>(_ctx, getState());
  enterRule(_localctx, 352, Java9_v2Parser::RuleFinally_);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1930);
    match(Java9_v2Parser::FINALLY);
    setState(1931);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TryWithResourcesStatementContext ------------------------------------------------------------------

Java9_v2Parser::TryWithResourcesStatementContext::TryWithResourcesStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::TryWithResourcesStatementContext::TRY() {
  return getToken(Java9_v2Parser::TRY, 0);
}

Java9_v2Parser::ResourceSpecificationContext* Java9_v2Parser::TryWithResourcesStatementContext::resourceSpecification() {
  return getRuleContext<Java9_v2Parser::ResourceSpecificationContext>(0);
}

Java9_v2Parser::BlockContext* Java9_v2Parser::TryWithResourcesStatementContext::block() {
  return getRuleContext<Java9_v2Parser::BlockContext>(0);
}

Java9_v2Parser::CatchesContext* Java9_v2Parser::TryWithResourcesStatementContext::catches() {
  return getRuleContext<Java9_v2Parser::CatchesContext>(0);
}

Java9_v2Parser::Finally_Context* Java9_v2Parser::TryWithResourcesStatementContext::finally_() {
  return getRuleContext<Java9_v2Parser::Finally_Context>(0);
}


size_t Java9_v2Parser::TryWithResourcesStatementContext::getRuleIndex() const {
  return Java9_v2Parser::RuleTryWithResourcesStatement;
}

void Java9_v2Parser::TryWithResourcesStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTryWithResourcesStatement(this);
}

void Java9_v2Parser::TryWithResourcesStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTryWithResourcesStatement(this);
}


antlrcpp::Any Java9_v2Parser::TryWithResourcesStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitTryWithResourcesStatement(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::TryWithResourcesStatementContext* Java9_v2Parser::tryWithResourcesStatement() {
  TryWithResourcesStatementContext *_localctx = _tracker.createInstance<TryWithResourcesStatementContext>(_ctx, getState());
  enterRule(_localctx, 354, Java9_v2Parser::RuleTryWithResourcesStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1933);
    match(Java9_v2Parser::TRY);
    setState(1934);
    resourceSpecification();
    setState(1935);
    block();
    setState(1937);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java9_v2Parser::CATCH) {
      setState(1936);
      catches();
    }
    setState(1940);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java9_v2Parser::FINALLY) {
      setState(1939);
      finally_();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ResourceSpecificationContext ------------------------------------------------------------------

Java9_v2Parser::ResourceSpecificationContext::ResourceSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::ResourceSpecificationContext::LPAREN() {
  return getToken(Java9_v2Parser::LPAREN, 0);
}

Java9_v2Parser::ResourceListContext* Java9_v2Parser::ResourceSpecificationContext::resourceList() {
  return getRuleContext<Java9_v2Parser::ResourceListContext>(0);
}

tree::TerminalNode* Java9_v2Parser::ResourceSpecificationContext::RPAREN() {
  return getToken(Java9_v2Parser::RPAREN, 0);
}

tree::TerminalNode* Java9_v2Parser::ResourceSpecificationContext::SEMI() {
  return getToken(Java9_v2Parser::SEMI, 0);
}


size_t Java9_v2Parser::ResourceSpecificationContext::getRuleIndex() const {
  return Java9_v2Parser::RuleResourceSpecification;
}

void Java9_v2Parser::ResourceSpecificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterResourceSpecification(this);
}

void Java9_v2Parser::ResourceSpecificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitResourceSpecification(this);
}


antlrcpp::Any Java9_v2Parser::ResourceSpecificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitResourceSpecification(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::ResourceSpecificationContext* Java9_v2Parser::resourceSpecification() {
  ResourceSpecificationContext *_localctx = _tracker.createInstance<ResourceSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 356, Java9_v2Parser::RuleResourceSpecification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1942);
    match(Java9_v2Parser::LPAREN);
    setState(1943);
    resourceList();
    setState(1945);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java9_v2Parser::SEMI) {
      setState(1944);
      match(Java9_v2Parser::SEMI);
    }
    setState(1947);
    match(Java9_v2Parser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ResourceListContext ------------------------------------------------------------------

Java9_v2Parser::ResourceListContext::ResourceListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Java9_v2Parser::ResourceContext *> Java9_v2Parser::ResourceListContext::resource() {
  return getRuleContexts<Java9_v2Parser::ResourceContext>();
}

Java9_v2Parser::ResourceContext* Java9_v2Parser::ResourceListContext::resource(size_t i) {
  return getRuleContext<Java9_v2Parser::ResourceContext>(i);
}

std::vector<tree::TerminalNode *> Java9_v2Parser::ResourceListContext::SEMI() {
  return getTokens(Java9_v2Parser::SEMI);
}

tree::TerminalNode* Java9_v2Parser::ResourceListContext::SEMI(size_t i) {
  return getToken(Java9_v2Parser::SEMI, i);
}


size_t Java9_v2Parser::ResourceListContext::getRuleIndex() const {
  return Java9_v2Parser::RuleResourceList;
}

void Java9_v2Parser::ResourceListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterResourceList(this);
}

void Java9_v2Parser::ResourceListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitResourceList(this);
}


antlrcpp::Any Java9_v2Parser::ResourceListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitResourceList(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::ResourceListContext* Java9_v2Parser::resourceList() {
  ResourceListContext *_localctx = _tracker.createInstance<ResourceListContext>(_ctx, getState());
  enterRule(_localctx, 358, Java9_v2Parser::RuleResourceList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1949);
    resource();
    setState(1954);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 200, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1950);
        match(Java9_v2Parser::SEMI);
        setState(1951);
        resource(); 
      }
      setState(1956);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 200, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ResourceContext ------------------------------------------------------------------

Java9_v2Parser::ResourceContext::ResourceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::ResourceContext::getRuleIndex() const {
  return Java9_v2Parser::RuleResource;
}

void Java9_v2Parser::ResourceContext::copyFrom(ResourceContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- Resource2Context ------------------------------------------------------------------

Java9_v2Parser::VariableAccessContext* Java9_v2Parser::Resource2Context::variableAccess() {
  return getRuleContext<Java9_v2Parser::VariableAccessContext>(0);
}

Java9_v2Parser::Resource2Context::Resource2Context(ResourceContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::Resource2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterResource2(this);
}
void Java9_v2Parser::Resource2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitResource2(this);
}

antlrcpp::Any Java9_v2Parser::Resource2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitResource2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Resource1Context ------------------------------------------------------------------

Java9_v2Parser::UnannTypeContext* Java9_v2Parser::Resource1Context::unannType() {
  return getRuleContext<Java9_v2Parser::UnannTypeContext>(0);
}

Java9_v2Parser::VariableDeclaratorIdContext* Java9_v2Parser::Resource1Context::variableDeclaratorId() {
  return getRuleContext<Java9_v2Parser::VariableDeclaratorIdContext>(0);
}

tree::TerminalNode* Java9_v2Parser::Resource1Context::ASSIGN() {
  return getToken(Java9_v2Parser::ASSIGN, 0);
}

Java9_v2Parser::ExpressionContext* Java9_v2Parser::Resource1Context::expression() {
  return getRuleContext<Java9_v2Parser::ExpressionContext>(0);
}

std::vector<Java9_v2Parser::VariableModifierContext *> Java9_v2Parser::Resource1Context::variableModifier() {
  return getRuleContexts<Java9_v2Parser::VariableModifierContext>();
}

Java9_v2Parser::VariableModifierContext* Java9_v2Parser::Resource1Context::variableModifier(size_t i) {
  return getRuleContext<Java9_v2Parser::VariableModifierContext>(i);
}

Java9_v2Parser::Resource1Context::Resource1Context(ResourceContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::Resource1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterResource1(this);
}
void Java9_v2Parser::Resource1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitResource1(this);
}

antlrcpp::Any Java9_v2Parser::Resource1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitResource1(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::ResourceContext* Java9_v2Parser::resource() {
  ResourceContext *_localctx = _tracker.createInstance<ResourceContext>(_ctx, getState());
  enterRule(_localctx, 360, Java9_v2Parser::RuleResource);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1969);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 202, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<ResourceContext *>(_tracker.createInstance<Java9_v2Parser::Resource1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(1960);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Java9_v2Parser::FINAL

      || _la == Java9_v2Parser::AT) {
        setState(1957);
        variableModifier();
        setState(1962);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1963);
      unannType();
      setState(1964);
      variableDeclaratorId();
      setState(1965);
      match(Java9_v2Parser::ASSIGN);
      setState(1966);
      expression();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<ResourceContext *>(_tracker.createInstance<Java9_v2Parser::Resource2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(1968);
      variableAccess();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableAccessContext ------------------------------------------------------------------

Java9_v2Parser::VariableAccessContext::VariableAccessContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::VariableAccessContext::getRuleIndex() const {
  return Java9_v2Parser::RuleVariableAccess;
}

void Java9_v2Parser::VariableAccessContext::copyFrom(VariableAccessContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- VariableAccess1Context ------------------------------------------------------------------

Java9_v2Parser::ExpressionNameContext* Java9_v2Parser::VariableAccess1Context::expressionName() {
  return getRuleContext<Java9_v2Parser::ExpressionNameContext>(0);
}

Java9_v2Parser::VariableAccess1Context::VariableAccess1Context(VariableAccessContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::VariableAccess1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariableAccess1(this);
}
void Java9_v2Parser::VariableAccess1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariableAccess1(this);
}

antlrcpp::Any Java9_v2Parser::VariableAccess1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitVariableAccess1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- VariableAccess2Context ------------------------------------------------------------------

Java9_v2Parser::FieldAccessContext* Java9_v2Parser::VariableAccess2Context::fieldAccess() {
  return getRuleContext<Java9_v2Parser::FieldAccessContext>(0);
}

Java9_v2Parser::VariableAccess2Context::VariableAccess2Context(VariableAccessContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::VariableAccess2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariableAccess2(this);
}
void Java9_v2Parser::VariableAccess2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariableAccess2(this);
}

antlrcpp::Any Java9_v2Parser::VariableAccess2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitVariableAccess2(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::VariableAccessContext* Java9_v2Parser::variableAccess() {
  VariableAccessContext *_localctx = _tracker.createInstance<VariableAccessContext>(_ctx, getState());
  enterRule(_localctx, 362, Java9_v2Parser::RuleVariableAccess);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1973);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 203, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<VariableAccessContext *>(_tracker.createInstance<Java9_v2Parser::VariableAccess1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(1971);
      expressionName();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<VariableAccessContext *>(_tracker.createInstance<Java9_v2Parser::VariableAccess2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(1972);
      fieldAccess();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryContext ------------------------------------------------------------------

Java9_v2Parser::PrimaryContext::PrimaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::PrimaryNoNewArray_lfno_primaryContext* Java9_v2Parser::PrimaryContext::primaryNoNewArray_lfno_primary() {
  return getRuleContext<Java9_v2Parser::PrimaryNoNewArray_lfno_primaryContext>(0);
}

Java9_v2Parser::ArrayCreationExpressionContext* Java9_v2Parser::PrimaryContext::arrayCreationExpression() {
  return getRuleContext<Java9_v2Parser::ArrayCreationExpressionContext>(0);
}

std::vector<Java9_v2Parser::PrimaryNoNewArray_lf_primaryContext *> Java9_v2Parser::PrimaryContext::primaryNoNewArray_lf_primary() {
  return getRuleContexts<Java9_v2Parser::PrimaryNoNewArray_lf_primaryContext>();
}

Java9_v2Parser::PrimaryNoNewArray_lf_primaryContext* Java9_v2Parser::PrimaryContext::primaryNoNewArray_lf_primary(size_t i) {
  return getRuleContext<Java9_v2Parser::PrimaryNoNewArray_lf_primaryContext>(i);
}


size_t Java9_v2Parser::PrimaryContext::getRuleIndex() const {
  return Java9_v2Parser::RulePrimary;
}

void Java9_v2Parser::PrimaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimary(this);
}

void Java9_v2Parser::PrimaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimary(this);
}


antlrcpp::Any Java9_v2Parser::PrimaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimary(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::PrimaryContext* Java9_v2Parser::primary() {
  PrimaryContext *_localctx = _tracker.createInstance<PrimaryContext>(_ctx, getState());
  enterRule(_localctx, 364, Java9_v2Parser::RulePrimary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1977);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 204, _ctx)) {
    case 1: {
      setState(1975);
      primaryNoNewArray_lfno_primary();
      break;
    }

    case 2: {
      setState(1976);
      arrayCreationExpression();
      break;
    }

    default:
      break;
    }
    setState(1982);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 205, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1979);
        primaryNoNewArray_lf_primary(); 
      }
      setState(1984);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 205, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryNoNewArrayContext ------------------------------------------------------------------

Java9_v2Parser::PrimaryNoNewArrayContext::PrimaryNoNewArrayContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::PrimaryNoNewArrayContext::getRuleIndex() const {
  return Java9_v2Parser::RulePrimaryNoNewArray;
}

void Java9_v2Parser::PrimaryNoNewArrayContext::copyFrom(PrimaryNoNewArrayContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- PrimaryNoNewArray1Context ------------------------------------------------------------------

Java9_v2Parser::LiteralContext* Java9_v2Parser::PrimaryNoNewArray1Context::literal() {
  return getRuleContext<Java9_v2Parser::LiteralContext>(0);
}

Java9_v2Parser::PrimaryNoNewArray1Context::PrimaryNoNewArray1Context(PrimaryNoNewArrayContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray1(this);
}
void Java9_v2Parser::PrimaryNoNewArray1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray1(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryNoNewArray2Context ------------------------------------------------------------------

Java9_v2Parser::ClassLiteralContext* Java9_v2Parser::PrimaryNoNewArray2Context::classLiteral() {
  return getRuleContext<Java9_v2Parser::ClassLiteralContext>(0);
}

Java9_v2Parser::PrimaryNoNewArray2Context::PrimaryNoNewArray2Context(PrimaryNoNewArrayContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray2(this);
}
void Java9_v2Parser::PrimaryNoNewArray2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray2(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryNoNewArray3Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::PrimaryNoNewArray3Context::THIS() {
  return getToken(Java9_v2Parser::THIS, 0);
}

Java9_v2Parser::PrimaryNoNewArray3Context::PrimaryNoNewArray3Context(PrimaryNoNewArrayContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray3(this);
}
void Java9_v2Parser::PrimaryNoNewArray3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray3(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray3(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryNoNewArray8Context ------------------------------------------------------------------

Java9_v2Parser::ArrayAccessContext* Java9_v2Parser::PrimaryNoNewArray8Context::arrayAccess() {
  return getRuleContext<Java9_v2Parser::ArrayAccessContext>(0);
}

Java9_v2Parser::PrimaryNoNewArray8Context::PrimaryNoNewArray8Context(PrimaryNoNewArrayContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray8Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray8(this);
}
void Java9_v2Parser::PrimaryNoNewArray8Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray8(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray8Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray8(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryNoNewArray9Context ------------------------------------------------------------------

Java9_v2Parser::MethodInvocationContext* Java9_v2Parser::PrimaryNoNewArray9Context::methodInvocation() {
  return getRuleContext<Java9_v2Parser::MethodInvocationContext>(0);
}

Java9_v2Parser::PrimaryNoNewArray9Context::PrimaryNoNewArray9Context(PrimaryNoNewArrayContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray9Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray9(this);
}
void Java9_v2Parser::PrimaryNoNewArray9Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray9(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray9Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray9(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryNoNewArray4Context ------------------------------------------------------------------

Java9_v2Parser::TypeNameContext* Java9_v2Parser::PrimaryNoNewArray4Context::typeName() {
  return getRuleContext<Java9_v2Parser::TypeNameContext>(0);
}

tree::TerminalNode* Java9_v2Parser::PrimaryNoNewArray4Context::DOT() {
  return getToken(Java9_v2Parser::DOT, 0);
}

tree::TerminalNode* Java9_v2Parser::PrimaryNoNewArray4Context::THIS() {
  return getToken(Java9_v2Parser::THIS, 0);
}

Java9_v2Parser::PrimaryNoNewArray4Context::PrimaryNoNewArray4Context(PrimaryNoNewArrayContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray4Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray4(this);
}
void Java9_v2Parser::PrimaryNoNewArray4Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray4(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray4Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray4(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryNoNewArray5Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::PrimaryNoNewArray5Context::LPAREN() {
  return getToken(Java9_v2Parser::LPAREN, 0);
}

Java9_v2Parser::ExpressionContext* Java9_v2Parser::PrimaryNoNewArray5Context::expression() {
  return getRuleContext<Java9_v2Parser::ExpressionContext>(0);
}

tree::TerminalNode* Java9_v2Parser::PrimaryNoNewArray5Context::RPAREN() {
  return getToken(Java9_v2Parser::RPAREN, 0);
}

Java9_v2Parser::PrimaryNoNewArray5Context::PrimaryNoNewArray5Context(PrimaryNoNewArrayContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray5Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray5(this);
}
void Java9_v2Parser::PrimaryNoNewArray5Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray5(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray5Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray5(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryNoNewArray6Context ------------------------------------------------------------------

Java9_v2Parser::ClassInstanceCreationExpressionContext* Java9_v2Parser::PrimaryNoNewArray6Context::classInstanceCreationExpression() {
  return getRuleContext<Java9_v2Parser::ClassInstanceCreationExpressionContext>(0);
}

Java9_v2Parser::PrimaryNoNewArray6Context::PrimaryNoNewArray6Context(PrimaryNoNewArrayContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray6Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray6(this);
}
void Java9_v2Parser::PrimaryNoNewArray6Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray6(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray6Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray6(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryNoNewArray10Context ------------------------------------------------------------------

Java9_v2Parser::MethodReferenceContext* Java9_v2Parser::PrimaryNoNewArray10Context::methodReference() {
  return getRuleContext<Java9_v2Parser::MethodReferenceContext>(0);
}

Java9_v2Parser::PrimaryNoNewArray10Context::PrimaryNoNewArray10Context(PrimaryNoNewArrayContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray10Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray10(this);
}
void Java9_v2Parser::PrimaryNoNewArray10Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray10(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray10Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray10(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryNoNewArray7Context ------------------------------------------------------------------

Java9_v2Parser::FieldAccessContext* Java9_v2Parser::PrimaryNoNewArray7Context::fieldAccess() {
  return getRuleContext<Java9_v2Parser::FieldAccessContext>(0);
}

Java9_v2Parser::PrimaryNoNewArray7Context::PrimaryNoNewArray7Context(PrimaryNoNewArrayContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray7Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray7(this);
}
void Java9_v2Parser::PrimaryNoNewArray7Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray7(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray7Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray7(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::PrimaryNoNewArrayContext* Java9_v2Parser::primaryNoNewArray() {
  PrimaryNoNewArrayContext *_localctx = _tracker.createInstance<PrimaryNoNewArrayContext>(_ctx, getState());
  enterRule(_localctx, 366, Java9_v2Parser::RulePrimaryNoNewArray);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2001);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 206, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<PrimaryNoNewArrayContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(1985);
      literal();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<PrimaryNoNewArrayContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(1986);
      classLiteral();
      break;
    }

    case 3: {
      _localctx = dynamic_cast<PrimaryNoNewArrayContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray3Context>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(1987);
      match(Java9_v2Parser::THIS);
      break;
    }

    case 4: {
      _localctx = dynamic_cast<PrimaryNoNewArrayContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray4Context>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(1988);
      typeName();
      setState(1989);
      match(Java9_v2Parser::DOT);
      setState(1990);
      match(Java9_v2Parser::THIS);
      break;
    }

    case 5: {
      _localctx = dynamic_cast<PrimaryNoNewArrayContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray5Context>(_localctx));
      enterOuterAlt(_localctx, 5);
      setState(1992);
      match(Java9_v2Parser::LPAREN);
      setState(1993);
      expression();
      setState(1994);
      match(Java9_v2Parser::RPAREN);
      break;
    }

    case 6: {
      _localctx = dynamic_cast<PrimaryNoNewArrayContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray6Context>(_localctx));
      enterOuterAlt(_localctx, 6);
      setState(1996);
      classInstanceCreationExpression();
      break;
    }

    case 7: {
      _localctx = dynamic_cast<PrimaryNoNewArrayContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray7Context>(_localctx));
      enterOuterAlt(_localctx, 7);
      setState(1997);
      fieldAccess();
      break;
    }

    case 8: {
      _localctx = dynamic_cast<PrimaryNoNewArrayContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray8Context>(_localctx));
      enterOuterAlt(_localctx, 8);
      setState(1998);
      arrayAccess();
      break;
    }

    case 9: {
      _localctx = dynamic_cast<PrimaryNoNewArrayContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray9Context>(_localctx));
      enterOuterAlt(_localctx, 9);
      setState(1999);
      methodInvocation();
      break;
    }

    case 10: {
      _localctx = dynamic_cast<PrimaryNoNewArrayContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray10Context>(_localctx));
      enterOuterAlt(_localctx, 10);
      setState(2000);
      methodReference();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryNoNewArray_lf_arrayAccessContext ------------------------------------------------------------------

Java9_v2Parser::PrimaryNoNewArray_lf_arrayAccessContext::PrimaryNoNewArray_lf_arrayAccessContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::PrimaryNoNewArray_lf_arrayAccessContext::getRuleIndex() const {
  return Java9_v2Parser::RulePrimaryNoNewArray_lf_arrayAccess;
}

void Java9_v2Parser::PrimaryNoNewArray_lf_arrayAccessContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lf_arrayAccess(this);
}

void Java9_v2Parser::PrimaryNoNewArray_lf_arrayAccessContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lf_arrayAccess(this);
}


antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray_lf_arrayAccessContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray_lf_arrayAccess(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::PrimaryNoNewArray_lf_arrayAccessContext* Java9_v2Parser::primaryNoNewArray_lf_arrayAccess() {
  PrimaryNoNewArray_lf_arrayAccessContext *_localctx = _tracker.createInstance<PrimaryNoNewArray_lf_arrayAccessContext>(_ctx, getState());
  enterRule(_localctx, 368, Java9_v2Parser::RulePrimaryNoNewArray_lf_arrayAccess);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);

   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryNoNewArray_lfno_arrayAccessContext ------------------------------------------------------------------

Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccessContext::PrimaryNoNewArray_lfno_arrayAccessContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccessContext::getRuleIndex() const {
  return Java9_v2Parser::RulePrimaryNoNewArray_lfno_arrayAccess;
}

void Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccessContext::copyFrom(PrimaryNoNewArray_lfno_arrayAccessContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- PrimaryNoNewArray_lfno_arrayAccess6Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess6Context::LPAREN() {
  return getToken(Java9_v2Parser::LPAREN, 0);
}

Java9_v2Parser::ExpressionContext* Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess6Context::expression() {
  return getRuleContext<Java9_v2Parser::ExpressionContext>(0);
}

tree::TerminalNode* Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess6Context::RPAREN() {
  return getToken(Java9_v2Parser::RPAREN, 0);
}

Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess6Context::PrimaryNoNewArray_lfno_arrayAccess6Context(PrimaryNoNewArray_lfno_arrayAccessContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess6Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lfno_arrayAccess6(this);
}
void Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess6Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lfno_arrayAccess6(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess6Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray_lfno_arrayAccess6(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryNoNewArray_lfno_arrayAccess10Context ------------------------------------------------------------------

Java9_v2Parser::MethodReferenceContext* Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess10Context::methodReference() {
  return getRuleContext<Java9_v2Parser::MethodReferenceContext>(0);
}

Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess10Context::PrimaryNoNewArray_lfno_arrayAccess10Context(PrimaryNoNewArray_lfno_arrayAccessContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess10Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lfno_arrayAccess10(this);
}
void Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess10Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lfno_arrayAccess10(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess10Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray_lfno_arrayAccess10(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryNoNewArray_lfno_arrayAccess7Context ------------------------------------------------------------------

Java9_v2Parser::ClassInstanceCreationExpressionContext* Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess7Context::classInstanceCreationExpression() {
  return getRuleContext<Java9_v2Parser::ClassInstanceCreationExpressionContext>(0);
}

Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess7Context::PrimaryNoNewArray_lfno_arrayAccess7Context(PrimaryNoNewArray_lfno_arrayAccessContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess7Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lfno_arrayAccess7(this);
}
void Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess7Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lfno_arrayAccess7(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess7Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray_lfno_arrayAccess7(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryNoNewArray_lfno_arrayAccess4Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess4Context::THIS() {
  return getToken(Java9_v2Parser::THIS, 0);
}

Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess4Context::PrimaryNoNewArray_lfno_arrayAccess4Context(PrimaryNoNewArray_lfno_arrayAccessContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess4Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lfno_arrayAccess4(this);
}
void Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess4Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lfno_arrayAccess4(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess4Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray_lfno_arrayAccess4(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryNoNewArray_lfno_arrayAccess5Context ------------------------------------------------------------------

Java9_v2Parser::TypeNameContext* Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess5Context::typeName() {
  return getRuleContext<Java9_v2Parser::TypeNameContext>(0);
}

tree::TerminalNode* Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess5Context::DOT() {
  return getToken(Java9_v2Parser::DOT, 0);
}

tree::TerminalNode* Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess5Context::THIS() {
  return getToken(Java9_v2Parser::THIS, 0);
}

Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess5Context::PrimaryNoNewArray_lfno_arrayAccess5Context(PrimaryNoNewArray_lfno_arrayAccessContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess5Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lfno_arrayAccess5(this);
}
void Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess5Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lfno_arrayAccess5(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess5Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray_lfno_arrayAccess5(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryNoNewArray_lfno_arrayAccess8Context ------------------------------------------------------------------

Java9_v2Parser::FieldAccessContext* Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess8Context::fieldAccess() {
  return getRuleContext<Java9_v2Parser::FieldAccessContext>(0);
}

Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess8Context::PrimaryNoNewArray_lfno_arrayAccess8Context(PrimaryNoNewArray_lfno_arrayAccessContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess8Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lfno_arrayAccess8(this);
}
void Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess8Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lfno_arrayAccess8(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess8Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray_lfno_arrayAccess8(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryNoNewArray_lfno_arrayAccess9Context ------------------------------------------------------------------

Java9_v2Parser::MethodInvocationContext* Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess9Context::methodInvocation() {
  return getRuleContext<Java9_v2Parser::MethodInvocationContext>(0);
}

Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess9Context::PrimaryNoNewArray_lfno_arrayAccess9Context(PrimaryNoNewArray_lfno_arrayAccessContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess9Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lfno_arrayAccess9(this);
}
void Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess9Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lfno_arrayAccess9(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess9Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray_lfno_arrayAccess9(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryNoNewArray_lfno_arrayAccess2Context ------------------------------------------------------------------

Java9_v2Parser::TypeNameContext* Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess2Context::typeName() {
  return getRuleContext<Java9_v2Parser::TypeNameContext>(0);
}

tree::TerminalNode* Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess2Context::DOT() {
  return getToken(Java9_v2Parser::DOT, 0);
}

tree::TerminalNode* Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess2Context::CLASS() {
  return getToken(Java9_v2Parser::CLASS, 0);
}

std::vector<tree::TerminalNode *> Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess2Context::LBRACK() {
  return getTokens(Java9_v2Parser::LBRACK);
}

tree::TerminalNode* Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess2Context::LBRACK(size_t i) {
  return getToken(Java9_v2Parser::LBRACK, i);
}

std::vector<tree::TerminalNode *> Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess2Context::RBRACK() {
  return getTokens(Java9_v2Parser::RBRACK);
}

tree::TerminalNode* Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess2Context::RBRACK(size_t i) {
  return getToken(Java9_v2Parser::RBRACK, i);
}

Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess2Context::PrimaryNoNewArray_lfno_arrayAccess2Context(PrimaryNoNewArray_lfno_arrayAccessContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lfno_arrayAccess2(this);
}
void Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lfno_arrayAccess2(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray_lfno_arrayAccess2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryNoNewArray_lfno_arrayAccess3Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess3Context::VOID() {
  return getToken(Java9_v2Parser::VOID, 0);
}

tree::TerminalNode* Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess3Context::DOT() {
  return getToken(Java9_v2Parser::DOT, 0);
}

tree::TerminalNode* Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess3Context::CLASS() {
  return getToken(Java9_v2Parser::CLASS, 0);
}

Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess3Context::PrimaryNoNewArray_lfno_arrayAccess3Context(PrimaryNoNewArray_lfno_arrayAccessContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lfno_arrayAccess3(this);
}
void Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lfno_arrayAccess3(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray_lfno_arrayAccess3(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryNoNewArray_lfno_arrayAccess1Context ------------------------------------------------------------------

Java9_v2Parser::LiteralContext* Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess1Context::literal() {
  return getRuleContext<Java9_v2Parser::LiteralContext>(0);
}

Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess1Context::PrimaryNoNewArray_lfno_arrayAccess1Context(PrimaryNoNewArray_lfno_arrayAccessContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lfno_arrayAccess1(this);
}
void Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lfno_arrayAccess1(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray_lfno_arrayAccess1(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccessContext* Java9_v2Parser::primaryNoNewArray_lfno_arrayAccess() {
  PrimaryNoNewArray_lfno_arrayAccessContext *_localctx = _tracker.createInstance<PrimaryNoNewArray_lfno_arrayAccessContext>(_ctx, getState());
  enterRule(_localctx, 370, Java9_v2Parser::RulePrimaryNoNewArray_lfno_arrayAccess);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2033);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 208, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<PrimaryNoNewArray_lfno_arrayAccessContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(2005);
      literal();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<PrimaryNoNewArray_lfno_arrayAccessContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(2006);
      typeName();
      setState(2011);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Java9_v2Parser::LBRACK) {
        setState(2007);
        match(Java9_v2Parser::LBRACK);
        setState(2008);
        match(Java9_v2Parser::RBRACK);
        setState(2013);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2014);
      match(Java9_v2Parser::DOT);
      setState(2015);
      match(Java9_v2Parser::CLASS);
      break;
    }

    case 3: {
      _localctx = dynamic_cast<PrimaryNoNewArray_lfno_arrayAccessContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess3Context>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(2017);
      match(Java9_v2Parser::VOID);
      setState(2018);
      match(Java9_v2Parser::DOT);
      setState(2019);
      match(Java9_v2Parser::CLASS);
      break;
    }

    case 4: {
      _localctx = dynamic_cast<PrimaryNoNewArray_lfno_arrayAccessContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess4Context>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(2020);
      match(Java9_v2Parser::THIS);
      break;
    }

    case 5: {
      _localctx = dynamic_cast<PrimaryNoNewArray_lfno_arrayAccessContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess5Context>(_localctx));
      enterOuterAlt(_localctx, 5);
      setState(2021);
      typeName();
      setState(2022);
      match(Java9_v2Parser::DOT);
      setState(2023);
      match(Java9_v2Parser::THIS);
      break;
    }

    case 6: {
      _localctx = dynamic_cast<PrimaryNoNewArray_lfno_arrayAccessContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess6Context>(_localctx));
      enterOuterAlt(_localctx, 6);
      setState(2025);
      match(Java9_v2Parser::LPAREN);
      setState(2026);
      expression();
      setState(2027);
      match(Java9_v2Parser::RPAREN);
      break;
    }

    case 7: {
      _localctx = dynamic_cast<PrimaryNoNewArray_lfno_arrayAccessContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess7Context>(_localctx));
      enterOuterAlt(_localctx, 7);
      setState(2029);
      classInstanceCreationExpression();
      break;
    }

    case 8: {
      _localctx = dynamic_cast<PrimaryNoNewArray_lfno_arrayAccessContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess8Context>(_localctx));
      enterOuterAlt(_localctx, 8);
      setState(2030);
      fieldAccess();
      break;
    }

    case 9: {
      _localctx = dynamic_cast<PrimaryNoNewArray_lfno_arrayAccessContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess9Context>(_localctx));
      enterOuterAlt(_localctx, 9);
      setState(2031);
      methodInvocation();
      break;
    }

    case 10: {
      _localctx = dynamic_cast<PrimaryNoNewArray_lfno_arrayAccessContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccess10Context>(_localctx));
      enterOuterAlt(_localctx, 10);
      setState(2032);
      methodReference();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryNoNewArray_lf_primaryContext ------------------------------------------------------------------

Java9_v2Parser::PrimaryNoNewArray_lf_primaryContext::PrimaryNoNewArray_lf_primaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::PrimaryNoNewArray_lf_primaryContext::getRuleIndex() const {
  return Java9_v2Parser::RulePrimaryNoNewArray_lf_primary;
}

void Java9_v2Parser::PrimaryNoNewArray_lf_primaryContext::copyFrom(PrimaryNoNewArray_lf_primaryContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- PrimaryNoNewArray_lf_primary2Context ------------------------------------------------------------------

Java9_v2Parser::FieldAccess_lf_primaryContext* Java9_v2Parser::PrimaryNoNewArray_lf_primary2Context::fieldAccess_lf_primary() {
  return getRuleContext<Java9_v2Parser::FieldAccess_lf_primaryContext>(0);
}

Java9_v2Parser::PrimaryNoNewArray_lf_primary2Context::PrimaryNoNewArray_lf_primary2Context(PrimaryNoNewArray_lf_primaryContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray_lf_primary2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lf_primary2(this);
}
void Java9_v2Parser::PrimaryNoNewArray_lf_primary2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lf_primary2(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray_lf_primary2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray_lf_primary2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryNoNewArray_lf_primary3Context ------------------------------------------------------------------

Java9_v2Parser::ArrayAccess_lf_primaryContext* Java9_v2Parser::PrimaryNoNewArray_lf_primary3Context::arrayAccess_lf_primary() {
  return getRuleContext<Java9_v2Parser::ArrayAccess_lf_primaryContext>(0);
}

Java9_v2Parser::PrimaryNoNewArray_lf_primary3Context::PrimaryNoNewArray_lf_primary3Context(PrimaryNoNewArray_lf_primaryContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray_lf_primary3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lf_primary3(this);
}
void Java9_v2Parser::PrimaryNoNewArray_lf_primary3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lf_primary3(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray_lf_primary3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray_lf_primary3(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryNoNewArray_lf_primary1Context ------------------------------------------------------------------

Java9_v2Parser::ClassInstanceCreationExpression_lf_primaryContext* Java9_v2Parser::PrimaryNoNewArray_lf_primary1Context::classInstanceCreationExpression_lf_primary() {
  return getRuleContext<Java9_v2Parser::ClassInstanceCreationExpression_lf_primaryContext>(0);
}

Java9_v2Parser::PrimaryNoNewArray_lf_primary1Context::PrimaryNoNewArray_lf_primary1Context(PrimaryNoNewArray_lf_primaryContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray_lf_primary1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lf_primary1(this);
}
void Java9_v2Parser::PrimaryNoNewArray_lf_primary1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lf_primary1(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray_lf_primary1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray_lf_primary1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryNoNewArray_lf_primary4Context ------------------------------------------------------------------

Java9_v2Parser::MethodInvocation_lf_primaryContext* Java9_v2Parser::PrimaryNoNewArray_lf_primary4Context::methodInvocation_lf_primary() {
  return getRuleContext<Java9_v2Parser::MethodInvocation_lf_primaryContext>(0);
}

Java9_v2Parser::PrimaryNoNewArray_lf_primary4Context::PrimaryNoNewArray_lf_primary4Context(PrimaryNoNewArray_lf_primaryContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray_lf_primary4Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lf_primary4(this);
}
void Java9_v2Parser::PrimaryNoNewArray_lf_primary4Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lf_primary4(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray_lf_primary4Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray_lf_primary4(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryNoNewArray_lf_primary5Context ------------------------------------------------------------------

Java9_v2Parser::MethodReference_lf_primaryContext* Java9_v2Parser::PrimaryNoNewArray_lf_primary5Context::methodReference_lf_primary() {
  return getRuleContext<Java9_v2Parser::MethodReference_lf_primaryContext>(0);
}

Java9_v2Parser::PrimaryNoNewArray_lf_primary5Context::PrimaryNoNewArray_lf_primary5Context(PrimaryNoNewArray_lf_primaryContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray_lf_primary5Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lf_primary5(this);
}
void Java9_v2Parser::PrimaryNoNewArray_lf_primary5Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lf_primary5(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray_lf_primary5Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray_lf_primary5(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::PrimaryNoNewArray_lf_primaryContext* Java9_v2Parser::primaryNoNewArray_lf_primary() {
  PrimaryNoNewArray_lf_primaryContext *_localctx = _tracker.createInstance<PrimaryNoNewArray_lf_primaryContext>(_ctx, getState());
  enterRule(_localctx, 372, Java9_v2Parser::RulePrimaryNoNewArray_lf_primary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2040);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 209, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<PrimaryNoNewArray_lf_primaryContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray_lf_primary1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(2035);
      classInstanceCreationExpression_lf_primary();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<PrimaryNoNewArray_lf_primaryContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray_lf_primary2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(2036);
      fieldAccess_lf_primary();
      break;
    }

    case 3: {
      _localctx = dynamic_cast<PrimaryNoNewArray_lf_primaryContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray_lf_primary3Context>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(2037);
      arrayAccess_lf_primary();
      break;
    }

    case 4: {
      _localctx = dynamic_cast<PrimaryNoNewArray_lf_primaryContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray_lf_primary4Context>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(2038);
      methodInvocation_lf_primary();
      break;
    }

    case 5: {
      _localctx = dynamic_cast<PrimaryNoNewArray_lf_primaryContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray_lf_primary5Context>(_localctx));
      enterOuterAlt(_localctx, 5);
      setState(2039);
      methodReference_lf_primary();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext ------------------------------------------------------------------

Java9_v2Parser::PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext::PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext::getRuleIndex() const {
  return Java9_v2Parser::RulePrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary;
}

void Java9_v2Parser::PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(this);
}

void Java9_v2Parser::PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(this);
}


antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext* Java9_v2Parser::primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary() {
  PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext *_localctx = _tracker.createInstance<PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext>(_ctx, getState());
  enterRule(_localctx, 374, Java9_v2Parser::RulePrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);

   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext ------------------------------------------------------------------

Java9_v2Parser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext::getRuleIndex() const {
  return Java9_v2Parser::RulePrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary;
}

void Java9_v2Parser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext::copyFrom(PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary1Context ------------------------------------------------------------------

Java9_v2Parser::ClassInstanceCreationExpression_lf_primaryContext* Java9_v2Parser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary1Context::classInstanceCreationExpression_lf_primary() {
  return getRuleContext<Java9_v2Parser::ClassInstanceCreationExpression_lf_primaryContext>(0);
}

Java9_v2Parser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary1Context::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary1Context(PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary1(this);
}
void Java9_v2Parser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary1(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary3Context ------------------------------------------------------------------

Java9_v2Parser::MethodInvocation_lf_primaryContext* Java9_v2Parser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary3Context::methodInvocation_lf_primary() {
  return getRuleContext<Java9_v2Parser::MethodInvocation_lf_primaryContext>(0);
}

Java9_v2Parser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary3Context::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary3Context(PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary3(this);
}
void Java9_v2Parser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary3(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary3(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary2Context ------------------------------------------------------------------

Java9_v2Parser::FieldAccess_lf_primaryContext* Java9_v2Parser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary2Context::fieldAccess_lf_primary() {
  return getRuleContext<Java9_v2Parser::FieldAccess_lf_primaryContext>(0);
}

Java9_v2Parser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary2Context::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary2Context(PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary2(this);
}
void Java9_v2Parser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary2(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary4Context ------------------------------------------------------------------

Java9_v2Parser::MethodReference_lf_primaryContext* Java9_v2Parser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary4Context::methodReference_lf_primary() {
  return getRuleContext<Java9_v2Parser::MethodReference_lf_primaryContext>(0);
}

Java9_v2Parser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary4Context::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary4Context(PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary4Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary4(this);
}
void Java9_v2Parser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary4Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary4(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary4Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary4(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext* Java9_v2Parser::primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary() {
  PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext *_localctx = _tracker.createInstance<PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext>(_ctx, getState());
  enterRule(_localctx, 376, Java9_v2Parser::RulePrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2048);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 210, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(2044);
      classInstanceCreationExpression_lf_primary();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(2045);
      fieldAccess_lf_primary();
      break;
    }

    case 3: {
      _localctx = dynamic_cast<PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary3Context>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(2046);
      methodInvocation_lf_primary();
      break;
    }

    case 4: {
      _localctx = dynamic_cast<PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary4Context>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(2047);
      methodReference_lf_primary();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryNoNewArray_lfno_primaryContext ------------------------------------------------------------------

Java9_v2Parser::PrimaryNoNewArray_lfno_primaryContext::PrimaryNoNewArray_lfno_primaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::PrimaryNoNewArray_lfno_primaryContext::getRuleIndex() const {
  return Java9_v2Parser::RulePrimaryNoNewArray_lfno_primary;
}

void Java9_v2Parser::PrimaryNoNewArray_lfno_primaryContext::copyFrom(PrimaryNoNewArray_lfno_primaryContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- PrimaryNoNewArray_lfno_primary9Context ------------------------------------------------------------------

Java9_v2Parser::FieldAccess_lfno_primaryContext* Java9_v2Parser::PrimaryNoNewArray_lfno_primary9Context::fieldAccess_lfno_primary() {
  return getRuleContext<Java9_v2Parser::FieldAccess_lfno_primaryContext>(0);
}

Java9_v2Parser::PrimaryNoNewArray_lfno_primary9Context::PrimaryNoNewArray_lfno_primary9Context(PrimaryNoNewArray_lfno_primaryContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray_lfno_primary9Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lfno_primary9(this);
}
void Java9_v2Parser::PrimaryNoNewArray_lfno_primary9Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lfno_primary9(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray_lfno_primary9Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray_lfno_primary9(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryNoNewArray_lfno_primary5Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::PrimaryNoNewArray_lfno_primary5Context::THIS() {
  return getToken(Java9_v2Parser::THIS, 0);
}

Java9_v2Parser::PrimaryNoNewArray_lfno_primary5Context::PrimaryNoNewArray_lfno_primary5Context(PrimaryNoNewArray_lfno_primaryContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray_lfno_primary5Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lfno_primary5(this);
}
void Java9_v2Parser::PrimaryNoNewArray_lfno_primary5Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lfno_primary5(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray_lfno_primary5Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray_lfno_primary5(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryNoNewArray_lfno_primary6Context ------------------------------------------------------------------

Java9_v2Parser::TypeNameContext* Java9_v2Parser::PrimaryNoNewArray_lfno_primary6Context::typeName() {
  return getRuleContext<Java9_v2Parser::TypeNameContext>(0);
}

tree::TerminalNode* Java9_v2Parser::PrimaryNoNewArray_lfno_primary6Context::DOT() {
  return getToken(Java9_v2Parser::DOT, 0);
}

tree::TerminalNode* Java9_v2Parser::PrimaryNoNewArray_lfno_primary6Context::THIS() {
  return getToken(Java9_v2Parser::THIS, 0);
}

Java9_v2Parser::PrimaryNoNewArray_lfno_primary6Context::PrimaryNoNewArray_lfno_primary6Context(PrimaryNoNewArray_lfno_primaryContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray_lfno_primary6Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lfno_primary6(this);
}
void Java9_v2Parser::PrimaryNoNewArray_lfno_primary6Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lfno_primary6(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray_lfno_primary6Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray_lfno_primary6(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryNoNewArray_lfno_primary7Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::PrimaryNoNewArray_lfno_primary7Context::LPAREN() {
  return getToken(Java9_v2Parser::LPAREN, 0);
}

Java9_v2Parser::ExpressionContext* Java9_v2Parser::PrimaryNoNewArray_lfno_primary7Context::expression() {
  return getRuleContext<Java9_v2Parser::ExpressionContext>(0);
}

tree::TerminalNode* Java9_v2Parser::PrimaryNoNewArray_lfno_primary7Context::RPAREN() {
  return getToken(Java9_v2Parser::RPAREN, 0);
}

Java9_v2Parser::PrimaryNoNewArray_lfno_primary7Context::PrimaryNoNewArray_lfno_primary7Context(PrimaryNoNewArray_lfno_primaryContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray_lfno_primary7Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lfno_primary7(this);
}
void Java9_v2Parser::PrimaryNoNewArray_lfno_primary7Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lfno_primary7(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray_lfno_primary7Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray_lfno_primary7(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryNoNewArray_lfno_primary8Context ------------------------------------------------------------------

Java9_v2Parser::ClassInstanceCreationExpression_lfno_primaryContext* Java9_v2Parser::PrimaryNoNewArray_lfno_primary8Context::classInstanceCreationExpression_lfno_primary() {
  return getRuleContext<Java9_v2Parser::ClassInstanceCreationExpression_lfno_primaryContext>(0);
}

Java9_v2Parser::PrimaryNoNewArray_lfno_primary8Context::PrimaryNoNewArray_lfno_primary8Context(PrimaryNoNewArray_lfno_primaryContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray_lfno_primary8Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lfno_primary8(this);
}
void Java9_v2Parser::PrimaryNoNewArray_lfno_primary8Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lfno_primary8(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray_lfno_primary8Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray_lfno_primary8(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryNoNewArray_lfno_primary1Context ------------------------------------------------------------------

Java9_v2Parser::LiteralContext* Java9_v2Parser::PrimaryNoNewArray_lfno_primary1Context::literal() {
  return getRuleContext<Java9_v2Parser::LiteralContext>(0);
}

Java9_v2Parser::PrimaryNoNewArray_lfno_primary1Context::PrimaryNoNewArray_lfno_primary1Context(PrimaryNoNewArray_lfno_primaryContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray_lfno_primary1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lfno_primary1(this);
}
void Java9_v2Parser::PrimaryNoNewArray_lfno_primary1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lfno_primary1(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray_lfno_primary1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray_lfno_primary1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryNoNewArray_lfno_primary2Context ------------------------------------------------------------------

Java9_v2Parser::TypeNameContext* Java9_v2Parser::PrimaryNoNewArray_lfno_primary2Context::typeName() {
  return getRuleContext<Java9_v2Parser::TypeNameContext>(0);
}

tree::TerminalNode* Java9_v2Parser::PrimaryNoNewArray_lfno_primary2Context::DOT() {
  return getToken(Java9_v2Parser::DOT, 0);
}

tree::TerminalNode* Java9_v2Parser::PrimaryNoNewArray_lfno_primary2Context::CLASS() {
  return getToken(Java9_v2Parser::CLASS, 0);
}

std::vector<tree::TerminalNode *> Java9_v2Parser::PrimaryNoNewArray_lfno_primary2Context::LBRACK() {
  return getTokens(Java9_v2Parser::LBRACK);
}

tree::TerminalNode* Java9_v2Parser::PrimaryNoNewArray_lfno_primary2Context::LBRACK(size_t i) {
  return getToken(Java9_v2Parser::LBRACK, i);
}

std::vector<tree::TerminalNode *> Java9_v2Parser::PrimaryNoNewArray_lfno_primary2Context::RBRACK() {
  return getTokens(Java9_v2Parser::RBRACK);
}

tree::TerminalNode* Java9_v2Parser::PrimaryNoNewArray_lfno_primary2Context::RBRACK(size_t i) {
  return getToken(Java9_v2Parser::RBRACK, i);
}

Java9_v2Parser::PrimaryNoNewArray_lfno_primary2Context::PrimaryNoNewArray_lfno_primary2Context(PrimaryNoNewArray_lfno_primaryContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray_lfno_primary2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lfno_primary2(this);
}
void Java9_v2Parser::PrimaryNoNewArray_lfno_primary2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lfno_primary2(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray_lfno_primary2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray_lfno_primary2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryNoNewArray_lfno_primary12Context ------------------------------------------------------------------

Java9_v2Parser::MethodReference_lfno_primaryContext* Java9_v2Parser::PrimaryNoNewArray_lfno_primary12Context::methodReference_lfno_primary() {
  return getRuleContext<Java9_v2Parser::MethodReference_lfno_primaryContext>(0);
}

Java9_v2Parser::PrimaryNoNewArray_lfno_primary12Context::PrimaryNoNewArray_lfno_primary12Context(PrimaryNoNewArray_lfno_primaryContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray_lfno_primary12Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lfno_primary12(this);
}
void Java9_v2Parser::PrimaryNoNewArray_lfno_primary12Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lfno_primary12(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray_lfno_primary12Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray_lfno_primary12(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryNoNewArray_lfno_primary3Context ------------------------------------------------------------------

Java9_v2Parser::UnannPrimitiveTypeContext* Java9_v2Parser::PrimaryNoNewArray_lfno_primary3Context::unannPrimitiveType() {
  return getRuleContext<Java9_v2Parser::UnannPrimitiveTypeContext>(0);
}

tree::TerminalNode* Java9_v2Parser::PrimaryNoNewArray_lfno_primary3Context::DOT() {
  return getToken(Java9_v2Parser::DOT, 0);
}

tree::TerminalNode* Java9_v2Parser::PrimaryNoNewArray_lfno_primary3Context::CLASS() {
  return getToken(Java9_v2Parser::CLASS, 0);
}

std::vector<tree::TerminalNode *> Java9_v2Parser::PrimaryNoNewArray_lfno_primary3Context::LBRACK() {
  return getTokens(Java9_v2Parser::LBRACK);
}

tree::TerminalNode* Java9_v2Parser::PrimaryNoNewArray_lfno_primary3Context::LBRACK(size_t i) {
  return getToken(Java9_v2Parser::LBRACK, i);
}

std::vector<tree::TerminalNode *> Java9_v2Parser::PrimaryNoNewArray_lfno_primary3Context::RBRACK() {
  return getTokens(Java9_v2Parser::RBRACK);
}

tree::TerminalNode* Java9_v2Parser::PrimaryNoNewArray_lfno_primary3Context::RBRACK(size_t i) {
  return getToken(Java9_v2Parser::RBRACK, i);
}

Java9_v2Parser::PrimaryNoNewArray_lfno_primary3Context::PrimaryNoNewArray_lfno_primary3Context(PrimaryNoNewArray_lfno_primaryContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray_lfno_primary3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lfno_primary3(this);
}
void Java9_v2Parser::PrimaryNoNewArray_lfno_primary3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lfno_primary3(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray_lfno_primary3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray_lfno_primary3(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryNoNewArray_lfno_primary11Context ------------------------------------------------------------------

Java9_v2Parser::MethodInvocation_lfno_primaryContext* Java9_v2Parser::PrimaryNoNewArray_lfno_primary11Context::methodInvocation_lfno_primary() {
  return getRuleContext<Java9_v2Parser::MethodInvocation_lfno_primaryContext>(0);
}

Java9_v2Parser::PrimaryNoNewArray_lfno_primary11Context::PrimaryNoNewArray_lfno_primary11Context(PrimaryNoNewArray_lfno_primaryContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray_lfno_primary11Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lfno_primary11(this);
}
void Java9_v2Parser::PrimaryNoNewArray_lfno_primary11Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lfno_primary11(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray_lfno_primary11Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray_lfno_primary11(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryNoNewArray_lfno_primary4Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::PrimaryNoNewArray_lfno_primary4Context::VOID() {
  return getToken(Java9_v2Parser::VOID, 0);
}

tree::TerminalNode* Java9_v2Parser::PrimaryNoNewArray_lfno_primary4Context::DOT() {
  return getToken(Java9_v2Parser::DOT, 0);
}

tree::TerminalNode* Java9_v2Parser::PrimaryNoNewArray_lfno_primary4Context::CLASS() {
  return getToken(Java9_v2Parser::CLASS, 0);
}

Java9_v2Parser::PrimaryNoNewArray_lfno_primary4Context::PrimaryNoNewArray_lfno_primary4Context(PrimaryNoNewArray_lfno_primaryContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray_lfno_primary4Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lfno_primary4(this);
}
void Java9_v2Parser::PrimaryNoNewArray_lfno_primary4Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lfno_primary4(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray_lfno_primary4Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray_lfno_primary4(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryNoNewArray_lfno_primary10Context ------------------------------------------------------------------

Java9_v2Parser::ArrayAccess_lfno_primaryContext* Java9_v2Parser::PrimaryNoNewArray_lfno_primary10Context::arrayAccess_lfno_primary() {
  return getRuleContext<Java9_v2Parser::ArrayAccess_lfno_primaryContext>(0);
}

Java9_v2Parser::PrimaryNoNewArray_lfno_primary10Context::PrimaryNoNewArray_lfno_primary10Context(PrimaryNoNewArray_lfno_primaryContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray_lfno_primary10Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lfno_primary10(this);
}
void Java9_v2Parser::PrimaryNoNewArray_lfno_primary10Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lfno_primary10(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray_lfno_primary10Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray_lfno_primary10(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::PrimaryNoNewArray_lfno_primaryContext* Java9_v2Parser::primaryNoNewArray_lfno_primary() {
  PrimaryNoNewArray_lfno_primaryContext *_localctx = _tracker.createInstance<PrimaryNoNewArray_lfno_primaryContext>(_ctx, getState());
  enterRule(_localctx, 378, Java9_v2Parser::RulePrimaryNoNewArray_lfno_primary);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2090);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 213, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<PrimaryNoNewArray_lfno_primaryContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray_lfno_primary1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(2050);
      literal();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<PrimaryNoNewArray_lfno_primaryContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray_lfno_primary2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(2051);
      typeName();
      setState(2056);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Java9_v2Parser::LBRACK) {
        setState(2052);
        match(Java9_v2Parser::LBRACK);
        setState(2053);
        match(Java9_v2Parser::RBRACK);
        setState(2058);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2059);
      match(Java9_v2Parser::DOT);
      setState(2060);
      match(Java9_v2Parser::CLASS);
      break;
    }

    case 3: {
      _localctx = dynamic_cast<PrimaryNoNewArray_lfno_primaryContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray_lfno_primary3Context>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(2062);
      unannPrimitiveType();
      setState(2067);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Java9_v2Parser::LBRACK) {
        setState(2063);
        match(Java9_v2Parser::LBRACK);
        setState(2064);
        match(Java9_v2Parser::RBRACK);
        setState(2069);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2070);
      match(Java9_v2Parser::DOT);
      setState(2071);
      match(Java9_v2Parser::CLASS);
      break;
    }

    case 4: {
      _localctx = dynamic_cast<PrimaryNoNewArray_lfno_primaryContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray_lfno_primary4Context>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(2073);
      match(Java9_v2Parser::VOID);
      setState(2074);
      match(Java9_v2Parser::DOT);
      setState(2075);
      match(Java9_v2Parser::CLASS);
      break;
    }

    case 5: {
      _localctx = dynamic_cast<PrimaryNoNewArray_lfno_primaryContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray_lfno_primary5Context>(_localctx));
      enterOuterAlt(_localctx, 5);
      setState(2076);
      match(Java9_v2Parser::THIS);
      break;
    }

    case 6: {
      _localctx = dynamic_cast<PrimaryNoNewArray_lfno_primaryContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray_lfno_primary6Context>(_localctx));
      enterOuterAlt(_localctx, 6);
      setState(2077);
      typeName();
      setState(2078);
      match(Java9_v2Parser::DOT);
      setState(2079);
      match(Java9_v2Parser::THIS);
      break;
    }

    case 7: {
      _localctx = dynamic_cast<PrimaryNoNewArray_lfno_primaryContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray_lfno_primary7Context>(_localctx));
      enterOuterAlt(_localctx, 7);
      setState(2081);
      match(Java9_v2Parser::LPAREN);
      setState(2082);
      expression();
      setState(2083);
      match(Java9_v2Parser::RPAREN);
      break;
    }

    case 8: {
      _localctx = dynamic_cast<PrimaryNoNewArray_lfno_primaryContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray_lfno_primary8Context>(_localctx));
      enterOuterAlt(_localctx, 8);
      setState(2085);
      classInstanceCreationExpression_lfno_primary();
      break;
    }

    case 9: {
      _localctx = dynamic_cast<PrimaryNoNewArray_lfno_primaryContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray_lfno_primary9Context>(_localctx));
      enterOuterAlt(_localctx, 9);
      setState(2086);
      fieldAccess_lfno_primary();
      break;
    }

    case 10: {
      _localctx = dynamic_cast<PrimaryNoNewArray_lfno_primaryContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray_lfno_primary10Context>(_localctx));
      enterOuterAlt(_localctx, 10);
      setState(2087);
      arrayAccess_lfno_primary();
      break;
    }

    case 11: {
      _localctx = dynamic_cast<PrimaryNoNewArray_lfno_primaryContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray_lfno_primary11Context>(_localctx));
      enterOuterAlt(_localctx, 11);
      setState(2088);
      methodInvocation_lfno_primary();
      break;
    }

    case 12: {
      _localctx = dynamic_cast<PrimaryNoNewArray_lfno_primaryContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray_lfno_primary12Context>(_localctx));
      enterOuterAlt(_localctx, 12);
      setState(2089);
      methodReference_lfno_primary();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext ------------------------------------------------------------------

Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext::PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext::getRuleIndex() const {
  return Java9_v2Parser::RulePrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary;
}

void Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(this);
}

void Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(this);
}


antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext* Java9_v2Parser::primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary() {
  PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext *_localctx = _tracker.createInstance<PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext>(_ctx, getState());
  enterRule(_localctx, 380, Java9_v2Parser::RulePrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);

   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext ------------------------------------------------------------------

Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext::getRuleIndex() const {
  return Java9_v2Parser::RulePrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary;
}

void Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext::copyFrom(PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary3Context ------------------------------------------------------------------

Java9_v2Parser::UnannPrimitiveTypeContext* Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary3Context::unannPrimitiveType() {
  return getRuleContext<Java9_v2Parser::UnannPrimitiveTypeContext>(0);
}

tree::TerminalNode* Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary3Context::DOT() {
  return getToken(Java9_v2Parser::DOT, 0);
}

tree::TerminalNode* Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary3Context::CLASS() {
  return getToken(Java9_v2Parser::CLASS, 0);
}

std::vector<tree::TerminalNode *> Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary3Context::LBRACK() {
  return getTokens(Java9_v2Parser::LBRACK);
}

tree::TerminalNode* Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary3Context::LBRACK(size_t i) {
  return getToken(Java9_v2Parser::LBRACK, i);
}

std::vector<tree::TerminalNode *> Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary3Context::RBRACK() {
  return getTokens(Java9_v2Parser::RBRACK);
}

tree::TerminalNode* Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary3Context::RBRACK(size_t i) {
  return getToken(Java9_v2Parser::RBRACK, i);
}

Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary3Context::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary3Context(PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary3(this);
}
void Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary3(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary3(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary11Context ------------------------------------------------------------------

Java9_v2Parser::MethodReference_lfno_primaryContext* Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary11Context::methodReference_lfno_primary() {
  return getRuleContext<Java9_v2Parser::MethodReference_lfno_primaryContext>(0);
}

Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary11Context::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary11Context(PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary11Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary11(this);
}
void Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary11Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary11(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary11Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary11(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary2Context ------------------------------------------------------------------

Java9_v2Parser::TypeNameContext* Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary2Context::typeName() {
  return getRuleContext<Java9_v2Parser::TypeNameContext>(0);
}

tree::TerminalNode* Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary2Context::DOT() {
  return getToken(Java9_v2Parser::DOT, 0);
}

tree::TerminalNode* Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary2Context::CLASS() {
  return getToken(Java9_v2Parser::CLASS, 0);
}

std::vector<tree::TerminalNode *> Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary2Context::LBRACK() {
  return getTokens(Java9_v2Parser::LBRACK);
}

tree::TerminalNode* Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary2Context::LBRACK(size_t i) {
  return getToken(Java9_v2Parser::LBRACK, i);
}

std::vector<tree::TerminalNode *> Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary2Context::RBRACK() {
  return getTokens(Java9_v2Parser::RBRACK);
}

tree::TerminalNode* Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary2Context::RBRACK(size_t i) {
  return getToken(Java9_v2Parser::RBRACK, i);
}

Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary2Context::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary2Context(PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary2(this);
}
void Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary2(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary5Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary5Context::THIS() {
  return getToken(Java9_v2Parser::THIS, 0);
}

Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary5Context::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary5Context(PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary5Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary5(this);
}
void Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary5Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary5(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary5Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary5(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary4Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary4Context::VOID() {
  return getToken(Java9_v2Parser::VOID, 0);
}

tree::TerminalNode* Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary4Context::DOT() {
  return getToken(Java9_v2Parser::DOT, 0);
}

tree::TerminalNode* Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary4Context::CLASS() {
  return getToken(Java9_v2Parser::CLASS, 0);
}

Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary4Context::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary4Context(PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary4Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary4(this);
}
void Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary4Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary4(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary4Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary4(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary10Context ------------------------------------------------------------------

Java9_v2Parser::MethodInvocation_lfno_primaryContext* Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary10Context::methodInvocation_lfno_primary() {
  return getRuleContext<Java9_v2Parser::MethodInvocation_lfno_primaryContext>(0);
}

Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary10Context::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary10Context(PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary10Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary10(this);
}
void Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary10Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary10(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary10Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary10(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary1Context ------------------------------------------------------------------

Java9_v2Parser::LiteralContext* Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary1Context::literal() {
  return getRuleContext<Java9_v2Parser::LiteralContext>(0);
}

Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary1Context::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary1Context(PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary1(this);
}
void Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary1(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary7Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary7Context::LPAREN() {
  return getToken(Java9_v2Parser::LPAREN, 0);
}

Java9_v2Parser::ExpressionContext* Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary7Context::expression() {
  return getRuleContext<Java9_v2Parser::ExpressionContext>(0);
}

tree::TerminalNode* Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary7Context::RPAREN() {
  return getToken(Java9_v2Parser::RPAREN, 0);
}

Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary7Context::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary7Context(PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary7Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary7(this);
}
void Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary7Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary7(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary7Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary7(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary6Context ------------------------------------------------------------------

Java9_v2Parser::TypeNameContext* Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary6Context::typeName() {
  return getRuleContext<Java9_v2Parser::TypeNameContext>(0);
}

tree::TerminalNode* Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary6Context::DOT() {
  return getToken(Java9_v2Parser::DOT, 0);
}

tree::TerminalNode* Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary6Context::THIS() {
  return getToken(Java9_v2Parser::THIS, 0);
}

Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary6Context::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary6Context(PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary6Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary6(this);
}
void Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary6Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary6(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary6Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary6(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary9Context ------------------------------------------------------------------

Java9_v2Parser::FieldAccess_lfno_primaryContext* Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary9Context::fieldAccess_lfno_primary() {
  return getRuleContext<Java9_v2Parser::FieldAccess_lfno_primaryContext>(0);
}

Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary9Context::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary9Context(PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary9Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary9(this);
}
void Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary9Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary9(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary9Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary9(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary8Context ------------------------------------------------------------------

Java9_v2Parser::ClassInstanceCreationExpression_lfno_primaryContext* Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary8Context::classInstanceCreationExpression_lfno_primary() {
  return getRuleContext<Java9_v2Parser::ClassInstanceCreationExpression_lfno_primaryContext>(0);
}

Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary8Context::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary8Context(PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary8Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary8(this);
}
void Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary8Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary8(this);
}

antlrcpp::Any Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary8Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary8(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext* Java9_v2Parser::primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary() {
  PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext *_localctx = _tracker.createInstance<PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext>(_ctx, getState());
  enterRule(_localctx, 382, Java9_v2Parser::RulePrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2133);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 216, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(2094);
      literal();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(2095);
      typeName();
      setState(2100);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Java9_v2Parser::LBRACK) {
        setState(2096);
        match(Java9_v2Parser::LBRACK);
        setState(2097);
        match(Java9_v2Parser::RBRACK);
        setState(2102);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2103);
      match(Java9_v2Parser::DOT);
      setState(2104);
      match(Java9_v2Parser::CLASS);
      break;
    }

    case 3: {
      _localctx = dynamic_cast<PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary3Context>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(2106);
      unannPrimitiveType();
      setState(2111);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Java9_v2Parser::LBRACK) {
        setState(2107);
        match(Java9_v2Parser::LBRACK);
        setState(2108);
        match(Java9_v2Parser::RBRACK);
        setState(2113);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2114);
      match(Java9_v2Parser::DOT);
      setState(2115);
      match(Java9_v2Parser::CLASS);
      break;
    }

    case 4: {
      _localctx = dynamic_cast<PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary4Context>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(2117);
      match(Java9_v2Parser::VOID);
      setState(2118);
      match(Java9_v2Parser::DOT);
      setState(2119);
      match(Java9_v2Parser::CLASS);
      break;
    }

    case 5: {
      _localctx = dynamic_cast<PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary5Context>(_localctx));
      enterOuterAlt(_localctx, 5);
      setState(2120);
      match(Java9_v2Parser::THIS);
      break;
    }

    case 6: {
      _localctx = dynamic_cast<PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary6Context>(_localctx));
      enterOuterAlt(_localctx, 6);
      setState(2121);
      typeName();
      setState(2122);
      match(Java9_v2Parser::DOT);
      setState(2123);
      match(Java9_v2Parser::THIS);
      break;
    }

    case 7: {
      _localctx = dynamic_cast<PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary7Context>(_localctx));
      enterOuterAlt(_localctx, 7);
      setState(2125);
      match(Java9_v2Parser::LPAREN);
      setState(2126);
      expression();
      setState(2127);
      match(Java9_v2Parser::RPAREN);
      break;
    }

    case 8: {
      _localctx = dynamic_cast<PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary8Context>(_localctx));
      enterOuterAlt(_localctx, 8);
      setState(2129);
      classInstanceCreationExpression_lfno_primary();
      break;
    }

    case 9: {
      _localctx = dynamic_cast<PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary9Context>(_localctx));
      enterOuterAlt(_localctx, 9);
      setState(2130);
      fieldAccess_lfno_primary();
      break;
    }

    case 10: {
      _localctx = dynamic_cast<PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary10Context>(_localctx));
      enterOuterAlt(_localctx, 10);
      setState(2131);
      methodInvocation_lfno_primary();
      break;
    }

    case 11: {
      _localctx = dynamic_cast<PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext *>(_tracker.createInstance<Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary11Context>(_localctx));
      enterOuterAlt(_localctx, 11);
      setState(2132);
      methodReference_lfno_primary();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassLiteralContext ------------------------------------------------------------------

Java9_v2Parser::ClassLiteralContext::ClassLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::ClassLiteralContext::getRuleIndex() const {
  return Java9_v2Parser::RuleClassLiteral;
}

void Java9_v2Parser::ClassLiteralContext::copyFrom(ClassLiteralContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ClassLiteral2Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::ClassLiteral2Context::VOID() {
  return getToken(Java9_v2Parser::VOID, 0);
}

tree::TerminalNode* Java9_v2Parser::ClassLiteral2Context::DOT() {
  return getToken(Java9_v2Parser::DOT, 0);
}

tree::TerminalNode* Java9_v2Parser::ClassLiteral2Context::CLASS() {
  return getToken(Java9_v2Parser::CLASS, 0);
}

Java9_v2Parser::ClassLiteral2Context::ClassLiteral2Context(ClassLiteralContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ClassLiteral2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassLiteral2(this);
}
void Java9_v2Parser::ClassLiteral2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassLiteral2(this);
}

antlrcpp::Any Java9_v2Parser::ClassLiteral2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitClassLiteral2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ClassLiteral1Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::ClassLiteral1Context::DOT() {
  return getToken(Java9_v2Parser::DOT, 0);
}

tree::TerminalNode* Java9_v2Parser::ClassLiteral1Context::CLASS() {
  return getToken(Java9_v2Parser::CLASS, 0);
}

Java9_v2Parser::TypeNameContext* Java9_v2Parser::ClassLiteral1Context::typeName() {
  return getRuleContext<Java9_v2Parser::TypeNameContext>(0);
}

Java9_v2Parser::NumericTypeContext* Java9_v2Parser::ClassLiteral1Context::numericType() {
  return getRuleContext<Java9_v2Parser::NumericTypeContext>(0);
}

tree::TerminalNode* Java9_v2Parser::ClassLiteral1Context::BOOLEAN() {
  return getToken(Java9_v2Parser::BOOLEAN, 0);
}

std::vector<tree::TerminalNode *> Java9_v2Parser::ClassLiteral1Context::LBRACK() {
  return getTokens(Java9_v2Parser::LBRACK);
}

tree::TerminalNode* Java9_v2Parser::ClassLiteral1Context::LBRACK(size_t i) {
  return getToken(Java9_v2Parser::LBRACK, i);
}

std::vector<tree::TerminalNode *> Java9_v2Parser::ClassLiteral1Context::RBRACK() {
  return getTokens(Java9_v2Parser::RBRACK);
}

tree::TerminalNode* Java9_v2Parser::ClassLiteral1Context::RBRACK(size_t i) {
  return getToken(Java9_v2Parser::RBRACK, i);
}

Java9_v2Parser::ClassLiteral1Context::ClassLiteral1Context(ClassLiteralContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ClassLiteral1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassLiteral1(this);
}
void Java9_v2Parser::ClassLiteral1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassLiteral1(this);
}

antlrcpp::Any Java9_v2Parser::ClassLiteral1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitClassLiteral1(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::ClassLiteralContext* Java9_v2Parser::classLiteral() {
  ClassLiteralContext *_localctx = _tracker.createInstance<ClassLiteralContext>(_ctx, getState());
  enterRule(_localctx, 384, Java9_v2Parser::RuleClassLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2152);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Java9_v2Parser::T__0:
      case Java9_v2Parser::T__1:
      case Java9_v2Parser::T__2:
      case Java9_v2Parser::T__3:
      case Java9_v2Parser::T__4:
      case Java9_v2Parser::T__5:
      case Java9_v2Parser::T__6:
      case Java9_v2Parser::T__7:
      case Java9_v2Parser::T__8:
      case Java9_v2Parser::BOOLEAN:
      case Java9_v2Parser::BYTE:
      case Java9_v2Parser::CHAR:
      case Java9_v2Parser::DOUBLE:
      case Java9_v2Parser::FLOAT:
      case Java9_v2Parser::INT:
      case Java9_v2Parser::LONG:
      case Java9_v2Parser::SHORT:
      case Java9_v2Parser::Identifier: {
        _localctx = dynamic_cast<ClassLiteralContext *>(_tracker.createInstance<Java9_v2Parser::ClassLiteral1Context>(_localctx));
        enterOuterAlt(_localctx, 1);
        setState(2138);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case Java9_v2Parser::T__0:
          case Java9_v2Parser::T__1:
          case Java9_v2Parser::T__2:
          case Java9_v2Parser::T__3:
          case Java9_v2Parser::T__4:
          case Java9_v2Parser::T__5:
          case Java9_v2Parser::T__6:
          case Java9_v2Parser::T__7:
          case Java9_v2Parser::T__8:
          case Java9_v2Parser::Identifier: {
            setState(2135);
            typeName();
            break;
          }

          case Java9_v2Parser::BYTE:
          case Java9_v2Parser::CHAR:
          case Java9_v2Parser::DOUBLE:
          case Java9_v2Parser::FLOAT:
          case Java9_v2Parser::INT:
          case Java9_v2Parser::LONG:
          case Java9_v2Parser::SHORT: {
            setState(2136);
            numericType();
            break;
          }

          case Java9_v2Parser::BOOLEAN: {
            setState(2137);
            match(Java9_v2Parser::BOOLEAN);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(2144);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == Java9_v2Parser::LBRACK) {
          setState(2140);
          match(Java9_v2Parser::LBRACK);
          setState(2141);
          match(Java9_v2Parser::RBRACK);
          setState(2146);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(2147);
        match(Java9_v2Parser::DOT);
        setState(2148);
        match(Java9_v2Parser::CLASS);
        break;
      }

      case Java9_v2Parser::VOID: {
        _localctx = dynamic_cast<ClassLiteralContext *>(_tracker.createInstance<Java9_v2Parser::ClassLiteral2Context>(_localctx));
        enterOuterAlt(_localctx, 2);
        setState(2149);
        match(Java9_v2Parser::VOID);
        setState(2150);
        match(Java9_v2Parser::DOT);
        setState(2151);
        match(Java9_v2Parser::CLASS);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassInstanceCreationExpressionContext ------------------------------------------------------------------

Java9_v2Parser::ClassInstanceCreationExpressionContext::ClassInstanceCreationExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::ClassInstanceCreationExpressionContext::getRuleIndex() const {
  return Java9_v2Parser::RuleClassInstanceCreationExpression;
}

void Java9_v2Parser::ClassInstanceCreationExpressionContext::copyFrom(ClassInstanceCreationExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ClassInstanceCreationExpression1Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::ClassInstanceCreationExpression1Context::NEW() {
  return getToken(Java9_v2Parser::NEW, 0);
}

std::vector<Java9_v2Parser::IdentifierContext *> Java9_v2Parser::ClassInstanceCreationExpression1Context::identifier() {
  return getRuleContexts<Java9_v2Parser::IdentifierContext>();
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::ClassInstanceCreationExpression1Context::identifier(size_t i) {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(i);
}

tree::TerminalNode* Java9_v2Parser::ClassInstanceCreationExpression1Context::LPAREN() {
  return getToken(Java9_v2Parser::LPAREN, 0);
}

tree::TerminalNode* Java9_v2Parser::ClassInstanceCreationExpression1Context::RPAREN() {
  return getToken(Java9_v2Parser::RPAREN, 0);
}

Java9_v2Parser::TypeArgumentsContext* Java9_v2Parser::ClassInstanceCreationExpression1Context::typeArguments() {
  return getRuleContext<Java9_v2Parser::TypeArgumentsContext>(0);
}

std::vector<Java9_v2Parser::AnnotationContext *> Java9_v2Parser::ClassInstanceCreationExpression1Context::annotation() {
  return getRuleContexts<Java9_v2Parser::AnnotationContext>();
}

Java9_v2Parser::AnnotationContext* Java9_v2Parser::ClassInstanceCreationExpression1Context::annotation(size_t i) {
  return getRuleContext<Java9_v2Parser::AnnotationContext>(i);
}

std::vector<tree::TerminalNode *> Java9_v2Parser::ClassInstanceCreationExpression1Context::DOT() {
  return getTokens(Java9_v2Parser::DOT);
}

tree::TerminalNode* Java9_v2Parser::ClassInstanceCreationExpression1Context::DOT(size_t i) {
  return getToken(Java9_v2Parser::DOT, i);
}

Java9_v2Parser::TypeArgumentsOrDiamondContext* Java9_v2Parser::ClassInstanceCreationExpression1Context::typeArgumentsOrDiamond() {
  return getRuleContext<Java9_v2Parser::TypeArgumentsOrDiamondContext>(0);
}

Java9_v2Parser::ArgumentListContext* Java9_v2Parser::ClassInstanceCreationExpression1Context::argumentList() {
  return getRuleContext<Java9_v2Parser::ArgumentListContext>(0);
}

Java9_v2Parser::ClassBodyContext* Java9_v2Parser::ClassInstanceCreationExpression1Context::classBody() {
  return getRuleContext<Java9_v2Parser::ClassBodyContext>(0);
}

Java9_v2Parser::ClassInstanceCreationExpression1Context::ClassInstanceCreationExpression1Context(ClassInstanceCreationExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ClassInstanceCreationExpression1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassInstanceCreationExpression1(this);
}
void Java9_v2Parser::ClassInstanceCreationExpression1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassInstanceCreationExpression1(this);
}

antlrcpp::Any Java9_v2Parser::ClassInstanceCreationExpression1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitClassInstanceCreationExpression1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ClassInstanceCreationExpression3Context ------------------------------------------------------------------

Java9_v2Parser::PrimaryContext* Java9_v2Parser::ClassInstanceCreationExpression3Context::primary() {
  return getRuleContext<Java9_v2Parser::PrimaryContext>(0);
}

tree::TerminalNode* Java9_v2Parser::ClassInstanceCreationExpression3Context::DOT() {
  return getToken(Java9_v2Parser::DOT, 0);
}

tree::TerminalNode* Java9_v2Parser::ClassInstanceCreationExpression3Context::NEW() {
  return getToken(Java9_v2Parser::NEW, 0);
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::ClassInstanceCreationExpression3Context::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

tree::TerminalNode* Java9_v2Parser::ClassInstanceCreationExpression3Context::LPAREN() {
  return getToken(Java9_v2Parser::LPAREN, 0);
}

tree::TerminalNode* Java9_v2Parser::ClassInstanceCreationExpression3Context::RPAREN() {
  return getToken(Java9_v2Parser::RPAREN, 0);
}

Java9_v2Parser::TypeArgumentsContext* Java9_v2Parser::ClassInstanceCreationExpression3Context::typeArguments() {
  return getRuleContext<Java9_v2Parser::TypeArgumentsContext>(0);
}

std::vector<Java9_v2Parser::AnnotationContext *> Java9_v2Parser::ClassInstanceCreationExpression3Context::annotation() {
  return getRuleContexts<Java9_v2Parser::AnnotationContext>();
}

Java9_v2Parser::AnnotationContext* Java9_v2Parser::ClassInstanceCreationExpression3Context::annotation(size_t i) {
  return getRuleContext<Java9_v2Parser::AnnotationContext>(i);
}

Java9_v2Parser::TypeArgumentsOrDiamondContext* Java9_v2Parser::ClassInstanceCreationExpression3Context::typeArgumentsOrDiamond() {
  return getRuleContext<Java9_v2Parser::TypeArgumentsOrDiamondContext>(0);
}

Java9_v2Parser::ArgumentListContext* Java9_v2Parser::ClassInstanceCreationExpression3Context::argumentList() {
  return getRuleContext<Java9_v2Parser::ArgumentListContext>(0);
}

Java9_v2Parser::ClassBodyContext* Java9_v2Parser::ClassInstanceCreationExpression3Context::classBody() {
  return getRuleContext<Java9_v2Parser::ClassBodyContext>(0);
}

Java9_v2Parser::ClassInstanceCreationExpression3Context::ClassInstanceCreationExpression3Context(ClassInstanceCreationExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ClassInstanceCreationExpression3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassInstanceCreationExpression3(this);
}
void Java9_v2Parser::ClassInstanceCreationExpression3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassInstanceCreationExpression3(this);
}

antlrcpp::Any Java9_v2Parser::ClassInstanceCreationExpression3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitClassInstanceCreationExpression3(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ClassInstanceCreationExpression2Context ------------------------------------------------------------------

Java9_v2Parser::ExpressionNameContext* Java9_v2Parser::ClassInstanceCreationExpression2Context::expressionName() {
  return getRuleContext<Java9_v2Parser::ExpressionNameContext>(0);
}

tree::TerminalNode* Java9_v2Parser::ClassInstanceCreationExpression2Context::DOT() {
  return getToken(Java9_v2Parser::DOT, 0);
}

tree::TerminalNode* Java9_v2Parser::ClassInstanceCreationExpression2Context::NEW() {
  return getToken(Java9_v2Parser::NEW, 0);
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::ClassInstanceCreationExpression2Context::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

tree::TerminalNode* Java9_v2Parser::ClassInstanceCreationExpression2Context::LPAREN() {
  return getToken(Java9_v2Parser::LPAREN, 0);
}

tree::TerminalNode* Java9_v2Parser::ClassInstanceCreationExpression2Context::RPAREN() {
  return getToken(Java9_v2Parser::RPAREN, 0);
}

Java9_v2Parser::TypeArgumentsContext* Java9_v2Parser::ClassInstanceCreationExpression2Context::typeArguments() {
  return getRuleContext<Java9_v2Parser::TypeArgumentsContext>(0);
}

std::vector<Java9_v2Parser::AnnotationContext *> Java9_v2Parser::ClassInstanceCreationExpression2Context::annotation() {
  return getRuleContexts<Java9_v2Parser::AnnotationContext>();
}

Java9_v2Parser::AnnotationContext* Java9_v2Parser::ClassInstanceCreationExpression2Context::annotation(size_t i) {
  return getRuleContext<Java9_v2Parser::AnnotationContext>(i);
}

Java9_v2Parser::TypeArgumentsOrDiamondContext* Java9_v2Parser::ClassInstanceCreationExpression2Context::typeArgumentsOrDiamond() {
  return getRuleContext<Java9_v2Parser::TypeArgumentsOrDiamondContext>(0);
}

Java9_v2Parser::ArgumentListContext* Java9_v2Parser::ClassInstanceCreationExpression2Context::argumentList() {
  return getRuleContext<Java9_v2Parser::ArgumentListContext>(0);
}

Java9_v2Parser::ClassBodyContext* Java9_v2Parser::ClassInstanceCreationExpression2Context::classBody() {
  return getRuleContext<Java9_v2Parser::ClassBodyContext>(0);
}

Java9_v2Parser::ClassInstanceCreationExpression2Context::ClassInstanceCreationExpression2Context(ClassInstanceCreationExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ClassInstanceCreationExpression2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassInstanceCreationExpression2(this);
}
void Java9_v2Parser::ClassInstanceCreationExpression2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassInstanceCreationExpression2(this);
}

antlrcpp::Any Java9_v2Parser::ClassInstanceCreationExpression2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitClassInstanceCreationExpression2(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::ClassInstanceCreationExpressionContext* Java9_v2Parser::classInstanceCreationExpression() {
  ClassInstanceCreationExpressionContext *_localctx = _tracker.createInstance<ClassInstanceCreationExpressionContext>(_ctx, getState());
  enterRule(_localctx, 386, Java9_v2Parser::RuleClassInstanceCreationExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2237);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 237, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<ClassInstanceCreationExpressionContext *>(_tracker.createInstance<Java9_v2Parser::ClassInstanceCreationExpression1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(2154);
      match(Java9_v2Parser::NEW);
      setState(2156);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java9_v2Parser::LT) {
        setState(2155);
        typeArguments();
      }
      setState(2161);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Java9_v2Parser::AT) {
        setState(2158);
        annotation();
        setState(2163);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2164);
      identifier();
      setState(2175);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Java9_v2Parser::DOT) {
        setState(2165);
        match(Java9_v2Parser::DOT);
        setState(2169);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == Java9_v2Parser::AT) {
          setState(2166);
          annotation();
          setState(2171);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(2172);
        identifier();
        setState(2177);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2179);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java9_v2Parser::LT) {
        setState(2178);
        typeArgumentsOrDiamond();
      }
      setState(2181);
      match(Java9_v2Parser::LPAREN);
      setState(2183);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << Java9_v2Parser::T__0)
        | (1ULL << Java9_v2Parser::T__1)
        | (1ULL << Java9_v2Parser::T__2)
        | (1ULL << Java9_v2Parser::T__3)
        | (1ULL << Java9_v2Parser::T__4)
        | (1ULL << Java9_v2Parser::T__5)
        | (1ULL << Java9_v2Parser::T__6)
        | (1ULL << Java9_v2Parser::T__7)
        | (1ULL << Java9_v2Parser::T__8)
        | (1ULL << Java9_v2Parser::BOOLEAN)
        | (1ULL << Java9_v2Parser::BYTE)
        | (1ULL << Java9_v2Parser::CHAR)
        | (1ULL << Java9_v2Parser::DOUBLE)
        | (1ULL << Java9_v2Parser::FLOAT)
        | (1ULL << Java9_v2Parser::INT)
        | (1ULL << Java9_v2Parser::LONG)
        | (1ULL << Java9_v2Parser::NEW)
        | (1ULL << Java9_v2Parser::SHORT)
        | (1ULL << Java9_v2Parser::SUPER)
        | (1ULL << Java9_v2Parser::THIS)
        | (1ULL << Java9_v2Parser::VOID)
        | (1ULL << Java9_v2Parser::IntegerLiteral)
        | (1ULL << Java9_v2Parser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (Java9_v2Parser::BooleanLiteral - 64))
        | (1ULL << (Java9_v2Parser::CharacterLiteral - 64))
        | (1ULL << (Java9_v2Parser::StringLiteral - 64))
        | (1ULL << (Java9_v2Parser::NullLiteral - 64))
        | (1ULL << (Java9_v2Parser::LPAREN - 64))
        | (1ULL << (Java9_v2Parser::AT - 64))
        | (1ULL << (Java9_v2Parser::BANG - 64))
        | (1ULL << (Java9_v2Parser::TILDE - 64))
        | (1ULL << (Java9_v2Parser::INC - 64))
        | (1ULL << (Java9_v2Parser::DEC - 64))
        | (1ULL << (Java9_v2Parser::ADD - 64))
        | (1ULL << (Java9_v2Parser::SUB - 64))
        | (1ULL << (Java9_v2Parser::Identifier - 64)))) != 0)) {
        setState(2182);
        argumentList();
      }
      setState(2185);
      match(Java9_v2Parser::RPAREN);
      setState(2187);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java9_v2Parser::LBRACE) {
        setState(2186);
        classBody();
      }
      break;
    }

    case 2: {
      _localctx = dynamic_cast<ClassInstanceCreationExpressionContext *>(_tracker.createInstance<Java9_v2Parser::ClassInstanceCreationExpression2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(2189);
      expressionName();
      setState(2190);
      match(Java9_v2Parser::DOT);
      setState(2191);
      match(Java9_v2Parser::NEW);
      setState(2193);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java9_v2Parser::LT) {
        setState(2192);
        typeArguments();
      }
      setState(2198);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Java9_v2Parser::AT) {
        setState(2195);
        annotation();
        setState(2200);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2201);
      identifier();
      setState(2203);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java9_v2Parser::LT) {
        setState(2202);
        typeArgumentsOrDiamond();
      }
      setState(2205);
      match(Java9_v2Parser::LPAREN);
      setState(2207);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << Java9_v2Parser::T__0)
        | (1ULL << Java9_v2Parser::T__1)
        | (1ULL << Java9_v2Parser::T__2)
        | (1ULL << Java9_v2Parser::T__3)
        | (1ULL << Java9_v2Parser::T__4)
        | (1ULL << Java9_v2Parser::T__5)
        | (1ULL << Java9_v2Parser::T__6)
        | (1ULL << Java9_v2Parser::T__7)
        | (1ULL << Java9_v2Parser::T__8)
        | (1ULL << Java9_v2Parser::BOOLEAN)
        | (1ULL << Java9_v2Parser::BYTE)
        | (1ULL << Java9_v2Parser::CHAR)
        | (1ULL << Java9_v2Parser::DOUBLE)
        | (1ULL << Java9_v2Parser::FLOAT)
        | (1ULL << Java9_v2Parser::INT)
        | (1ULL << Java9_v2Parser::LONG)
        | (1ULL << Java9_v2Parser::NEW)
        | (1ULL << Java9_v2Parser::SHORT)
        | (1ULL << Java9_v2Parser::SUPER)
        | (1ULL << Java9_v2Parser::THIS)
        | (1ULL << Java9_v2Parser::VOID)
        | (1ULL << Java9_v2Parser::IntegerLiteral)
        | (1ULL << Java9_v2Parser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (Java9_v2Parser::BooleanLiteral - 64))
        | (1ULL << (Java9_v2Parser::CharacterLiteral - 64))
        | (1ULL << (Java9_v2Parser::StringLiteral - 64))
        | (1ULL << (Java9_v2Parser::NullLiteral - 64))
        | (1ULL << (Java9_v2Parser::LPAREN - 64))
        | (1ULL << (Java9_v2Parser::AT - 64))
        | (1ULL << (Java9_v2Parser::BANG - 64))
        | (1ULL << (Java9_v2Parser::TILDE - 64))
        | (1ULL << (Java9_v2Parser::INC - 64))
        | (1ULL << (Java9_v2Parser::DEC - 64))
        | (1ULL << (Java9_v2Parser::ADD - 64))
        | (1ULL << (Java9_v2Parser::SUB - 64))
        | (1ULL << (Java9_v2Parser::Identifier - 64)))) != 0)) {
        setState(2206);
        argumentList();
      }
      setState(2209);
      match(Java9_v2Parser::RPAREN);
      setState(2211);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java9_v2Parser::LBRACE) {
        setState(2210);
        classBody();
      }
      break;
    }

    case 3: {
      _localctx = dynamic_cast<ClassInstanceCreationExpressionContext *>(_tracker.createInstance<Java9_v2Parser::ClassInstanceCreationExpression3Context>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(2213);
      primary();
      setState(2214);
      match(Java9_v2Parser::DOT);
      setState(2215);
      match(Java9_v2Parser::NEW);
      setState(2217);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java9_v2Parser::LT) {
        setState(2216);
        typeArguments();
      }
      setState(2222);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Java9_v2Parser::AT) {
        setState(2219);
        annotation();
        setState(2224);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2225);
      identifier();
      setState(2227);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java9_v2Parser::LT) {
        setState(2226);
        typeArgumentsOrDiamond();
      }
      setState(2229);
      match(Java9_v2Parser::LPAREN);
      setState(2231);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << Java9_v2Parser::T__0)
        | (1ULL << Java9_v2Parser::T__1)
        | (1ULL << Java9_v2Parser::T__2)
        | (1ULL << Java9_v2Parser::T__3)
        | (1ULL << Java9_v2Parser::T__4)
        | (1ULL << Java9_v2Parser::T__5)
        | (1ULL << Java9_v2Parser::T__6)
        | (1ULL << Java9_v2Parser::T__7)
        | (1ULL << Java9_v2Parser::T__8)
        | (1ULL << Java9_v2Parser::BOOLEAN)
        | (1ULL << Java9_v2Parser::BYTE)
        | (1ULL << Java9_v2Parser::CHAR)
        | (1ULL << Java9_v2Parser::DOUBLE)
        | (1ULL << Java9_v2Parser::FLOAT)
        | (1ULL << Java9_v2Parser::INT)
        | (1ULL << Java9_v2Parser::LONG)
        | (1ULL << Java9_v2Parser::NEW)
        | (1ULL << Java9_v2Parser::SHORT)
        | (1ULL << Java9_v2Parser::SUPER)
        | (1ULL << Java9_v2Parser::THIS)
        | (1ULL << Java9_v2Parser::VOID)
        | (1ULL << Java9_v2Parser::IntegerLiteral)
        | (1ULL << Java9_v2Parser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (Java9_v2Parser::BooleanLiteral - 64))
        | (1ULL << (Java9_v2Parser::CharacterLiteral - 64))
        | (1ULL << (Java9_v2Parser::StringLiteral - 64))
        | (1ULL << (Java9_v2Parser::NullLiteral - 64))
        | (1ULL << (Java9_v2Parser::LPAREN - 64))
        | (1ULL << (Java9_v2Parser::AT - 64))
        | (1ULL << (Java9_v2Parser::BANG - 64))
        | (1ULL << (Java9_v2Parser::TILDE - 64))
        | (1ULL << (Java9_v2Parser::INC - 64))
        | (1ULL << (Java9_v2Parser::DEC - 64))
        | (1ULL << (Java9_v2Parser::ADD - 64))
        | (1ULL << (Java9_v2Parser::SUB - 64))
        | (1ULL << (Java9_v2Parser::Identifier - 64)))) != 0)) {
        setState(2230);
        argumentList();
      }
      setState(2233);
      match(Java9_v2Parser::RPAREN);
      setState(2235);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java9_v2Parser::LBRACE) {
        setState(2234);
        classBody();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassInstanceCreationExpression_lf_primaryContext ------------------------------------------------------------------

Java9_v2Parser::ClassInstanceCreationExpression_lf_primaryContext::ClassInstanceCreationExpression_lf_primaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::ClassInstanceCreationExpression_lf_primaryContext::DOT() {
  return getToken(Java9_v2Parser::DOT, 0);
}

tree::TerminalNode* Java9_v2Parser::ClassInstanceCreationExpression_lf_primaryContext::NEW() {
  return getToken(Java9_v2Parser::NEW, 0);
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::ClassInstanceCreationExpression_lf_primaryContext::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

tree::TerminalNode* Java9_v2Parser::ClassInstanceCreationExpression_lf_primaryContext::LPAREN() {
  return getToken(Java9_v2Parser::LPAREN, 0);
}

tree::TerminalNode* Java9_v2Parser::ClassInstanceCreationExpression_lf_primaryContext::RPAREN() {
  return getToken(Java9_v2Parser::RPAREN, 0);
}

Java9_v2Parser::TypeArgumentsContext* Java9_v2Parser::ClassInstanceCreationExpression_lf_primaryContext::typeArguments() {
  return getRuleContext<Java9_v2Parser::TypeArgumentsContext>(0);
}

std::vector<Java9_v2Parser::AnnotationContext *> Java9_v2Parser::ClassInstanceCreationExpression_lf_primaryContext::annotation() {
  return getRuleContexts<Java9_v2Parser::AnnotationContext>();
}

Java9_v2Parser::AnnotationContext* Java9_v2Parser::ClassInstanceCreationExpression_lf_primaryContext::annotation(size_t i) {
  return getRuleContext<Java9_v2Parser::AnnotationContext>(i);
}

Java9_v2Parser::TypeArgumentsOrDiamondContext* Java9_v2Parser::ClassInstanceCreationExpression_lf_primaryContext::typeArgumentsOrDiamond() {
  return getRuleContext<Java9_v2Parser::TypeArgumentsOrDiamondContext>(0);
}

Java9_v2Parser::ArgumentListContext* Java9_v2Parser::ClassInstanceCreationExpression_lf_primaryContext::argumentList() {
  return getRuleContext<Java9_v2Parser::ArgumentListContext>(0);
}

Java9_v2Parser::ClassBodyContext* Java9_v2Parser::ClassInstanceCreationExpression_lf_primaryContext::classBody() {
  return getRuleContext<Java9_v2Parser::ClassBodyContext>(0);
}


size_t Java9_v2Parser::ClassInstanceCreationExpression_lf_primaryContext::getRuleIndex() const {
  return Java9_v2Parser::RuleClassInstanceCreationExpression_lf_primary;
}

void Java9_v2Parser::ClassInstanceCreationExpression_lf_primaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassInstanceCreationExpression_lf_primary(this);
}

void Java9_v2Parser::ClassInstanceCreationExpression_lf_primaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassInstanceCreationExpression_lf_primary(this);
}


antlrcpp::Any Java9_v2Parser::ClassInstanceCreationExpression_lf_primaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitClassInstanceCreationExpression_lf_primary(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::ClassInstanceCreationExpression_lf_primaryContext* Java9_v2Parser::classInstanceCreationExpression_lf_primary() {
  ClassInstanceCreationExpression_lf_primaryContext *_localctx = _tracker.createInstance<ClassInstanceCreationExpression_lf_primaryContext>(_ctx, getState());
  enterRule(_localctx, 388, Java9_v2Parser::RuleClassInstanceCreationExpression_lf_primary);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2239);
    match(Java9_v2Parser::DOT);
    setState(2240);
    match(Java9_v2Parser::NEW);
    setState(2242);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java9_v2Parser::LT) {
      setState(2241);
      typeArguments();
    }
    setState(2247);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java9_v2Parser::AT) {
      setState(2244);
      annotation();
      setState(2249);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2250);
    identifier();
    setState(2252);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java9_v2Parser::LT) {
      setState(2251);
      typeArgumentsOrDiamond();
    }
    setState(2254);
    match(Java9_v2Parser::LPAREN);
    setState(2256);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << Java9_v2Parser::T__0)
      | (1ULL << Java9_v2Parser::T__1)
      | (1ULL << Java9_v2Parser::T__2)
      | (1ULL << Java9_v2Parser::T__3)
      | (1ULL << Java9_v2Parser::T__4)
      | (1ULL << Java9_v2Parser::T__5)
      | (1ULL << Java9_v2Parser::T__6)
      | (1ULL << Java9_v2Parser::T__7)
      | (1ULL << Java9_v2Parser::T__8)
      | (1ULL << Java9_v2Parser::BOOLEAN)
      | (1ULL << Java9_v2Parser::BYTE)
      | (1ULL << Java9_v2Parser::CHAR)
      | (1ULL << Java9_v2Parser::DOUBLE)
      | (1ULL << Java9_v2Parser::FLOAT)
      | (1ULL << Java9_v2Parser::INT)
      | (1ULL << Java9_v2Parser::LONG)
      | (1ULL << Java9_v2Parser::NEW)
      | (1ULL << Java9_v2Parser::SHORT)
      | (1ULL << Java9_v2Parser::SUPER)
      | (1ULL << Java9_v2Parser::THIS)
      | (1ULL << Java9_v2Parser::VOID)
      | (1ULL << Java9_v2Parser::IntegerLiteral)
      | (1ULL << Java9_v2Parser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (Java9_v2Parser::BooleanLiteral - 64))
      | (1ULL << (Java9_v2Parser::CharacterLiteral - 64))
      | (1ULL << (Java9_v2Parser::StringLiteral - 64))
      | (1ULL << (Java9_v2Parser::NullLiteral - 64))
      | (1ULL << (Java9_v2Parser::LPAREN - 64))
      | (1ULL << (Java9_v2Parser::AT - 64))
      | (1ULL << (Java9_v2Parser::BANG - 64))
      | (1ULL << (Java9_v2Parser::TILDE - 64))
      | (1ULL << (Java9_v2Parser::INC - 64))
      | (1ULL << (Java9_v2Parser::DEC - 64))
      | (1ULL << (Java9_v2Parser::ADD - 64))
      | (1ULL << (Java9_v2Parser::SUB - 64))
      | (1ULL << (Java9_v2Parser::Identifier - 64)))) != 0)) {
      setState(2255);
      argumentList();
    }
    setState(2258);
    match(Java9_v2Parser::RPAREN);
    setState(2260);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 242, _ctx)) {
    case 1: {
      setState(2259);
      classBody();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassInstanceCreationExpression_lfno_primaryContext ------------------------------------------------------------------

Java9_v2Parser::ClassInstanceCreationExpression_lfno_primaryContext::ClassInstanceCreationExpression_lfno_primaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::ClassInstanceCreationExpression_lfno_primaryContext::getRuleIndex() const {
  return Java9_v2Parser::RuleClassInstanceCreationExpression_lfno_primary;
}

void Java9_v2Parser::ClassInstanceCreationExpression_lfno_primaryContext::copyFrom(ClassInstanceCreationExpression_lfno_primaryContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ClassInstanceCreationExpression_lfno_primary1Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::ClassInstanceCreationExpression_lfno_primary1Context::NEW() {
  return getToken(Java9_v2Parser::NEW, 0);
}

std::vector<Java9_v2Parser::IdentifierContext *> Java9_v2Parser::ClassInstanceCreationExpression_lfno_primary1Context::identifier() {
  return getRuleContexts<Java9_v2Parser::IdentifierContext>();
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::ClassInstanceCreationExpression_lfno_primary1Context::identifier(size_t i) {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(i);
}

tree::TerminalNode* Java9_v2Parser::ClassInstanceCreationExpression_lfno_primary1Context::LPAREN() {
  return getToken(Java9_v2Parser::LPAREN, 0);
}

tree::TerminalNode* Java9_v2Parser::ClassInstanceCreationExpression_lfno_primary1Context::RPAREN() {
  return getToken(Java9_v2Parser::RPAREN, 0);
}

Java9_v2Parser::TypeArgumentsContext* Java9_v2Parser::ClassInstanceCreationExpression_lfno_primary1Context::typeArguments() {
  return getRuleContext<Java9_v2Parser::TypeArgumentsContext>(0);
}

std::vector<Java9_v2Parser::AnnotationContext *> Java9_v2Parser::ClassInstanceCreationExpression_lfno_primary1Context::annotation() {
  return getRuleContexts<Java9_v2Parser::AnnotationContext>();
}

Java9_v2Parser::AnnotationContext* Java9_v2Parser::ClassInstanceCreationExpression_lfno_primary1Context::annotation(size_t i) {
  return getRuleContext<Java9_v2Parser::AnnotationContext>(i);
}

std::vector<tree::TerminalNode *> Java9_v2Parser::ClassInstanceCreationExpression_lfno_primary1Context::DOT() {
  return getTokens(Java9_v2Parser::DOT);
}

tree::TerminalNode* Java9_v2Parser::ClassInstanceCreationExpression_lfno_primary1Context::DOT(size_t i) {
  return getToken(Java9_v2Parser::DOT, i);
}

Java9_v2Parser::TypeArgumentsOrDiamondContext* Java9_v2Parser::ClassInstanceCreationExpression_lfno_primary1Context::typeArgumentsOrDiamond() {
  return getRuleContext<Java9_v2Parser::TypeArgumentsOrDiamondContext>(0);
}

Java9_v2Parser::ArgumentListContext* Java9_v2Parser::ClassInstanceCreationExpression_lfno_primary1Context::argumentList() {
  return getRuleContext<Java9_v2Parser::ArgumentListContext>(0);
}

Java9_v2Parser::ClassBodyContext* Java9_v2Parser::ClassInstanceCreationExpression_lfno_primary1Context::classBody() {
  return getRuleContext<Java9_v2Parser::ClassBodyContext>(0);
}

Java9_v2Parser::ClassInstanceCreationExpression_lfno_primary1Context::ClassInstanceCreationExpression_lfno_primary1Context(ClassInstanceCreationExpression_lfno_primaryContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ClassInstanceCreationExpression_lfno_primary1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassInstanceCreationExpression_lfno_primary1(this);
}
void Java9_v2Parser::ClassInstanceCreationExpression_lfno_primary1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassInstanceCreationExpression_lfno_primary1(this);
}

antlrcpp::Any Java9_v2Parser::ClassInstanceCreationExpression_lfno_primary1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitClassInstanceCreationExpression_lfno_primary1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ClassInstanceCreationExpression_lfno_primary2Context ------------------------------------------------------------------

Java9_v2Parser::ExpressionNameContext* Java9_v2Parser::ClassInstanceCreationExpression_lfno_primary2Context::expressionName() {
  return getRuleContext<Java9_v2Parser::ExpressionNameContext>(0);
}

tree::TerminalNode* Java9_v2Parser::ClassInstanceCreationExpression_lfno_primary2Context::DOT() {
  return getToken(Java9_v2Parser::DOT, 0);
}

tree::TerminalNode* Java9_v2Parser::ClassInstanceCreationExpression_lfno_primary2Context::NEW() {
  return getToken(Java9_v2Parser::NEW, 0);
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::ClassInstanceCreationExpression_lfno_primary2Context::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

tree::TerminalNode* Java9_v2Parser::ClassInstanceCreationExpression_lfno_primary2Context::LPAREN() {
  return getToken(Java9_v2Parser::LPAREN, 0);
}

tree::TerminalNode* Java9_v2Parser::ClassInstanceCreationExpression_lfno_primary2Context::RPAREN() {
  return getToken(Java9_v2Parser::RPAREN, 0);
}

Java9_v2Parser::TypeArgumentsContext* Java9_v2Parser::ClassInstanceCreationExpression_lfno_primary2Context::typeArguments() {
  return getRuleContext<Java9_v2Parser::TypeArgumentsContext>(0);
}

std::vector<Java9_v2Parser::AnnotationContext *> Java9_v2Parser::ClassInstanceCreationExpression_lfno_primary2Context::annotation() {
  return getRuleContexts<Java9_v2Parser::AnnotationContext>();
}

Java9_v2Parser::AnnotationContext* Java9_v2Parser::ClassInstanceCreationExpression_lfno_primary2Context::annotation(size_t i) {
  return getRuleContext<Java9_v2Parser::AnnotationContext>(i);
}

Java9_v2Parser::TypeArgumentsOrDiamondContext* Java9_v2Parser::ClassInstanceCreationExpression_lfno_primary2Context::typeArgumentsOrDiamond() {
  return getRuleContext<Java9_v2Parser::TypeArgumentsOrDiamondContext>(0);
}

Java9_v2Parser::ArgumentListContext* Java9_v2Parser::ClassInstanceCreationExpression_lfno_primary2Context::argumentList() {
  return getRuleContext<Java9_v2Parser::ArgumentListContext>(0);
}

Java9_v2Parser::ClassBodyContext* Java9_v2Parser::ClassInstanceCreationExpression_lfno_primary2Context::classBody() {
  return getRuleContext<Java9_v2Parser::ClassBodyContext>(0);
}

Java9_v2Parser::ClassInstanceCreationExpression_lfno_primary2Context::ClassInstanceCreationExpression_lfno_primary2Context(ClassInstanceCreationExpression_lfno_primaryContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ClassInstanceCreationExpression_lfno_primary2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassInstanceCreationExpression_lfno_primary2(this);
}
void Java9_v2Parser::ClassInstanceCreationExpression_lfno_primary2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassInstanceCreationExpression_lfno_primary2(this);
}

antlrcpp::Any Java9_v2Parser::ClassInstanceCreationExpression_lfno_primary2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitClassInstanceCreationExpression_lfno_primary2(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::ClassInstanceCreationExpression_lfno_primaryContext* Java9_v2Parser::classInstanceCreationExpression_lfno_primary() {
  ClassInstanceCreationExpression_lfno_primaryContext *_localctx = _tracker.createInstance<ClassInstanceCreationExpression_lfno_primaryContext>(_ctx, getState());
  enterRule(_localctx, 390, Java9_v2Parser::RuleClassInstanceCreationExpression_lfno_primary);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2321);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Java9_v2Parser::NEW: {
        _localctx = dynamic_cast<ClassInstanceCreationExpression_lfno_primaryContext *>(_tracker.createInstance<Java9_v2Parser::ClassInstanceCreationExpression_lfno_primary1Context>(_localctx));
        enterOuterAlt(_localctx, 1);
        setState(2262);
        match(Java9_v2Parser::NEW);
        setState(2264);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Java9_v2Parser::LT) {
          setState(2263);
          typeArguments();
        }
        setState(2269);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == Java9_v2Parser::AT) {
          setState(2266);
          annotation();
          setState(2271);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(2272);
        identifier();
        setState(2283);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == Java9_v2Parser::DOT) {
          setState(2273);
          match(Java9_v2Parser::DOT);
          setState(2277);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == Java9_v2Parser::AT) {
            setState(2274);
            annotation();
            setState(2279);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
          setState(2280);
          identifier();
          setState(2285);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(2287);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Java9_v2Parser::LT) {
          setState(2286);
          typeArgumentsOrDiamond();
        }
        setState(2289);
        match(Java9_v2Parser::LPAREN);
        setState(2291);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & ((1ULL << Java9_v2Parser::T__0)
          | (1ULL << Java9_v2Parser::T__1)
          | (1ULL << Java9_v2Parser::T__2)
          | (1ULL << Java9_v2Parser::T__3)
          | (1ULL << Java9_v2Parser::T__4)
          | (1ULL << Java9_v2Parser::T__5)
          | (1ULL << Java9_v2Parser::T__6)
          | (1ULL << Java9_v2Parser::T__7)
          | (1ULL << Java9_v2Parser::T__8)
          | (1ULL << Java9_v2Parser::BOOLEAN)
          | (1ULL << Java9_v2Parser::BYTE)
          | (1ULL << Java9_v2Parser::CHAR)
          | (1ULL << Java9_v2Parser::DOUBLE)
          | (1ULL << Java9_v2Parser::FLOAT)
          | (1ULL << Java9_v2Parser::INT)
          | (1ULL << Java9_v2Parser::LONG)
          | (1ULL << Java9_v2Parser::NEW)
          | (1ULL << Java9_v2Parser::SHORT)
          | (1ULL << Java9_v2Parser::SUPER)
          | (1ULL << Java9_v2Parser::THIS)
          | (1ULL << Java9_v2Parser::VOID)
          | (1ULL << Java9_v2Parser::IntegerLiteral)
          | (1ULL << Java9_v2Parser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & ((1ULL << (Java9_v2Parser::BooleanLiteral - 64))
          | (1ULL << (Java9_v2Parser::CharacterLiteral - 64))
          | (1ULL << (Java9_v2Parser::StringLiteral - 64))
          | (1ULL << (Java9_v2Parser::NullLiteral - 64))
          | (1ULL << (Java9_v2Parser::LPAREN - 64))
          | (1ULL << (Java9_v2Parser::AT - 64))
          | (1ULL << (Java9_v2Parser::BANG - 64))
          | (1ULL << (Java9_v2Parser::TILDE - 64))
          | (1ULL << (Java9_v2Parser::INC - 64))
          | (1ULL << (Java9_v2Parser::DEC - 64))
          | (1ULL << (Java9_v2Parser::ADD - 64))
          | (1ULL << (Java9_v2Parser::SUB - 64))
          | (1ULL << (Java9_v2Parser::Identifier - 64)))) != 0)) {
          setState(2290);
          argumentList();
        }
        setState(2293);
        match(Java9_v2Parser::RPAREN);
        setState(2295);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 249, _ctx)) {
        case 1: {
          setState(2294);
          classBody();
          break;
        }

        default:
          break;
        }
        break;
      }

      case Java9_v2Parser::T__0:
      case Java9_v2Parser::T__1:
      case Java9_v2Parser::T__2:
      case Java9_v2Parser::T__3:
      case Java9_v2Parser::T__4:
      case Java9_v2Parser::T__5:
      case Java9_v2Parser::T__6:
      case Java9_v2Parser::T__7:
      case Java9_v2Parser::T__8:
      case Java9_v2Parser::Identifier: {
        _localctx = dynamic_cast<ClassInstanceCreationExpression_lfno_primaryContext *>(_tracker.createInstance<Java9_v2Parser::ClassInstanceCreationExpression_lfno_primary2Context>(_localctx));
        enterOuterAlt(_localctx, 2);
        setState(2297);
        expressionName();
        setState(2298);
        match(Java9_v2Parser::DOT);
        setState(2299);
        match(Java9_v2Parser::NEW);
        setState(2301);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Java9_v2Parser::LT) {
          setState(2300);
          typeArguments();
        }
        setState(2306);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == Java9_v2Parser::AT) {
          setState(2303);
          annotation();
          setState(2308);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(2309);
        identifier();
        setState(2311);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Java9_v2Parser::LT) {
          setState(2310);
          typeArgumentsOrDiamond();
        }
        setState(2313);
        match(Java9_v2Parser::LPAREN);
        setState(2315);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & ((1ULL << Java9_v2Parser::T__0)
          | (1ULL << Java9_v2Parser::T__1)
          | (1ULL << Java9_v2Parser::T__2)
          | (1ULL << Java9_v2Parser::T__3)
          | (1ULL << Java9_v2Parser::T__4)
          | (1ULL << Java9_v2Parser::T__5)
          | (1ULL << Java9_v2Parser::T__6)
          | (1ULL << Java9_v2Parser::T__7)
          | (1ULL << Java9_v2Parser::T__8)
          | (1ULL << Java9_v2Parser::BOOLEAN)
          | (1ULL << Java9_v2Parser::BYTE)
          | (1ULL << Java9_v2Parser::CHAR)
          | (1ULL << Java9_v2Parser::DOUBLE)
          | (1ULL << Java9_v2Parser::FLOAT)
          | (1ULL << Java9_v2Parser::INT)
          | (1ULL << Java9_v2Parser::LONG)
          | (1ULL << Java9_v2Parser::NEW)
          | (1ULL << Java9_v2Parser::SHORT)
          | (1ULL << Java9_v2Parser::SUPER)
          | (1ULL << Java9_v2Parser::THIS)
          | (1ULL << Java9_v2Parser::VOID)
          | (1ULL << Java9_v2Parser::IntegerLiteral)
          | (1ULL << Java9_v2Parser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & ((1ULL << (Java9_v2Parser::BooleanLiteral - 64))
          | (1ULL << (Java9_v2Parser::CharacterLiteral - 64))
          | (1ULL << (Java9_v2Parser::StringLiteral - 64))
          | (1ULL << (Java9_v2Parser::NullLiteral - 64))
          | (1ULL << (Java9_v2Parser::LPAREN - 64))
          | (1ULL << (Java9_v2Parser::AT - 64))
          | (1ULL << (Java9_v2Parser::BANG - 64))
          | (1ULL << (Java9_v2Parser::TILDE - 64))
          | (1ULL << (Java9_v2Parser::INC - 64))
          | (1ULL << (Java9_v2Parser::DEC - 64))
          | (1ULL << (Java9_v2Parser::ADD - 64))
          | (1ULL << (Java9_v2Parser::SUB - 64))
          | (1ULL << (Java9_v2Parser::Identifier - 64)))) != 0)) {
          setState(2314);
          argumentList();
        }
        setState(2317);
        match(Java9_v2Parser::RPAREN);
        setState(2319);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 254, _ctx)) {
        case 1: {
          setState(2318);
          classBody();
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeArgumentsOrDiamondContext ------------------------------------------------------------------

Java9_v2Parser::TypeArgumentsOrDiamondContext::TypeArgumentsOrDiamondContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::TypeArgumentsOrDiamondContext::getRuleIndex() const {
  return Java9_v2Parser::RuleTypeArgumentsOrDiamond;
}

void Java9_v2Parser::TypeArgumentsOrDiamondContext::copyFrom(TypeArgumentsOrDiamondContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- TypeArgumentsOrDiamond1Context ------------------------------------------------------------------

Java9_v2Parser::TypeArgumentsContext* Java9_v2Parser::TypeArgumentsOrDiamond1Context::typeArguments() {
  return getRuleContext<Java9_v2Parser::TypeArgumentsContext>(0);
}

Java9_v2Parser::TypeArgumentsOrDiamond1Context::TypeArgumentsOrDiamond1Context(TypeArgumentsOrDiamondContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::TypeArgumentsOrDiamond1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeArgumentsOrDiamond1(this);
}
void Java9_v2Parser::TypeArgumentsOrDiamond1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeArgumentsOrDiamond1(this);
}

antlrcpp::Any Java9_v2Parser::TypeArgumentsOrDiamond1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitTypeArgumentsOrDiamond1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TypeArgumentsOrDiamond2Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::TypeArgumentsOrDiamond2Context::LT() {
  return getToken(Java9_v2Parser::LT, 0);
}

tree::TerminalNode* Java9_v2Parser::TypeArgumentsOrDiamond2Context::GT() {
  return getToken(Java9_v2Parser::GT, 0);
}

Java9_v2Parser::TypeArgumentsOrDiamond2Context::TypeArgumentsOrDiamond2Context(TypeArgumentsOrDiamondContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::TypeArgumentsOrDiamond2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeArgumentsOrDiamond2(this);
}
void Java9_v2Parser::TypeArgumentsOrDiamond2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeArgumentsOrDiamond2(this);
}

antlrcpp::Any Java9_v2Parser::TypeArgumentsOrDiamond2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitTypeArgumentsOrDiamond2(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::TypeArgumentsOrDiamondContext* Java9_v2Parser::typeArgumentsOrDiamond() {
  TypeArgumentsOrDiamondContext *_localctx = _tracker.createInstance<TypeArgumentsOrDiamondContext>(_ctx, getState());
  enterRule(_localctx, 392, Java9_v2Parser::RuleTypeArgumentsOrDiamond);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2326);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 256, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<TypeArgumentsOrDiamondContext *>(_tracker.createInstance<Java9_v2Parser::TypeArgumentsOrDiamond1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(2323);
      typeArguments();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<TypeArgumentsOrDiamondContext *>(_tracker.createInstance<Java9_v2Parser::TypeArgumentsOrDiamond2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(2324);
      match(Java9_v2Parser::LT);
      setState(2325);
      match(Java9_v2Parser::GT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FieldAccessContext ------------------------------------------------------------------

Java9_v2Parser::FieldAccessContext::FieldAccessContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::FieldAccessContext::getRuleIndex() const {
  return Java9_v2Parser::RuleFieldAccess;
}

void Java9_v2Parser::FieldAccessContext::copyFrom(FieldAccessContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- FieldAccess1Context ------------------------------------------------------------------

Java9_v2Parser::PrimaryContext* Java9_v2Parser::FieldAccess1Context::primary() {
  return getRuleContext<Java9_v2Parser::PrimaryContext>(0);
}

tree::TerminalNode* Java9_v2Parser::FieldAccess1Context::DOT() {
  return getToken(Java9_v2Parser::DOT, 0);
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::FieldAccess1Context::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

Java9_v2Parser::FieldAccess1Context::FieldAccess1Context(FieldAccessContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::FieldAccess1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFieldAccess1(this);
}
void Java9_v2Parser::FieldAccess1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFieldAccess1(this);
}

antlrcpp::Any Java9_v2Parser::FieldAccess1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitFieldAccess1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- FieldAccess2Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::FieldAccess2Context::SUPER() {
  return getToken(Java9_v2Parser::SUPER, 0);
}

tree::TerminalNode* Java9_v2Parser::FieldAccess2Context::DOT() {
  return getToken(Java9_v2Parser::DOT, 0);
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::FieldAccess2Context::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

Java9_v2Parser::FieldAccess2Context::FieldAccess2Context(FieldAccessContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::FieldAccess2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFieldAccess2(this);
}
void Java9_v2Parser::FieldAccess2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFieldAccess2(this);
}

antlrcpp::Any Java9_v2Parser::FieldAccess2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitFieldAccess2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- FieldAccess3Context ------------------------------------------------------------------

Java9_v2Parser::TypeNameContext* Java9_v2Parser::FieldAccess3Context::typeName() {
  return getRuleContext<Java9_v2Parser::TypeNameContext>(0);
}

std::vector<tree::TerminalNode *> Java9_v2Parser::FieldAccess3Context::DOT() {
  return getTokens(Java9_v2Parser::DOT);
}

tree::TerminalNode* Java9_v2Parser::FieldAccess3Context::DOT(size_t i) {
  return getToken(Java9_v2Parser::DOT, i);
}

tree::TerminalNode* Java9_v2Parser::FieldAccess3Context::SUPER() {
  return getToken(Java9_v2Parser::SUPER, 0);
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::FieldAccess3Context::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

Java9_v2Parser::FieldAccess3Context::FieldAccess3Context(FieldAccessContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::FieldAccess3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFieldAccess3(this);
}
void Java9_v2Parser::FieldAccess3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFieldAccess3(this);
}

antlrcpp::Any Java9_v2Parser::FieldAccess3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitFieldAccess3(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::FieldAccessContext* Java9_v2Parser::fieldAccess() {
  FieldAccessContext *_localctx = _tracker.createInstance<FieldAccessContext>(_ctx, getState());
  enterRule(_localctx, 394, Java9_v2Parser::RuleFieldAccess);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2341);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 257, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<FieldAccessContext *>(_tracker.createInstance<Java9_v2Parser::FieldAccess1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(2328);
      primary();
      setState(2329);
      match(Java9_v2Parser::DOT);
      setState(2330);
      identifier();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<FieldAccessContext *>(_tracker.createInstance<Java9_v2Parser::FieldAccess2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(2332);
      match(Java9_v2Parser::SUPER);
      setState(2333);
      match(Java9_v2Parser::DOT);
      setState(2334);
      identifier();
      break;
    }

    case 3: {
      _localctx = dynamic_cast<FieldAccessContext *>(_tracker.createInstance<Java9_v2Parser::FieldAccess3Context>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(2335);
      typeName();
      setState(2336);
      match(Java9_v2Parser::DOT);
      setState(2337);
      match(Java9_v2Parser::SUPER);
      setState(2338);
      match(Java9_v2Parser::DOT);
      setState(2339);
      identifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FieldAccess_lf_primaryContext ------------------------------------------------------------------

Java9_v2Parser::FieldAccess_lf_primaryContext::FieldAccess_lf_primaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::FieldAccess_lf_primaryContext::DOT() {
  return getToken(Java9_v2Parser::DOT, 0);
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::FieldAccess_lf_primaryContext::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}


size_t Java9_v2Parser::FieldAccess_lf_primaryContext::getRuleIndex() const {
  return Java9_v2Parser::RuleFieldAccess_lf_primary;
}

void Java9_v2Parser::FieldAccess_lf_primaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFieldAccess_lf_primary(this);
}

void Java9_v2Parser::FieldAccess_lf_primaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFieldAccess_lf_primary(this);
}


antlrcpp::Any Java9_v2Parser::FieldAccess_lf_primaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitFieldAccess_lf_primary(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::FieldAccess_lf_primaryContext* Java9_v2Parser::fieldAccess_lf_primary() {
  FieldAccess_lf_primaryContext *_localctx = _tracker.createInstance<FieldAccess_lf_primaryContext>(_ctx, getState());
  enterRule(_localctx, 396, Java9_v2Parser::RuleFieldAccess_lf_primary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2343);
    match(Java9_v2Parser::DOT);
    setState(2344);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FieldAccess_lfno_primaryContext ------------------------------------------------------------------

Java9_v2Parser::FieldAccess_lfno_primaryContext::FieldAccess_lfno_primaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::FieldAccess_lfno_primaryContext::getRuleIndex() const {
  return Java9_v2Parser::RuleFieldAccess_lfno_primary;
}

void Java9_v2Parser::FieldAccess_lfno_primaryContext::copyFrom(FieldAccess_lfno_primaryContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- FieldAccess_lfno_primary2Context ------------------------------------------------------------------

Java9_v2Parser::TypeNameContext* Java9_v2Parser::FieldAccess_lfno_primary2Context::typeName() {
  return getRuleContext<Java9_v2Parser::TypeNameContext>(0);
}

std::vector<tree::TerminalNode *> Java9_v2Parser::FieldAccess_lfno_primary2Context::DOT() {
  return getTokens(Java9_v2Parser::DOT);
}

tree::TerminalNode* Java9_v2Parser::FieldAccess_lfno_primary2Context::DOT(size_t i) {
  return getToken(Java9_v2Parser::DOT, i);
}

tree::TerminalNode* Java9_v2Parser::FieldAccess_lfno_primary2Context::SUPER() {
  return getToken(Java9_v2Parser::SUPER, 0);
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::FieldAccess_lfno_primary2Context::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

Java9_v2Parser::FieldAccess_lfno_primary2Context::FieldAccess_lfno_primary2Context(FieldAccess_lfno_primaryContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::FieldAccess_lfno_primary2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFieldAccess_lfno_primary2(this);
}
void Java9_v2Parser::FieldAccess_lfno_primary2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFieldAccess_lfno_primary2(this);
}

antlrcpp::Any Java9_v2Parser::FieldAccess_lfno_primary2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitFieldAccess_lfno_primary2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- FieldAccess_lfno_primary1Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::FieldAccess_lfno_primary1Context::SUPER() {
  return getToken(Java9_v2Parser::SUPER, 0);
}

tree::TerminalNode* Java9_v2Parser::FieldAccess_lfno_primary1Context::DOT() {
  return getToken(Java9_v2Parser::DOT, 0);
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::FieldAccess_lfno_primary1Context::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

Java9_v2Parser::FieldAccess_lfno_primary1Context::FieldAccess_lfno_primary1Context(FieldAccess_lfno_primaryContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::FieldAccess_lfno_primary1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFieldAccess_lfno_primary1(this);
}
void Java9_v2Parser::FieldAccess_lfno_primary1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFieldAccess_lfno_primary1(this);
}

antlrcpp::Any Java9_v2Parser::FieldAccess_lfno_primary1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitFieldAccess_lfno_primary1(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::FieldAccess_lfno_primaryContext* Java9_v2Parser::fieldAccess_lfno_primary() {
  FieldAccess_lfno_primaryContext *_localctx = _tracker.createInstance<FieldAccess_lfno_primaryContext>(_ctx, getState());
  enterRule(_localctx, 398, Java9_v2Parser::RuleFieldAccess_lfno_primary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2355);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Java9_v2Parser::SUPER: {
        _localctx = dynamic_cast<FieldAccess_lfno_primaryContext *>(_tracker.createInstance<Java9_v2Parser::FieldAccess_lfno_primary1Context>(_localctx));
        enterOuterAlt(_localctx, 1);
        setState(2346);
        match(Java9_v2Parser::SUPER);
        setState(2347);
        match(Java9_v2Parser::DOT);
        setState(2348);
        identifier();
        break;
      }

      case Java9_v2Parser::T__0:
      case Java9_v2Parser::T__1:
      case Java9_v2Parser::T__2:
      case Java9_v2Parser::T__3:
      case Java9_v2Parser::T__4:
      case Java9_v2Parser::T__5:
      case Java9_v2Parser::T__6:
      case Java9_v2Parser::T__7:
      case Java9_v2Parser::T__8:
      case Java9_v2Parser::Identifier: {
        _localctx = dynamic_cast<FieldAccess_lfno_primaryContext *>(_tracker.createInstance<Java9_v2Parser::FieldAccess_lfno_primary2Context>(_localctx));
        enterOuterAlt(_localctx, 2);
        setState(2349);
        typeName();
        setState(2350);
        match(Java9_v2Parser::DOT);
        setState(2351);
        match(Java9_v2Parser::SUPER);
        setState(2352);
        match(Java9_v2Parser::DOT);
        setState(2353);
        identifier();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayAccessContext ------------------------------------------------------------------

Java9_v2Parser::ArrayAccessContext::ArrayAccessContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::ExpressionNameContext* Java9_v2Parser::ArrayAccessContext::expressionName() {
  return getRuleContext<Java9_v2Parser::ExpressionNameContext>(0);
}

std::vector<tree::TerminalNode *> Java9_v2Parser::ArrayAccessContext::LBRACK() {
  return getTokens(Java9_v2Parser::LBRACK);
}

tree::TerminalNode* Java9_v2Parser::ArrayAccessContext::LBRACK(size_t i) {
  return getToken(Java9_v2Parser::LBRACK, i);
}

std::vector<Java9_v2Parser::ExpressionContext *> Java9_v2Parser::ArrayAccessContext::expression() {
  return getRuleContexts<Java9_v2Parser::ExpressionContext>();
}

Java9_v2Parser::ExpressionContext* Java9_v2Parser::ArrayAccessContext::expression(size_t i) {
  return getRuleContext<Java9_v2Parser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> Java9_v2Parser::ArrayAccessContext::RBRACK() {
  return getTokens(Java9_v2Parser::RBRACK);
}

tree::TerminalNode* Java9_v2Parser::ArrayAccessContext::RBRACK(size_t i) {
  return getToken(Java9_v2Parser::RBRACK, i);
}

Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccessContext* Java9_v2Parser::ArrayAccessContext::primaryNoNewArray_lfno_arrayAccess() {
  return getRuleContext<Java9_v2Parser::PrimaryNoNewArray_lfno_arrayAccessContext>(0);
}

std::vector<Java9_v2Parser::PrimaryNoNewArray_lf_arrayAccessContext *> Java9_v2Parser::ArrayAccessContext::primaryNoNewArray_lf_arrayAccess() {
  return getRuleContexts<Java9_v2Parser::PrimaryNoNewArray_lf_arrayAccessContext>();
}

Java9_v2Parser::PrimaryNoNewArray_lf_arrayAccessContext* Java9_v2Parser::ArrayAccessContext::primaryNoNewArray_lf_arrayAccess(size_t i) {
  return getRuleContext<Java9_v2Parser::PrimaryNoNewArray_lf_arrayAccessContext>(i);
}


size_t Java9_v2Parser::ArrayAccessContext::getRuleIndex() const {
  return Java9_v2Parser::RuleArrayAccess;
}

void Java9_v2Parser::ArrayAccessContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayAccess(this);
}

void Java9_v2Parser::ArrayAccessContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayAccess(this);
}


antlrcpp::Any Java9_v2Parser::ArrayAccessContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitArrayAccess(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::ArrayAccessContext* Java9_v2Parser::arrayAccess() {
  ArrayAccessContext *_localctx = _tracker.createInstance<ArrayAccessContext>(_ctx, getState());
  enterRule(_localctx, 400, Java9_v2Parser::RuleArrayAccess);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2367);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 259, _ctx)) {
    case 1: {
      setState(2357);
      expressionName();
      setState(2358);
      match(Java9_v2Parser::LBRACK);
      setState(2359);
      expression();
      setState(2360);
      match(Java9_v2Parser::RBRACK);
      break;
    }

    case 2: {
      setState(2362);
      primaryNoNewArray_lfno_arrayAccess();
      setState(2363);
      match(Java9_v2Parser::LBRACK);
      setState(2364);
      expression();
      setState(2365);
      match(Java9_v2Parser::RBRACK);
      break;
    }

    default:
      break;
    }
    setState(2376);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java9_v2Parser::LBRACK) {
      setState(2369);
      primaryNoNewArray_lf_arrayAccess();
      setState(2370);
      match(Java9_v2Parser::LBRACK);
      setState(2371);
      expression();
      setState(2372);
      match(Java9_v2Parser::RBRACK);
      setState(2378);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayAccess_lf_primaryContext ------------------------------------------------------------------

Java9_v2Parser::ArrayAccess_lf_primaryContext::ArrayAccess_lf_primaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext* Java9_v2Parser::ArrayAccess_lf_primaryContext::primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary() {
  return getRuleContext<Java9_v2Parser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext>(0);
}

std::vector<tree::TerminalNode *> Java9_v2Parser::ArrayAccess_lf_primaryContext::LBRACK() {
  return getTokens(Java9_v2Parser::LBRACK);
}

tree::TerminalNode* Java9_v2Parser::ArrayAccess_lf_primaryContext::LBRACK(size_t i) {
  return getToken(Java9_v2Parser::LBRACK, i);
}

std::vector<Java9_v2Parser::ExpressionContext *> Java9_v2Parser::ArrayAccess_lf_primaryContext::expression() {
  return getRuleContexts<Java9_v2Parser::ExpressionContext>();
}

Java9_v2Parser::ExpressionContext* Java9_v2Parser::ArrayAccess_lf_primaryContext::expression(size_t i) {
  return getRuleContext<Java9_v2Parser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> Java9_v2Parser::ArrayAccess_lf_primaryContext::RBRACK() {
  return getTokens(Java9_v2Parser::RBRACK);
}

tree::TerminalNode* Java9_v2Parser::ArrayAccess_lf_primaryContext::RBRACK(size_t i) {
  return getToken(Java9_v2Parser::RBRACK, i);
}

std::vector<Java9_v2Parser::PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext *> Java9_v2Parser::ArrayAccess_lf_primaryContext::primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary() {
  return getRuleContexts<Java9_v2Parser::PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext>();
}

Java9_v2Parser::PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext* Java9_v2Parser::ArrayAccess_lf_primaryContext::primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(size_t i) {
  return getRuleContext<Java9_v2Parser::PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext>(i);
}


size_t Java9_v2Parser::ArrayAccess_lf_primaryContext::getRuleIndex() const {
  return Java9_v2Parser::RuleArrayAccess_lf_primary;
}

void Java9_v2Parser::ArrayAccess_lf_primaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayAccess_lf_primary(this);
}

void Java9_v2Parser::ArrayAccess_lf_primaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayAccess_lf_primary(this);
}


antlrcpp::Any Java9_v2Parser::ArrayAccess_lf_primaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitArrayAccess_lf_primary(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::ArrayAccess_lf_primaryContext* Java9_v2Parser::arrayAccess_lf_primary() {
  ArrayAccess_lf_primaryContext *_localctx = _tracker.createInstance<ArrayAccess_lf_primaryContext>(_ctx, getState());
  enterRule(_localctx, 402, Java9_v2Parser::RuleArrayAccess_lf_primary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2379);
    primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary();
    setState(2380);
    match(Java9_v2Parser::LBRACK);
    setState(2381);
    expression();
    setState(2382);
    match(Java9_v2Parser::RBRACK);
    setState(2391);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 261, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2384);
        primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary();
        setState(2385);
        match(Java9_v2Parser::LBRACK);
        setState(2386);
        expression();
        setState(2387);
        match(Java9_v2Parser::RBRACK); 
      }
      setState(2393);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 261, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayAccess_lfno_primaryContext ------------------------------------------------------------------

Java9_v2Parser::ArrayAccess_lfno_primaryContext::ArrayAccess_lfno_primaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::ExpressionNameContext* Java9_v2Parser::ArrayAccess_lfno_primaryContext::expressionName() {
  return getRuleContext<Java9_v2Parser::ExpressionNameContext>(0);
}

std::vector<tree::TerminalNode *> Java9_v2Parser::ArrayAccess_lfno_primaryContext::LBRACK() {
  return getTokens(Java9_v2Parser::LBRACK);
}

tree::TerminalNode* Java9_v2Parser::ArrayAccess_lfno_primaryContext::LBRACK(size_t i) {
  return getToken(Java9_v2Parser::LBRACK, i);
}

std::vector<Java9_v2Parser::ExpressionContext *> Java9_v2Parser::ArrayAccess_lfno_primaryContext::expression() {
  return getRuleContexts<Java9_v2Parser::ExpressionContext>();
}

Java9_v2Parser::ExpressionContext* Java9_v2Parser::ArrayAccess_lfno_primaryContext::expression(size_t i) {
  return getRuleContext<Java9_v2Parser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> Java9_v2Parser::ArrayAccess_lfno_primaryContext::RBRACK() {
  return getTokens(Java9_v2Parser::RBRACK);
}

tree::TerminalNode* Java9_v2Parser::ArrayAccess_lfno_primaryContext::RBRACK(size_t i) {
  return getToken(Java9_v2Parser::RBRACK, i);
}

Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext* Java9_v2Parser::ArrayAccess_lfno_primaryContext::primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary() {
  return getRuleContext<Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext>(0);
}

std::vector<Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext *> Java9_v2Parser::ArrayAccess_lfno_primaryContext::primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary() {
  return getRuleContexts<Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext>();
}

Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext* Java9_v2Parser::ArrayAccess_lfno_primaryContext::primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(size_t i) {
  return getRuleContext<Java9_v2Parser::PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext>(i);
}


size_t Java9_v2Parser::ArrayAccess_lfno_primaryContext::getRuleIndex() const {
  return Java9_v2Parser::RuleArrayAccess_lfno_primary;
}

void Java9_v2Parser::ArrayAccess_lfno_primaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayAccess_lfno_primary(this);
}

void Java9_v2Parser::ArrayAccess_lfno_primaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayAccess_lfno_primary(this);
}


antlrcpp::Any Java9_v2Parser::ArrayAccess_lfno_primaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitArrayAccess_lfno_primary(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::ArrayAccess_lfno_primaryContext* Java9_v2Parser::arrayAccess_lfno_primary() {
  ArrayAccess_lfno_primaryContext *_localctx = _tracker.createInstance<ArrayAccess_lfno_primaryContext>(_ctx, getState());
  enterRule(_localctx, 404, Java9_v2Parser::RuleArrayAccess_lfno_primary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2404);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 262, _ctx)) {
    case 1: {
      setState(2394);
      expressionName();
      setState(2395);
      match(Java9_v2Parser::LBRACK);
      setState(2396);
      expression();
      setState(2397);
      match(Java9_v2Parser::RBRACK);
      break;
    }

    case 2: {
      setState(2399);
      primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary();
      setState(2400);
      match(Java9_v2Parser::LBRACK);
      setState(2401);
      expression();
      setState(2402);
      match(Java9_v2Parser::RBRACK);
      break;
    }

    default:
      break;
    }
    setState(2413);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 263, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2406);
        primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary();
        setState(2407);
        match(Java9_v2Parser::LBRACK);
        setState(2408);
        expression();
        setState(2409);
        match(Java9_v2Parser::RBRACK); 
      }
      setState(2415);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 263, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodInvocationContext ------------------------------------------------------------------

Java9_v2Parser::MethodInvocationContext::MethodInvocationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::MethodInvocationContext::getRuleIndex() const {
  return Java9_v2Parser::RuleMethodInvocation;
}

void Java9_v2Parser::MethodInvocationContext::copyFrom(MethodInvocationContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- MethodInvocation1Context ------------------------------------------------------------------

Java9_v2Parser::MethodNameContext* Java9_v2Parser::MethodInvocation1Context::methodName() {
  return getRuleContext<Java9_v2Parser::MethodNameContext>(0);
}

tree::TerminalNode* Java9_v2Parser::MethodInvocation1Context::LPAREN() {
  return getToken(Java9_v2Parser::LPAREN, 0);
}

tree::TerminalNode* Java9_v2Parser::MethodInvocation1Context::RPAREN() {
  return getToken(Java9_v2Parser::RPAREN, 0);
}

Java9_v2Parser::ArgumentListContext* Java9_v2Parser::MethodInvocation1Context::argumentList() {
  return getRuleContext<Java9_v2Parser::ArgumentListContext>(0);
}

Java9_v2Parser::MethodInvocation1Context::MethodInvocation1Context(MethodInvocationContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::MethodInvocation1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodInvocation1(this);
}
void Java9_v2Parser::MethodInvocation1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodInvocation1(this);
}

antlrcpp::Any Java9_v2Parser::MethodInvocation1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitMethodInvocation1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- MethodInvocation2Context ------------------------------------------------------------------

Java9_v2Parser::TypeNameContext* Java9_v2Parser::MethodInvocation2Context::typeName() {
  return getRuleContext<Java9_v2Parser::TypeNameContext>(0);
}

tree::TerminalNode* Java9_v2Parser::MethodInvocation2Context::DOT() {
  return getToken(Java9_v2Parser::DOT, 0);
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::MethodInvocation2Context::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

tree::TerminalNode* Java9_v2Parser::MethodInvocation2Context::LPAREN() {
  return getToken(Java9_v2Parser::LPAREN, 0);
}

tree::TerminalNode* Java9_v2Parser::MethodInvocation2Context::RPAREN() {
  return getToken(Java9_v2Parser::RPAREN, 0);
}

Java9_v2Parser::TypeArgumentsContext* Java9_v2Parser::MethodInvocation2Context::typeArguments() {
  return getRuleContext<Java9_v2Parser::TypeArgumentsContext>(0);
}

Java9_v2Parser::ArgumentListContext* Java9_v2Parser::MethodInvocation2Context::argumentList() {
  return getRuleContext<Java9_v2Parser::ArgumentListContext>(0);
}

Java9_v2Parser::MethodInvocation2Context::MethodInvocation2Context(MethodInvocationContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::MethodInvocation2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodInvocation2(this);
}
void Java9_v2Parser::MethodInvocation2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodInvocation2(this);
}

antlrcpp::Any Java9_v2Parser::MethodInvocation2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitMethodInvocation2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- MethodInvocation3Context ------------------------------------------------------------------

Java9_v2Parser::ExpressionNameContext* Java9_v2Parser::MethodInvocation3Context::expressionName() {
  return getRuleContext<Java9_v2Parser::ExpressionNameContext>(0);
}

tree::TerminalNode* Java9_v2Parser::MethodInvocation3Context::DOT() {
  return getToken(Java9_v2Parser::DOT, 0);
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::MethodInvocation3Context::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

tree::TerminalNode* Java9_v2Parser::MethodInvocation3Context::LPAREN() {
  return getToken(Java9_v2Parser::LPAREN, 0);
}

tree::TerminalNode* Java9_v2Parser::MethodInvocation3Context::RPAREN() {
  return getToken(Java9_v2Parser::RPAREN, 0);
}

Java9_v2Parser::TypeArgumentsContext* Java9_v2Parser::MethodInvocation3Context::typeArguments() {
  return getRuleContext<Java9_v2Parser::TypeArgumentsContext>(0);
}

Java9_v2Parser::ArgumentListContext* Java9_v2Parser::MethodInvocation3Context::argumentList() {
  return getRuleContext<Java9_v2Parser::ArgumentListContext>(0);
}

Java9_v2Parser::MethodInvocation3Context::MethodInvocation3Context(MethodInvocationContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::MethodInvocation3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodInvocation3(this);
}
void Java9_v2Parser::MethodInvocation3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodInvocation3(this);
}

antlrcpp::Any Java9_v2Parser::MethodInvocation3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitMethodInvocation3(this);
  else
    return visitor->visitChildren(this);
}
//----------------- MethodInvocation4Context ------------------------------------------------------------------

Java9_v2Parser::PrimaryContext* Java9_v2Parser::MethodInvocation4Context::primary() {
  return getRuleContext<Java9_v2Parser::PrimaryContext>(0);
}

tree::TerminalNode* Java9_v2Parser::MethodInvocation4Context::DOT() {
  return getToken(Java9_v2Parser::DOT, 0);
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::MethodInvocation4Context::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

tree::TerminalNode* Java9_v2Parser::MethodInvocation4Context::LPAREN() {
  return getToken(Java9_v2Parser::LPAREN, 0);
}

tree::TerminalNode* Java9_v2Parser::MethodInvocation4Context::RPAREN() {
  return getToken(Java9_v2Parser::RPAREN, 0);
}

Java9_v2Parser::TypeArgumentsContext* Java9_v2Parser::MethodInvocation4Context::typeArguments() {
  return getRuleContext<Java9_v2Parser::TypeArgumentsContext>(0);
}

Java9_v2Parser::ArgumentListContext* Java9_v2Parser::MethodInvocation4Context::argumentList() {
  return getRuleContext<Java9_v2Parser::ArgumentListContext>(0);
}

Java9_v2Parser::MethodInvocation4Context::MethodInvocation4Context(MethodInvocationContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::MethodInvocation4Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodInvocation4(this);
}
void Java9_v2Parser::MethodInvocation4Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodInvocation4(this);
}

antlrcpp::Any Java9_v2Parser::MethodInvocation4Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitMethodInvocation4(this);
  else
    return visitor->visitChildren(this);
}
//----------------- MethodInvocation5Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::MethodInvocation5Context::SUPER() {
  return getToken(Java9_v2Parser::SUPER, 0);
}

tree::TerminalNode* Java9_v2Parser::MethodInvocation5Context::DOT() {
  return getToken(Java9_v2Parser::DOT, 0);
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::MethodInvocation5Context::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

tree::TerminalNode* Java9_v2Parser::MethodInvocation5Context::LPAREN() {
  return getToken(Java9_v2Parser::LPAREN, 0);
}

tree::TerminalNode* Java9_v2Parser::MethodInvocation5Context::RPAREN() {
  return getToken(Java9_v2Parser::RPAREN, 0);
}

Java9_v2Parser::TypeArgumentsContext* Java9_v2Parser::MethodInvocation5Context::typeArguments() {
  return getRuleContext<Java9_v2Parser::TypeArgumentsContext>(0);
}

Java9_v2Parser::ArgumentListContext* Java9_v2Parser::MethodInvocation5Context::argumentList() {
  return getRuleContext<Java9_v2Parser::ArgumentListContext>(0);
}

Java9_v2Parser::MethodInvocation5Context::MethodInvocation5Context(MethodInvocationContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::MethodInvocation5Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodInvocation5(this);
}
void Java9_v2Parser::MethodInvocation5Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodInvocation5(this);
}

antlrcpp::Any Java9_v2Parser::MethodInvocation5Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitMethodInvocation5(this);
  else
    return visitor->visitChildren(this);
}
//----------------- MethodInvocation6Context ------------------------------------------------------------------

Java9_v2Parser::TypeNameContext* Java9_v2Parser::MethodInvocation6Context::typeName() {
  return getRuleContext<Java9_v2Parser::TypeNameContext>(0);
}

std::vector<tree::TerminalNode *> Java9_v2Parser::MethodInvocation6Context::DOT() {
  return getTokens(Java9_v2Parser::DOT);
}

tree::TerminalNode* Java9_v2Parser::MethodInvocation6Context::DOT(size_t i) {
  return getToken(Java9_v2Parser::DOT, i);
}

tree::TerminalNode* Java9_v2Parser::MethodInvocation6Context::SUPER() {
  return getToken(Java9_v2Parser::SUPER, 0);
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::MethodInvocation6Context::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

tree::TerminalNode* Java9_v2Parser::MethodInvocation6Context::LPAREN() {
  return getToken(Java9_v2Parser::LPAREN, 0);
}

tree::TerminalNode* Java9_v2Parser::MethodInvocation6Context::RPAREN() {
  return getToken(Java9_v2Parser::RPAREN, 0);
}

Java9_v2Parser::TypeArgumentsContext* Java9_v2Parser::MethodInvocation6Context::typeArguments() {
  return getRuleContext<Java9_v2Parser::TypeArgumentsContext>(0);
}

Java9_v2Parser::ArgumentListContext* Java9_v2Parser::MethodInvocation6Context::argumentList() {
  return getRuleContext<Java9_v2Parser::ArgumentListContext>(0);
}

Java9_v2Parser::MethodInvocation6Context::MethodInvocation6Context(MethodInvocationContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::MethodInvocation6Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodInvocation6(this);
}
void Java9_v2Parser::MethodInvocation6Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodInvocation6(this);
}

antlrcpp::Any Java9_v2Parser::MethodInvocation6Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitMethodInvocation6(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::MethodInvocationContext* Java9_v2Parser::methodInvocation() {
  MethodInvocationContext *_localctx = _tracker.createInstance<MethodInvocationContext>(_ctx, getState());
  enterRule(_localctx, 406, Java9_v2Parser::RuleMethodInvocation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2485);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 275, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<MethodInvocationContext *>(_tracker.createInstance<Java9_v2Parser::MethodInvocation1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(2416);
      methodName();
      setState(2417);
      match(Java9_v2Parser::LPAREN);
      setState(2419);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << Java9_v2Parser::T__0)
        | (1ULL << Java9_v2Parser::T__1)
        | (1ULL << Java9_v2Parser::T__2)
        | (1ULL << Java9_v2Parser::T__3)
        | (1ULL << Java9_v2Parser::T__4)
        | (1ULL << Java9_v2Parser::T__5)
        | (1ULL << Java9_v2Parser::T__6)
        | (1ULL << Java9_v2Parser::T__7)
        | (1ULL << Java9_v2Parser::T__8)
        | (1ULL << Java9_v2Parser::BOOLEAN)
        | (1ULL << Java9_v2Parser::BYTE)
        | (1ULL << Java9_v2Parser::CHAR)
        | (1ULL << Java9_v2Parser::DOUBLE)
        | (1ULL << Java9_v2Parser::FLOAT)
        | (1ULL << Java9_v2Parser::INT)
        | (1ULL << Java9_v2Parser::LONG)
        | (1ULL << Java9_v2Parser::NEW)
        | (1ULL << Java9_v2Parser::SHORT)
        | (1ULL << Java9_v2Parser::SUPER)
        | (1ULL << Java9_v2Parser::THIS)
        | (1ULL << Java9_v2Parser::VOID)
        | (1ULL << Java9_v2Parser::IntegerLiteral)
        | (1ULL << Java9_v2Parser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (Java9_v2Parser::BooleanLiteral - 64))
        | (1ULL << (Java9_v2Parser::CharacterLiteral - 64))
        | (1ULL << (Java9_v2Parser::StringLiteral - 64))
        | (1ULL << (Java9_v2Parser::NullLiteral - 64))
        | (1ULL << (Java9_v2Parser::LPAREN - 64))
        | (1ULL << (Java9_v2Parser::AT - 64))
        | (1ULL << (Java9_v2Parser::BANG - 64))
        | (1ULL << (Java9_v2Parser::TILDE - 64))
        | (1ULL << (Java9_v2Parser::INC - 64))
        | (1ULL << (Java9_v2Parser::DEC - 64))
        | (1ULL << (Java9_v2Parser::ADD - 64))
        | (1ULL << (Java9_v2Parser::SUB - 64))
        | (1ULL << (Java9_v2Parser::Identifier - 64)))) != 0)) {
        setState(2418);
        argumentList();
      }
      setState(2421);
      match(Java9_v2Parser::RPAREN);
      break;
    }

    case 2: {
      _localctx = dynamic_cast<MethodInvocationContext *>(_tracker.createInstance<Java9_v2Parser::MethodInvocation2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(2423);
      typeName();
      setState(2424);
      match(Java9_v2Parser::DOT);
      setState(2426);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java9_v2Parser::LT) {
        setState(2425);
        typeArguments();
      }
      setState(2428);
      identifier();
      setState(2429);
      match(Java9_v2Parser::LPAREN);
      setState(2431);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << Java9_v2Parser::T__0)
        | (1ULL << Java9_v2Parser::T__1)
        | (1ULL << Java9_v2Parser::T__2)
        | (1ULL << Java9_v2Parser::T__3)
        | (1ULL << Java9_v2Parser::T__4)
        | (1ULL << Java9_v2Parser::T__5)
        | (1ULL << Java9_v2Parser::T__6)
        | (1ULL << Java9_v2Parser::T__7)
        | (1ULL << Java9_v2Parser::T__8)
        | (1ULL << Java9_v2Parser::BOOLEAN)
        | (1ULL << Java9_v2Parser::BYTE)
        | (1ULL << Java9_v2Parser::CHAR)
        | (1ULL << Java9_v2Parser::DOUBLE)
        | (1ULL << Java9_v2Parser::FLOAT)
        | (1ULL << Java9_v2Parser::INT)
        | (1ULL << Java9_v2Parser::LONG)
        | (1ULL << Java9_v2Parser::NEW)
        | (1ULL << Java9_v2Parser::SHORT)
        | (1ULL << Java9_v2Parser::SUPER)
        | (1ULL << Java9_v2Parser::THIS)
        | (1ULL << Java9_v2Parser::VOID)
        | (1ULL << Java9_v2Parser::IntegerLiteral)
        | (1ULL << Java9_v2Parser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (Java9_v2Parser::BooleanLiteral - 64))
        | (1ULL << (Java9_v2Parser::CharacterLiteral - 64))
        | (1ULL << (Java9_v2Parser::StringLiteral - 64))
        | (1ULL << (Java9_v2Parser::NullLiteral - 64))
        | (1ULL << (Java9_v2Parser::LPAREN - 64))
        | (1ULL << (Java9_v2Parser::AT - 64))
        | (1ULL << (Java9_v2Parser::BANG - 64))
        | (1ULL << (Java9_v2Parser::TILDE - 64))
        | (1ULL << (Java9_v2Parser::INC - 64))
        | (1ULL << (Java9_v2Parser::DEC - 64))
        | (1ULL << (Java9_v2Parser::ADD - 64))
        | (1ULL << (Java9_v2Parser::SUB - 64))
        | (1ULL << (Java9_v2Parser::Identifier - 64)))) != 0)) {
        setState(2430);
        argumentList();
      }
      setState(2433);
      match(Java9_v2Parser::RPAREN);
      break;
    }

    case 3: {
      _localctx = dynamic_cast<MethodInvocationContext *>(_tracker.createInstance<Java9_v2Parser::MethodInvocation3Context>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(2435);
      expressionName();
      setState(2436);
      match(Java9_v2Parser::DOT);
      setState(2438);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java9_v2Parser::LT) {
        setState(2437);
        typeArguments();
      }
      setState(2440);
      identifier();
      setState(2441);
      match(Java9_v2Parser::LPAREN);
      setState(2443);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << Java9_v2Parser::T__0)
        | (1ULL << Java9_v2Parser::T__1)
        | (1ULL << Java9_v2Parser::T__2)
        | (1ULL << Java9_v2Parser::T__3)
        | (1ULL << Java9_v2Parser::T__4)
        | (1ULL << Java9_v2Parser::T__5)
        | (1ULL << Java9_v2Parser::T__6)
        | (1ULL << Java9_v2Parser::T__7)
        | (1ULL << Java9_v2Parser::T__8)
        | (1ULL << Java9_v2Parser::BOOLEAN)
        | (1ULL << Java9_v2Parser::BYTE)
        | (1ULL << Java9_v2Parser::CHAR)
        | (1ULL << Java9_v2Parser::DOUBLE)
        | (1ULL << Java9_v2Parser::FLOAT)
        | (1ULL << Java9_v2Parser::INT)
        | (1ULL << Java9_v2Parser::LONG)
        | (1ULL << Java9_v2Parser::NEW)
        | (1ULL << Java9_v2Parser::SHORT)
        | (1ULL << Java9_v2Parser::SUPER)
        | (1ULL << Java9_v2Parser::THIS)
        | (1ULL << Java9_v2Parser::VOID)
        | (1ULL << Java9_v2Parser::IntegerLiteral)
        | (1ULL << Java9_v2Parser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (Java9_v2Parser::BooleanLiteral - 64))
        | (1ULL << (Java9_v2Parser::CharacterLiteral - 64))
        | (1ULL << (Java9_v2Parser::StringLiteral - 64))
        | (1ULL << (Java9_v2Parser::NullLiteral - 64))
        | (1ULL << (Java9_v2Parser::LPAREN - 64))
        | (1ULL << (Java9_v2Parser::AT - 64))
        | (1ULL << (Java9_v2Parser::BANG - 64))
        | (1ULL << (Java9_v2Parser::TILDE - 64))
        | (1ULL << (Java9_v2Parser::INC - 64))
        | (1ULL << (Java9_v2Parser::DEC - 64))
        | (1ULL << (Java9_v2Parser::ADD - 64))
        | (1ULL << (Java9_v2Parser::SUB - 64))
        | (1ULL << (Java9_v2Parser::Identifier - 64)))) != 0)) {
        setState(2442);
        argumentList();
      }
      setState(2445);
      match(Java9_v2Parser::RPAREN);
      break;
    }

    case 4: {
      _localctx = dynamic_cast<MethodInvocationContext *>(_tracker.createInstance<Java9_v2Parser::MethodInvocation4Context>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(2447);
      primary();
      setState(2448);
      match(Java9_v2Parser::DOT);
      setState(2450);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java9_v2Parser::LT) {
        setState(2449);
        typeArguments();
      }
      setState(2452);
      identifier();
      setState(2453);
      match(Java9_v2Parser::LPAREN);
      setState(2455);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << Java9_v2Parser::T__0)
        | (1ULL << Java9_v2Parser::T__1)
        | (1ULL << Java9_v2Parser::T__2)
        | (1ULL << Java9_v2Parser::T__3)
        | (1ULL << Java9_v2Parser::T__4)
        | (1ULL << Java9_v2Parser::T__5)
        | (1ULL << Java9_v2Parser::T__6)
        | (1ULL << Java9_v2Parser::T__7)
        | (1ULL << Java9_v2Parser::T__8)
        | (1ULL << Java9_v2Parser::BOOLEAN)
        | (1ULL << Java9_v2Parser::BYTE)
        | (1ULL << Java9_v2Parser::CHAR)
        | (1ULL << Java9_v2Parser::DOUBLE)
        | (1ULL << Java9_v2Parser::FLOAT)
        | (1ULL << Java9_v2Parser::INT)
        | (1ULL << Java9_v2Parser::LONG)
        | (1ULL << Java9_v2Parser::NEW)
        | (1ULL << Java9_v2Parser::SHORT)
        | (1ULL << Java9_v2Parser::SUPER)
        | (1ULL << Java9_v2Parser::THIS)
        | (1ULL << Java9_v2Parser::VOID)
        | (1ULL << Java9_v2Parser::IntegerLiteral)
        | (1ULL << Java9_v2Parser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (Java9_v2Parser::BooleanLiteral - 64))
        | (1ULL << (Java9_v2Parser::CharacterLiteral - 64))
        | (1ULL << (Java9_v2Parser::StringLiteral - 64))
        | (1ULL << (Java9_v2Parser::NullLiteral - 64))
        | (1ULL << (Java9_v2Parser::LPAREN - 64))
        | (1ULL << (Java9_v2Parser::AT - 64))
        | (1ULL << (Java9_v2Parser::BANG - 64))
        | (1ULL << (Java9_v2Parser::TILDE - 64))
        | (1ULL << (Java9_v2Parser::INC - 64))
        | (1ULL << (Java9_v2Parser::DEC - 64))
        | (1ULL << (Java9_v2Parser::ADD - 64))
        | (1ULL << (Java9_v2Parser::SUB - 64))
        | (1ULL << (Java9_v2Parser::Identifier - 64)))) != 0)) {
        setState(2454);
        argumentList();
      }
      setState(2457);
      match(Java9_v2Parser::RPAREN);
      break;
    }

    case 5: {
      _localctx = dynamic_cast<MethodInvocationContext *>(_tracker.createInstance<Java9_v2Parser::MethodInvocation5Context>(_localctx));
      enterOuterAlt(_localctx, 5);
      setState(2459);
      match(Java9_v2Parser::SUPER);
      setState(2460);
      match(Java9_v2Parser::DOT);
      setState(2462);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java9_v2Parser::LT) {
        setState(2461);
        typeArguments();
      }
      setState(2464);
      identifier();
      setState(2465);
      match(Java9_v2Parser::LPAREN);
      setState(2467);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << Java9_v2Parser::T__0)
        | (1ULL << Java9_v2Parser::T__1)
        | (1ULL << Java9_v2Parser::T__2)
        | (1ULL << Java9_v2Parser::T__3)
        | (1ULL << Java9_v2Parser::T__4)
        | (1ULL << Java9_v2Parser::T__5)
        | (1ULL << Java9_v2Parser::T__6)
        | (1ULL << Java9_v2Parser::T__7)
        | (1ULL << Java9_v2Parser::T__8)
        | (1ULL << Java9_v2Parser::BOOLEAN)
        | (1ULL << Java9_v2Parser::BYTE)
        | (1ULL << Java9_v2Parser::CHAR)
        | (1ULL << Java9_v2Parser::DOUBLE)
        | (1ULL << Java9_v2Parser::FLOAT)
        | (1ULL << Java9_v2Parser::INT)
        | (1ULL << Java9_v2Parser::LONG)
        | (1ULL << Java9_v2Parser::NEW)
        | (1ULL << Java9_v2Parser::SHORT)
        | (1ULL << Java9_v2Parser::SUPER)
        | (1ULL << Java9_v2Parser::THIS)
        | (1ULL << Java9_v2Parser::VOID)
        | (1ULL << Java9_v2Parser::IntegerLiteral)
        | (1ULL << Java9_v2Parser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (Java9_v2Parser::BooleanLiteral - 64))
        | (1ULL << (Java9_v2Parser::CharacterLiteral - 64))
        | (1ULL << (Java9_v2Parser::StringLiteral - 64))
        | (1ULL << (Java9_v2Parser::NullLiteral - 64))
        | (1ULL << (Java9_v2Parser::LPAREN - 64))
        | (1ULL << (Java9_v2Parser::AT - 64))
        | (1ULL << (Java9_v2Parser::BANG - 64))
        | (1ULL << (Java9_v2Parser::TILDE - 64))
        | (1ULL << (Java9_v2Parser::INC - 64))
        | (1ULL << (Java9_v2Parser::DEC - 64))
        | (1ULL << (Java9_v2Parser::ADD - 64))
        | (1ULL << (Java9_v2Parser::SUB - 64))
        | (1ULL << (Java9_v2Parser::Identifier - 64)))) != 0)) {
        setState(2466);
        argumentList();
      }
      setState(2469);
      match(Java9_v2Parser::RPAREN);
      break;
    }

    case 6: {
      _localctx = dynamic_cast<MethodInvocationContext *>(_tracker.createInstance<Java9_v2Parser::MethodInvocation6Context>(_localctx));
      enterOuterAlt(_localctx, 6);
      setState(2471);
      typeName();
      setState(2472);
      match(Java9_v2Parser::DOT);
      setState(2473);
      match(Java9_v2Parser::SUPER);
      setState(2474);
      match(Java9_v2Parser::DOT);
      setState(2476);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java9_v2Parser::LT) {
        setState(2475);
        typeArguments();
      }
      setState(2478);
      identifier();
      setState(2479);
      match(Java9_v2Parser::LPAREN);
      setState(2481);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << Java9_v2Parser::T__0)
        | (1ULL << Java9_v2Parser::T__1)
        | (1ULL << Java9_v2Parser::T__2)
        | (1ULL << Java9_v2Parser::T__3)
        | (1ULL << Java9_v2Parser::T__4)
        | (1ULL << Java9_v2Parser::T__5)
        | (1ULL << Java9_v2Parser::T__6)
        | (1ULL << Java9_v2Parser::T__7)
        | (1ULL << Java9_v2Parser::T__8)
        | (1ULL << Java9_v2Parser::BOOLEAN)
        | (1ULL << Java9_v2Parser::BYTE)
        | (1ULL << Java9_v2Parser::CHAR)
        | (1ULL << Java9_v2Parser::DOUBLE)
        | (1ULL << Java9_v2Parser::FLOAT)
        | (1ULL << Java9_v2Parser::INT)
        | (1ULL << Java9_v2Parser::LONG)
        | (1ULL << Java9_v2Parser::NEW)
        | (1ULL << Java9_v2Parser::SHORT)
        | (1ULL << Java9_v2Parser::SUPER)
        | (1ULL << Java9_v2Parser::THIS)
        | (1ULL << Java9_v2Parser::VOID)
        | (1ULL << Java9_v2Parser::IntegerLiteral)
        | (1ULL << Java9_v2Parser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (Java9_v2Parser::BooleanLiteral - 64))
        | (1ULL << (Java9_v2Parser::CharacterLiteral - 64))
        | (1ULL << (Java9_v2Parser::StringLiteral - 64))
        | (1ULL << (Java9_v2Parser::NullLiteral - 64))
        | (1ULL << (Java9_v2Parser::LPAREN - 64))
        | (1ULL << (Java9_v2Parser::AT - 64))
        | (1ULL << (Java9_v2Parser::BANG - 64))
        | (1ULL << (Java9_v2Parser::TILDE - 64))
        | (1ULL << (Java9_v2Parser::INC - 64))
        | (1ULL << (Java9_v2Parser::DEC - 64))
        | (1ULL << (Java9_v2Parser::ADD - 64))
        | (1ULL << (Java9_v2Parser::SUB - 64))
        | (1ULL << (Java9_v2Parser::Identifier - 64)))) != 0)) {
        setState(2480);
        argumentList();
      }
      setState(2483);
      match(Java9_v2Parser::RPAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodInvocation_lf_primaryContext ------------------------------------------------------------------

Java9_v2Parser::MethodInvocation_lf_primaryContext::MethodInvocation_lf_primaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::MethodInvocation_lf_primaryContext::DOT() {
  return getToken(Java9_v2Parser::DOT, 0);
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::MethodInvocation_lf_primaryContext::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

tree::TerminalNode* Java9_v2Parser::MethodInvocation_lf_primaryContext::LPAREN() {
  return getToken(Java9_v2Parser::LPAREN, 0);
}

tree::TerminalNode* Java9_v2Parser::MethodInvocation_lf_primaryContext::RPAREN() {
  return getToken(Java9_v2Parser::RPAREN, 0);
}

Java9_v2Parser::TypeArgumentsContext* Java9_v2Parser::MethodInvocation_lf_primaryContext::typeArguments() {
  return getRuleContext<Java9_v2Parser::TypeArgumentsContext>(0);
}

Java9_v2Parser::ArgumentListContext* Java9_v2Parser::MethodInvocation_lf_primaryContext::argumentList() {
  return getRuleContext<Java9_v2Parser::ArgumentListContext>(0);
}


size_t Java9_v2Parser::MethodInvocation_lf_primaryContext::getRuleIndex() const {
  return Java9_v2Parser::RuleMethodInvocation_lf_primary;
}

void Java9_v2Parser::MethodInvocation_lf_primaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodInvocation_lf_primary(this);
}

void Java9_v2Parser::MethodInvocation_lf_primaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodInvocation_lf_primary(this);
}


antlrcpp::Any Java9_v2Parser::MethodInvocation_lf_primaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitMethodInvocation_lf_primary(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::MethodInvocation_lf_primaryContext* Java9_v2Parser::methodInvocation_lf_primary() {
  MethodInvocation_lf_primaryContext *_localctx = _tracker.createInstance<MethodInvocation_lf_primaryContext>(_ctx, getState());
  enterRule(_localctx, 408, Java9_v2Parser::RuleMethodInvocation_lf_primary);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2487);
    match(Java9_v2Parser::DOT);
    setState(2489);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java9_v2Parser::LT) {
      setState(2488);
      typeArguments();
    }
    setState(2491);
    identifier();
    setState(2492);
    match(Java9_v2Parser::LPAREN);
    setState(2494);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << Java9_v2Parser::T__0)
      | (1ULL << Java9_v2Parser::T__1)
      | (1ULL << Java9_v2Parser::T__2)
      | (1ULL << Java9_v2Parser::T__3)
      | (1ULL << Java9_v2Parser::T__4)
      | (1ULL << Java9_v2Parser::T__5)
      | (1ULL << Java9_v2Parser::T__6)
      | (1ULL << Java9_v2Parser::T__7)
      | (1ULL << Java9_v2Parser::T__8)
      | (1ULL << Java9_v2Parser::BOOLEAN)
      | (1ULL << Java9_v2Parser::BYTE)
      | (1ULL << Java9_v2Parser::CHAR)
      | (1ULL << Java9_v2Parser::DOUBLE)
      | (1ULL << Java9_v2Parser::FLOAT)
      | (1ULL << Java9_v2Parser::INT)
      | (1ULL << Java9_v2Parser::LONG)
      | (1ULL << Java9_v2Parser::NEW)
      | (1ULL << Java9_v2Parser::SHORT)
      | (1ULL << Java9_v2Parser::SUPER)
      | (1ULL << Java9_v2Parser::THIS)
      | (1ULL << Java9_v2Parser::VOID)
      | (1ULL << Java9_v2Parser::IntegerLiteral)
      | (1ULL << Java9_v2Parser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (Java9_v2Parser::BooleanLiteral - 64))
      | (1ULL << (Java9_v2Parser::CharacterLiteral - 64))
      | (1ULL << (Java9_v2Parser::StringLiteral - 64))
      | (1ULL << (Java9_v2Parser::NullLiteral - 64))
      | (1ULL << (Java9_v2Parser::LPAREN - 64))
      | (1ULL << (Java9_v2Parser::AT - 64))
      | (1ULL << (Java9_v2Parser::BANG - 64))
      | (1ULL << (Java9_v2Parser::TILDE - 64))
      | (1ULL << (Java9_v2Parser::INC - 64))
      | (1ULL << (Java9_v2Parser::DEC - 64))
      | (1ULL << (Java9_v2Parser::ADD - 64))
      | (1ULL << (Java9_v2Parser::SUB - 64))
      | (1ULL << (Java9_v2Parser::Identifier - 64)))) != 0)) {
      setState(2493);
      argumentList();
    }
    setState(2496);
    match(Java9_v2Parser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodInvocation_lfno_primaryContext ------------------------------------------------------------------

Java9_v2Parser::MethodInvocation_lfno_primaryContext::MethodInvocation_lfno_primaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::MethodInvocation_lfno_primaryContext::getRuleIndex() const {
  return Java9_v2Parser::RuleMethodInvocation_lfno_primary;
}

void Java9_v2Parser::MethodInvocation_lfno_primaryContext::copyFrom(MethodInvocation_lfno_primaryContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- MethodInvocation_lfno_primary3Context ------------------------------------------------------------------

Java9_v2Parser::ExpressionNameContext* Java9_v2Parser::MethodInvocation_lfno_primary3Context::expressionName() {
  return getRuleContext<Java9_v2Parser::ExpressionNameContext>(0);
}

tree::TerminalNode* Java9_v2Parser::MethodInvocation_lfno_primary3Context::DOT() {
  return getToken(Java9_v2Parser::DOT, 0);
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::MethodInvocation_lfno_primary3Context::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

tree::TerminalNode* Java9_v2Parser::MethodInvocation_lfno_primary3Context::LPAREN() {
  return getToken(Java9_v2Parser::LPAREN, 0);
}

tree::TerminalNode* Java9_v2Parser::MethodInvocation_lfno_primary3Context::RPAREN() {
  return getToken(Java9_v2Parser::RPAREN, 0);
}

Java9_v2Parser::TypeArgumentsContext* Java9_v2Parser::MethodInvocation_lfno_primary3Context::typeArguments() {
  return getRuleContext<Java9_v2Parser::TypeArgumentsContext>(0);
}

Java9_v2Parser::ArgumentListContext* Java9_v2Parser::MethodInvocation_lfno_primary3Context::argumentList() {
  return getRuleContext<Java9_v2Parser::ArgumentListContext>(0);
}

Java9_v2Parser::MethodInvocation_lfno_primary3Context::MethodInvocation_lfno_primary3Context(MethodInvocation_lfno_primaryContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::MethodInvocation_lfno_primary3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodInvocation_lfno_primary3(this);
}
void Java9_v2Parser::MethodInvocation_lfno_primary3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodInvocation_lfno_primary3(this);
}

antlrcpp::Any Java9_v2Parser::MethodInvocation_lfno_primary3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitMethodInvocation_lfno_primary3(this);
  else
    return visitor->visitChildren(this);
}
//----------------- MethodInvocation_lfno_primary2Context ------------------------------------------------------------------

Java9_v2Parser::TypeNameContext* Java9_v2Parser::MethodInvocation_lfno_primary2Context::typeName() {
  return getRuleContext<Java9_v2Parser::TypeNameContext>(0);
}

tree::TerminalNode* Java9_v2Parser::MethodInvocation_lfno_primary2Context::DOT() {
  return getToken(Java9_v2Parser::DOT, 0);
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::MethodInvocation_lfno_primary2Context::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

tree::TerminalNode* Java9_v2Parser::MethodInvocation_lfno_primary2Context::LPAREN() {
  return getToken(Java9_v2Parser::LPAREN, 0);
}

tree::TerminalNode* Java9_v2Parser::MethodInvocation_lfno_primary2Context::RPAREN() {
  return getToken(Java9_v2Parser::RPAREN, 0);
}

Java9_v2Parser::TypeArgumentsContext* Java9_v2Parser::MethodInvocation_lfno_primary2Context::typeArguments() {
  return getRuleContext<Java9_v2Parser::TypeArgumentsContext>(0);
}

Java9_v2Parser::ArgumentListContext* Java9_v2Parser::MethodInvocation_lfno_primary2Context::argumentList() {
  return getRuleContext<Java9_v2Parser::ArgumentListContext>(0);
}

Java9_v2Parser::MethodInvocation_lfno_primary2Context::MethodInvocation_lfno_primary2Context(MethodInvocation_lfno_primaryContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::MethodInvocation_lfno_primary2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodInvocation_lfno_primary2(this);
}
void Java9_v2Parser::MethodInvocation_lfno_primary2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodInvocation_lfno_primary2(this);
}

antlrcpp::Any Java9_v2Parser::MethodInvocation_lfno_primary2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitMethodInvocation_lfno_primary2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- MethodInvocation_lfno_primary1Context ------------------------------------------------------------------

Java9_v2Parser::MethodNameContext* Java9_v2Parser::MethodInvocation_lfno_primary1Context::methodName() {
  return getRuleContext<Java9_v2Parser::MethodNameContext>(0);
}

tree::TerminalNode* Java9_v2Parser::MethodInvocation_lfno_primary1Context::LPAREN() {
  return getToken(Java9_v2Parser::LPAREN, 0);
}

tree::TerminalNode* Java9_v2Parser::MethodInvocation_lfno_primary1Context::RPAREN() {
  return getToken(Java9_v2Parser::RPAREN, 0);
}

Java9_v2Parser::ArgumentListContext* Java9_v2Parser::MethodInvocation_lfno_primary1Context::argumentList() {
  return getRuleContext<Java9_v2Parser::ArgumentListContext>(0);
}

Java9_v2Parser::MethodInvocation_lfno_primary1Context::MethodInvocation_lfno_primary1Context(MethodInvocation_lfno_primaryContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::MethodInvocation_lfno_primary1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodInvocation_lfno_primary1(this);
}
void Java9_v2Parser::MethodInvocation_lfno_primary1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodInvocation_lfno_primary1(this);
}

antlrcpp::Any Java9_v2Parser::MethodInvocation_lfno_primary1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitMethodInvocation_lfno_primary1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- MethodInvocation_lfno_primary5Context ------------------------------------------------------------------

Java9_v2Parser::TypeNameContext* Java9_v2Parser::MethodInvocation_lfno_primary5Context::typeName() {
  return getRuleContext<Java9_v2Parser::TypeNameContext>(0);
}

std::vector<tree::TerminalNode *> Java9_v2Parser::MethodInvocation_lfno_primary5Context::DOT() {
  return getTokens(Java9_v2Parser::DOT);
}

tree::TerminalNode* Java9_v2Parser::MethodInvocation_lfno_primary5Context::DOT(size_t i) {
  return getToken(Java9_v2Parser::DOT, i);
}

tree::TerminalNode* Java9_v2Parser::MethodInvocation_lfno_primary5Context::SUPER() {
  return getToken(Java9_v2Parser::SUPER, 0);
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::MethodInvocation_lfno_primary5Context::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

tree::TerminalNode* Java9_v2Parser::MethodInvocation_lfno_primary5Context::LPAREN() {
  return getToken(Java9_v2Parser::LPAREN, 0);
}

tree::TerminalNode* Java9_v2Parser::MethodInvocation_lfno_primary5Context::RPAREN() {
  return getToken(Java9_v2Parser::RPAREN, 0);
}

Java9_v2Parser::TypeArgumentsContext* Java9_v2Parser::MethodInvocation_lfno_primary5Context::typeArguments() {
  return getRuleContext<Java9_v2Parser::TypeArgumentsContext>(0);
}

Java9_v2Parser::ArgumentListContext* Java9_v2Parser::MethodInvocation_lfno_primary5Context::argumentList() {
  return getRuleContext<Java9_v2Parser::ArgumentListContext>(0);
}

Java9_v2Parser::MethodInvocation_lfno_primary5Context::MethodInvocation_lfno_primary5Context(MethodInvocation_lfno_primaryContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::MethodInvocation_lfno_primary5Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodInvocation_lfno_primary5(this);
}
void Java9_v2Parser::MethodInvocation_lfno_primary5Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodInvocation_lfno_primary5(this);
}

antlrcpp::Any Java9_v2Parser::MethodInvocation_lfno_primary5Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitMethodInvocation_lfno_primary5(this);
  else
    return visitor->visitChildren(this);
}
//----------------- MethodInvocation_lfno_primary4Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::MethodInvocation_lfno_primary4Context::SUPER() {
  return getToken(Java9_v2Parser::SUPER, 0);
}

tree::TerminalNode* Java9_v2Parser::MethodInvocation_lfno_primary4Context::DOT() {
  return getToken(Java9_v2Parser::DOT, 0);
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::MethodInvocation_lfno_primary4Context::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

tree::TerminalNode* Java9_v2Parser::MethodInvocation_lfno_primary4Context::LPAREN() {
  return getToken(Java9_v2Parser::LPAREN, 0);
}

tree::TerminalNode* Java9_v2Parser::MethodInvocation_lfno_primary4Context::RPAREN() {
  return getToken(Java9_v2Parser::RPAREN, 0);
}

Java9_v2Parser::TypeArgumentsContext* Java9_v2Parser::MethodInvocation_lfno_primary4Context::typeArguments() {
  return getRuleContext<Java9_v2Parser::TypeArgumentsContext>(0);
}

Java9_v2Parser::ArgumentListContext* Java9_v2Parser::MethodInvocation_lfno_primary4Context::argumentList() {
  return getRuleContext<Java9_v2Parser::ArgumentListContext>(0);
}

Java9_v2Parser::MethodInvocation_lfno_primary4Context::MethodInvocation_lfno_primary4Context(MethodInvocation_lfno_primaryContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::MethodInvocation_lfno_primary4Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodInvocation_lfno_primary4(this);
}
void Java9_v2Parser::MethodInvocation_lfno_primary4Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodInvocation_lfno_primary4(this);
}

antlrcpp::Any Java9_v2Parser::MethodInvocation_lfno_primary4Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitMethodInvocation_lfno_primary4(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::MethodInvocation_lfno_primaryContext* Java9_v2Parser::methodInvocation_lfno_primary() {
  MethodInvocation_lfno_primaryContext *_localctx = _tracker.createInstance<MethodInvocation_lfno_primaryContext>(_ctx, getState());
  enterRule(_localctx, 410, Java9_v2Parser::RuleMethodInvocation_lfno_primary);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2555);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 287, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<MethodInvocation_lfno_primaryContext *>(_tracker.createInstance<Java9_v2Parser::MethodInvocation_lfno_primary1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(2498);
      methodName();
      setState(2499);
      match(Java9_v2Parser::LPAREN);
      setState(2501);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << Java9_v2Parser::T__0)
        | (1ULL << Java9_v2Parser::T__1)
        | (1ULL << Java9_v2Parser::T__2)
        | (1ULL << Java9_v2Parser::T__3)
        | (1ULL << Java9_v2Parser::T__4)
        | (1ULL << Java9_v2Parser::T__5)
        | (1ULL << Java9_v2Parser::T__6)
        | (1ULL << Java9_v2Parser::T__7)
        | (1ULL << Java9_v2Parser::T__8)
        | (1ULL << Java9_v2Parser::BOOLEAN)
        | (1ULL << Java9_v2Parser::BYTE)
        | (1ULL << Java9_v2Parser::CHAR)
        | (1ULL << Java9_v2Parser::DOUBLE)
        | (1ULL << Java9_v2Parser::FLOAT)
        | (1ULL << Java9_v2Parser::INT)
        | (1ULL << Java9_v2Parser::LONG)
        | (1ULL << Java9_v2Parser::NEW)
        | (1ULL << Java9_v2Parser::SHORT)
        | (1ULL << Java9_v2Parser::SUPER)
        | (1ULL << Java9_v2Parser::THIS)
        | (1ULL << Java9_v2Parser::VOID)
        | (1ULL << Java9_v2Parser::IntegerLiteral)
        | (1ULL << Java9_v2Parser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (Java9_v2Parser::BooleanLiteral - 64))
        | (1ULL << (Java9_v2Parser::CharacterLiteral - 64))
        | (1ULL << (Java9_v2Parser::StringLiteral - 64))
        | (1ULL << (Java9_v2Parser::NullLiteral - 64))
        | (1ULL << (Java9_v2Parser::LPAREN - 64))
        | (1ULL << (Java9_v2Parser::AT - 64))
        | (1ULL << (Java9_v2Parser::BANG - 64))
        | (1ULL << (Java9_v2Parser::TILDE - 64))
        | (1ULL << (Java9_v2Parser::INC - 64))
        | (1ULL << (Java9_v2Parser::DEC - 64))
        | (1ULL << (Java9_v2Parser::ADD - 64))
        | (1ULL << (Java9_v2Parser::SUB - 64))
        | (1ULL << (Java9_v2Parser::Identifier - 64)))) != 0)) {
        setState(2500);
        argumentList();
      }
      setState(2503);
      match(Java9_v2Parser::RPAREN);
      break;
    }

    case 2: {
      _localctx = dynamic_cast<MethodInvocation_lfno_primaryContext *>(_tracker.createInstance<Java9_v2Parser::MethodInvocation_lfno_primary2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(2505);
      typeName();
      setState(2506);
      match(Java9_v2Parser::DOT);
      setState(2508);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java9_v2Parser::LT) {
        setState(2507);
        typeArguments();
      }
      setState(2510);
      identifier();
      setState(2511);
      match(Java9_v2Parser::LPAREN);
      setState(2513);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << Java9_v2Parser::T__0)
        | (1ULL << Java9_v2Parser::T__1)
        | (1ULL << Java9_v2Parser::T__2)
        | (1ULL << Java9_v2Parser::T__3)
        | (1ULL << Java9_v2Parser::T__4)
        | (1ULL << Java9_v2Parser::T__5)
        | (1ULL << Java9_v2Parser::T__6)
        | (1ULL << Java9_v2Parser::T__7)
        | (1ULL << Java9_v2Parser::T__8)
        | (1ULL << Java9_v2Parser::BOOLEAN)
        | (1ULL << Java9_v2Parser::BYTE)
        | (1ULL << Java9_v2Parser::CHAR)
        | (1ULL << Java9_v2Parser::DOUBLE)
        | (1ULL << Java9_v2Parser::FLOAT)
        | (1ULL << Java9_v2Parser::INT)
        | (1ULL << Java9_v2Parser::LONG)
        | (1ULL << Java9_v2Parser::NEW)
        | (1ULL << Java9_v2Parser::SHORT)
        | (1ULL << Java9_v2Parser::SUPER)
        | (1ULL << Java9_v2Parser::THIS)
        | (1ULL << Java9_v2Parser::VOID)
        | (1ULL << Java9_v2Parser::IntegerLiteral)
        | (1ULL << Java9_v2Parser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (Java9_v2Parser::BooleanLiteral - 64))
        | (1ULL << (Java9_v2Parser::CharacterLiteral - 64))
        | (1ULL << (Java9_v2Parser::StringLiteral - 64))
        | (1ULL << (Java9_v2Parser::NullLiteral - 64))
        | (1ULL << (Java9_v2Parser::LPAREN - 64))
        | (1ULL << (Java9_v2Parser::AT - 64))
        | (1ULL << (Java9_v2Parser::BANG - 64))
        | (1ULL << (Java9_v2Parser::TILDE - 64))
        | (1ULL << (Java9_v2Parser::INC - 64))
        | (1ULL << (Java9_v2Parser::DEC - 64))
        | (1ULL << (Java9_v2Parser::ADD - 64))
        | (1ULL << (Java9_v2Parser::SUB - 64))
        | (1ULL << (Java9_v2Parser::Identifier - 64)))) != 0)) {
        setState(2512);
        argumentList();
      }
      setState(2515);
      match(Java9_v2Parser::RPAREN);
      break;
    }

    case 3: {
      _localctx = dynamic_cast<MethodInvocation_lfno_primaryContext *>(_tracker.createInstance<Java9_v2Parser::MethodInvocation_lfno_primary3Context>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(2517);
      expressionName();
      setState(2518);
      match(Java9_v2Parser::DOT);
      setState(2520);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java9_v2Parser::LT) {
        setState(2519);
        typeArguments();
      }
      setState(2522);
      identifier();
      setState(2523);
      match(Java9_v2Parser::LPAREN);
      setState(2525);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << Java9_v2Parser::T__0)
        | (1ULL << Java9_v2Parser::T__1)
        | (1ULL << Java9_v2Parser::T__2)
        | (1ULL << Java9_v2Parser::T__3)
        | (1ULL << Java9_v2Parser::T__4)
        | (1ULL << Java9_v2Parser::T__5)
        | (1ULL << Java9_v2Parser::T__6)
        | (1ULL << Java9_v2Parser::T__7)
        | (1ULL << Java9_v2Parser::T__8)
        | (1ULL << Java9_v2Parser::BOOLEAN)
        | (1ULL << Java9_v2Parser::BYTE)
        | (1ULL << Java9_v2Parser::CHAR)
        | (1ULL << Java9_v2Parser::DOUBLE)
        | (1ULL << Java9_v2Parser::FLOAT)
        | (1ULL << Java9_v2Parser::INT)
        | (1ULL << Java9_v2Parser::LONG)
        | (1ULL << Java9_v2Parser::NEW)
        | (1ULL << Java9_v2Parser::SHORT)
        | (1ULL << Java9_v2Parser::SUPER)
        | (1ULL << Java9_v2Parser::THIS)
        | (1ULL << Java9_v2Parser::VOID)
        | (1ULL << Java9_v2Parser::IntegerLiteral)
        | (1ULL << Java9_v2Parser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (Java9_v2Parser::BooleanLiteral - 64))
        | (1ULL << (Java9_v2Parser::CharacterLiteral - 64))
        | (1ULL << (Java9_v2Parser::StringLiteral - 64))
        | (1ULL << (Java9_v2Parser::NullLiteral - 64))
        | (1ULL << (Java9_v2Parser::LPAREN - 64))
        | (1ULL << (Java9_v2Parser::AT - 64))
        | (1ULL << (Java9_v2Parser::BANG - 64))
        | (1ULL << (Java9_v2Parser::TILDE - 64))
        | (1ULL << (Java9_v2Parser::INC - 64))
        | (1ULL << (Java9_v2Parser::DEC - 64))
        | (1ULL << (Java9_v2Parser::ADD - 64))
        | (1ULL << (Java9_v2Parser::SUB - 64))
        | (1ULL << (Java9_v2Parser::Identifier - 64)))) != 0)) {
        setState(2524);
        argumentList();
      }
      setState(2527);
      match(Java9_v2Parser::RPAREN);
      break;
    }

    case 4: {
      _localctx = dynamic_cast<MethodInvocation_lfno_primaryContext *>(_tracker.createInstance<Java9_v2Parser::MethodInvocation_lfno_primary4Context>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(2529);
      match(Java9_v2Parser::SUPER);
      setState(2530);
      match(Java9_v2Parser::DOT);
      setState(2532);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java9_v2Parser::LT) {
        setState(2531);
        typeArguments();
      }
      setState(2534);
      identifier();
      setState(2535);
      match(Java9_v2Parser::LPAREN);
      setState(2537);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << Java9_v2Parser::T__0)
        | (1ULL << Java9_v2Parser::T__1)
        | (1ULL << Java9_v2Parser::T__2)
        | (1ULL << Java9_v2Parser::T__3)
        | (1ULL << Java9_v2Parser::T__4)
        | (1ULL << Java9_v2Parser::T__5)
        | (1ULL << Java9_v2Parser::T__6)
        | (1ULL << Java9_v2Parser::T__7)
        | (1ULL << Java9_v2Parser::T__8)
        | (1ULL << Java9_v2Parser::BOOLEAN)
        | (1ULL << Java9_v2Parser::BYTE)
        | (1ULL << Java9_v2Parser::CHAR)
        | (1ULL << Java9_v2Parser::DOUBLE)
        | (1ULL << Java9_v2Parser::FLOAT)
        | (1ULL << Java9_v2Parser::INT)
        | (1ULL << Java9_v2Parser::LONG)
        | (1ULL << Java9_v2Parser::NEW)
        | (1ULL << Java9_v2Parser::SHORT)
        | (1ULL << Java9_v2Parser::SUPER)
        | (1ULL << Java9_v2Parser::THIS)
        | (1ULL << Java9_v2Parser::VOID)
        | (1ULL << Java9_v2Parser::IntegerLiteral)
        | (1ULL << Java9_v2Parser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (Java9_v2Parser::BooleanLiteral - 64))
        | (1ULL << (Java9_v2Parser::CharacterLiteral - 64))
        | (1ULL << (Java9_v2Parser::StringLiteral - 64))
        | (1ULL << (Java9_v2Parser::NullLiteral - 64))
        | (1ULL << (Java9_v2Parser::LPAREN - 64))
        | (1ULL << (Java9_v2Parser::AT - 64))
        | (1ULL << (Java9_v2Parser::BANG - 64))
        | (1ULL << (Java9_v2Parser::TILDE - 64))
        | (1ULL << (Java9_v2Parser::INC - 64))
        | (1ULL << (Java9_v2Parser::DEC - 64))
        | (1ULL << (Java9_v2Parser::ADD - 64))
        | (1ULL << (Java9_v2Parser::SUB - 64))
        | (1ULL << (Java9_v2Parser::Identifier - 64)))) != 0)) {
        setState(2536);
        argumentList();
      }
      setState(2539);
      match(Java9_v2Parser::RPAREN);
      break;
    }

    case 5: {
      _localctx = dynamic_cast<MethodInvocation_lfno_primaryContext *>(_tracker.createInstance<Java9_v2Parser::MethodInvocation_lfno_primary5Context>(_localctx));
      enterOuterAlt(_localctx, 5);
      setState(2541);
      typeName();
      setState(2542);
      match(Java9_v2Parser::DOT);
      setState(2543);
      match(Java9_v2Parser::SUPER);
      setState(2544);
      match(Java9_v2Parser::DOT);
      setState(2546);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java9_v2Parser::LT) {
        setState(2545);
        typeArguments();
      }
      setState(2548);
      identifier();
      setState(2549);
      match(Java9_v2Parser::LPAREN);
      setState(2551);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << Java9_v2Parser::T__0)
        | (1ULL << Java9_v2Parser::T__1)
        | (1ULL << Java9_v2Parser::T__2)
        | (1ULL << Java9_v2Parser::T__3)
        | (1ULL << Java9_v2Parser::T__4)
        | (1ULL << Java9_v2Parser::T__5)
        | (1ULL << Java9_v2Parser::T__6)
        | (1ULL << Java9_v2Parser::T__7)
        | (1ULL << Java9_v2Parser::T__8)
        | (1ULL << Java9_v2Parser::BOOLEAN)
        | (1ULL << Java9_v2Parser::BYTE)
        | (1ULL << Java9_v2Parser::CHAR)
        | (1ULL << Java9_v2Parser::DOUBLE)
        | (1ULL << Java9_v2Parser::FLOAT)
        | (1ULL << Java9_v2Parser::INT)
        | (1ULL << Java9_v2Parser::LONG)
        | (1ULL << Java9_v2Parser::NEW)
        | (1ULL << Java9_v2Parser::SHORT)
        | (1ULL << Java9_v2Parser::SUPER)
        | (1ULL << Java9_v2Parser::THIS)
        | (1ULL << Java9_v2Parser::VOID)
        | (1ULL << Java9_v2Parser::IntegerLiteral)
        | (1ULL << Java9_v2Parser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (Java9_v2Parser::BooleanLiteral - 64))
        | (1ULL << (Java9_v2Parser::CharacterLiteral - 64))
        | (1ULL << (Java9_v2Parser::StringLiteral - 64))
        | (1ULL << (Java9_v2Parser::NullLiteral - 64))
        | (1ULL << (Java9_v2Parser::LPAREN - 64))
        | (1ULL << (Java9_v2Parser::AT - 64))
        | (1ULL << (Java9_v2Parser::BANG - 64))
        | (1ULL << (Java9_v2Parser::TILDE - 64))
        | (1ULL << (Java9_v2Parser::INC - 64))
        | (1ULL << (Java9_v2Parser::DEC - 64))
        | (1ULL << (Java9_v2Parser::ADD - 64))
        | (1ULL << (Java9_v2Parser::SUB - 64))
        | (1ULL << (Java9_v2Parser::Identifier - 64)))) != 0)) {
        setState(2550);
        argumentList();
      }
      setState(2553);
      match(Java9_v2Parser::RPAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgumentListContext ------------------------------------------------------------------

Java9_v2Parser::ArgumentListContext::ArgumentListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Java9_v2Parser::ExpressionContext *> Java9_v2Parser::ArgumentListContext::expression() {
  return getRuleContexts<Java9_v2Parser::ExpressionContext>();
}

Java9_v2Parser::ExpressionContext* Java9_v2Parser::ArgumentListContext::expression(size_t i) {
  return getRuleContext<Java9_v2Parser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> Java9_v2Parser::ArgumentListContext::COMMA() {
  return getTokens(Java9_v2Parser::COMMA);
}

tree::TerminalNode* Java9_v2Parser::ArgumentListContext::COMMA(size_t i) {
  return getToken(Java9_v2Parser::COMMA, i);
}


size_t Java9_v2Parser::ArgumentListContext::getRuleIndex() const {
  return Java9_v2Parser::RuleArgumentList;
}

void Java9_v2Parser::ArgumentListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgumentList(this);
}

void Java9_v2Parser::ArgumentListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgumentList(this);
}


antlrcpp::Any Java9_v2Parser::ArgumentListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitArgumentList(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::ArgumentListContext* Java9_v2Parser::argumentList() {
  ArgumentListContext *_localctx = _tracker.createInstance<ArgumentListContext>(_ctx, getState());
  enterRule(_localctx, 412, Java9_v2Parser::RuleArgumentList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2557);
    expression();
    setState(2562);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java9_v2Parser::COMMA) {
      setState(2558);
      match(Java9_v2Parser::COMMA);
      setState(2559);
      expression();
      setState(2564);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodReferenceContext ------------------------------------------------------------------

Java9_v2Parser::MethodReferenceContext::MethodReferenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::MethodReferenceContext::getRuleIndex() const {
  return Java9_v2Parser::RuleMethodReference;
}

void Java9_v2Parser::MethodReferenceContext::copyFrom(MethodReferenceContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- MethodReference1Context ------------------------------------------------------------------

Java9_v2Parser::ExpressionNameContext* Java9_v2Parser::MethodReference1Context::expressionName() {
  return getRuleContext<Java9_v2Parser::ExpressionNameContext>(0);
}

tree::TerminalNode* Java9_v2Parser::MethodReference1Context::COLONCOLON() {
  return getToken(Java9_v2Parser::COLONCOLON, 0);
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::MethodReference1Context::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

Java9_v2Parser::TypeArgumentsContext* Java9_v2Parser::MethodReference1Context::typeArguments() {
  return getRuleContext<Java9_v2Parser::TypeArgumentsContext>(0);
}

Java9_v2Parser::MethodReference1Context::MethodReference1Context(MethodReferenceContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::MethodReference1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodReference1(this);
}
void Java9_v2Parser::MethodReference1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodReference1(this);
}

antlrcpp::Any Java9_v2Parser::MethodReference1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitMethodReference1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- MethodReference3Context ------------------------------------------------------------------

Java9_v2Parser::PrimaryContext* Java9_v2Parser::MethodReference3Context::primary() {
  return getRuleContext<Java9_v2Parser::PrimaryContext>(0);
}

tree::TerminalNode* Java9_v2Parser::MethodReference3Context::COLONCOLON() {
  return getToken(Java9_v2Parser::COLONCOLON, 0);
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::MethodReference3Context::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

Java9_v2Parser::TypeArgumentsContext* Java9_v2Parser::MethodReference3Context::typeArguments() {
  return getRuleContext<Java9_v2Parser::TypeArgumentsContext>(0);
}

Java9_v2Parser::MethodReference3Context::MethodReference3Context(MethodReferenceContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::MethodReference3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodReference3(this);
}
void Java9_v2Parser::MethodReference3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodReference3(this);
}

antlrcpp::Any Java9_v2Parser::MethodReference3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitMethodReference3(this);
  else
    return visitor->visitChildren(this);
}
//----------------- MethodReference2Context ------------------------------------------------------------------

Java9_v2Parser::ReferenceTypeContext* Java9_v2Parser::MethodReference2Context::referenceType() {
  return getRuleContext<Java9_v2Parser::ReferenceTypeContext>(0);
}

tree::TerminalNode* Java9_v2Parser::MethodReference2Context::COLONCOLON() {
  return getToken(Java9_v2Parser::COLONCOLON, 0);
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::MethodReference2Context::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

Java9_v2Parser::TypeArgumentsContext* Java9_v2Parser::MethodReference2Context::typeArguments() {
  return getRuleContext<Java9_v2Parser::TypeArgumentsContext>(0);
}

Java9_v2Parser::MethodReference2Context::MethodReference2Context(MethodReferenceContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::MethodReference2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodReference2(this);
}
void Java9_v2Parser::MethodReference2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodReference2(this);
}

antlrcpp::Any Java9_v2Parser::MethodReference2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitMethodReference2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- MethodReference5Context ------------------------------------------------------------------

Java9_v2Parser::TypeNameContext* Java9_v2Parser::MethodReference5Context::typeName() {
  return getRuleContext<Java9_v2Parser::TypeNameContext>(0);
}

tree::TerminalNode* Java9_v2Parser::MethodReference5Context::DOT() {
  return getToken(Java9_v2Parser::DOT, 0);
}

tree::TerminalNode* Java9_v2Parser::MethodReference5Context::SUPER() {
  return getToken(Java9_v2Parser::SUPER, 0);
}

tree::TerminalNode* Java9_v2Parser::MethodReference5Context::COLONCOLON() {
  return getToken(Java9_v2Parser::COLONCOLON, 0);
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::MethodReference5Context::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

Java9_v2Parser::TypeArgumentsContext* Java9_v2Parser::MethodReference5Context::typeArguments() {
  return getRuleContext<Java9_v2Parser::TypeArgumentsContext>(0);
}

Java9_v2Parser::MethodReference5Context::MethodReference5Context(MethodReferenceContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::MethodReference5Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodReference5(this);
}
void Java9_v2Parser::MethodReference5Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodReference5(this);
}

antlrcpp::Any Java9_v2Parser::MethodReference5Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitMethodReference5(this);
  else
    return visitor->visitChildren(this);
}
//----------------- MethodReference4Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::MethodReference4Context::SUPER() {
  return getToken(Java9_v2Parser::SUPER, 0);
}

tree::TerminalNode* Java9_v2Parser::MethodReference4Context::COLONCOLON() {
  return getToken(Java9_v2Parser::COLONCOLON, 0);
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::MethodReference4Context::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

Java9_v2Parser::TypeArgumentsContext* Java9_v2Parser::MethodReference4Context::typeArguments() {
  return getRuleContext<Java9_v2Parser::TypeArgumentsContext>(0);
}

Java9_v2Parser::MethodReference4Context::MethodReference4Context(MethodReferenceContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::MethodReference4Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodReference4(this);
}
void Java9_v2Parser::MethodReference4Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodReference4(this);
}

antlrcpp::Any Java9_v2Parser::MethodReference4Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitMethodReference4(this);
  else
    return visitor->visitChildren(this);
}
//----------------- MethodReference7Context ------------------------------------------------------------------

Java9_v2Parser::ArrayTypeContext* Java9_v2Parser::MethodReference7Context::arrayType() {
  return getRuleContext<Java9_v2Parser::ArrayTypeContext>(0);
}

tree::TerminalNode* Java9_v2Parser::MethodReference7Context::COLONCOLON() {
  return getToken(Java9_v2Parser::COLONCOLON, 0);
}

tree::TerminalNode* Java9_v2Parser::MethodReference7Context::NEW() {
  return getToken(Java9_v2Parser::NEW, 0);
}

Java9_v2Parser::MethodReference7Context::MethodReference7Context(MethodReferenceContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::MethodReference7Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodReference7(this);
}
void Java9_v2Parser::MethodReference7Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodReference7(this);
}

antlrcpp::Any Java9_v2Parser::MethodReference7Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitMethodReference7(this);
  else
    return visitor->visitChildren(this);
}
//----------------- MethodReference6Context ------------------------------------------------------------------

Java9_v2Parser::ClassTypeContext* Java9_v2Parser::MethodReference6Context::classType() {
  return getRuleContext<Java9_v2Parser::ClassTypeContext>(0);
}

tree::TerminalNode* Java9_v2Parser::MethodReference6Context::COLONCOLON() {
  return getToken(Java9_v2Parser::COLONCOLON, 0);
}

tree::TerminalNode* Java9_v2Parser::MethodReference6Context::NEW() {
  return getToken(Java9_v2Parser::NEW, 0);
}

Java9_v2Parser::TypeArgumentsContext* Java9_v2Parser::MethodReference6Context::typeArguments() {
  return getRuleContext<Java9_v2Parser::TypeArgumentsContext>(0);
}

Java9_v2Parser::MethodReference6Context::MethodReference6Context(MethodReferenceContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::MethodReference6Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodReference6(this);
}
void Java9_v2Parser::MethodReference6Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodReference6(this);
}

antlrcpp::Any Java9_v2Parser::MethodReference6Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitMethodReference6(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::MethodReferenceContext* Java9_v2Parser::methodReference() {
  MethodReferenceContext *_localctx = _tracker.createInstance<MethodReferenceContext>(_ctx, getState());
  enterRule(_localctx, 414, Java9_v2Parser::RuleMethodReference);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2612);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 295, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<MethodReferenceContext *>(_tracker.createInstance<Java9_v2Parser::MethodReference1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(2565);
      expressionName();
      setState(2566);
      match(Java9_v2Parser::COLONCOLON);
      setState(2568);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java9_v2Parser::LT) {
        setState(2567);
        typeArguments();
      }
      setState(2570);
      identifier();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<MethodReferenceContext *>(_tracker.createInstance<Java9_v2Parser::MethodReference2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(2572);
      referenceType();
      setState(2573);
      match(Java9_v2Parser::COLONCOLON);
      setState(2575);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java9_v2Parser::LT) {
        setState(2574);
        typeArguments();
      }
      setState(2577);
      identifier();
      break;
    }

    case 3: {
      _localctx = dynamic_cast<MethodReferenceContext *>(_tracker.createInstance<Java9_v2Parser::MethodReference3Context>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(2579);
      primary();
      setState(2580);
      match(Java9_v2Parser::COLONCOLON);
      setState(2582);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java9_v2Parser::LT) {
        setState(2581);
        typeArguments();
      }
      setState(2584);
      identifier();
      break;
    }

    case 4: {
      _localctx = dynamic_cast<MethodReferenceContext *>(_tracker.createInstance<Java9_v2Parser::MethodReference4Context>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(2586);
      match(Java9_v2Parser::SUPER);
      setState(2587);
      match(Java9_v2Parser::COLONCOLON);
      setState(2589);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java9_v2Parser::LT) {
        setState(2588);
        typeArguments();
      }
      setState(2591);
      identifier();
      break;
    }

    case 5: {
      _localctx = dynamic_cast<MethodReferenceContext *>(_tracker.createInstance<Java9_v2Parser::MethodReference5Context>(_localctx));
      enterOuterAlt(_localctx, 5);
      setState(2592);
      typeName();
      setState(2593);
      match(Java9_v2Parser::DOT);
      setState(2594);
      match(Java9_v2Parser::SUPER);
      setState(2595);
      match(Java9_v2Parser::COLONCOLON);
      setState(2597);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java9_v2Parser::LT) {
        setState(2596);
        typeArguments();
      }
      setState(2599);
      identifier();
      break;
    }

    case 6: {
      _localctx = dynamic_cast<MethodReferenceContext *>(_tracker.createInstance<Java9_v2Parser::MethodReference6Context>(_localctx));
      enterOuterAlt(_localctx, 6);
      setState(2601);
      classType();
      setState(2602);
      match(Java9_v2Parser::COLONCOLON);
      setState(2604);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java9_v2Parser::LT) {
        setState(2603);
        typeArguments();
      }
      setState(2606);
      match(Java9_v2Parser::NEW);
      break;
    }

    case 7: {
      _localctx = dynamic_cast<MethodReferenceContext *>(_tracker.createInstance<Java9_v2Parser::MethodReference7Context>(_localctx));
      enterOuterAlt(_localctx, 7);
      setState(2608);
      arrayType();
      setState(2609);
      match(Java9_v2Parser::COLONCOLON);
      setState(2610);
      match(Java9_v2Parser::NEW);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodReference_lf_primaryContext ------------------------------------------------------------------

Java9_v2Parser::MethodReference_lf_primaryContext::MethodReference_lf_primaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::MethodReference_lf_primaryContext::COLONCOLON() {
  return getToken(Java9_v2Parser::COLONCOLON, 0);
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::MethodReference_lf_primaryContext::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

Java9_v2Parser::TypeArgumentsContext* Java9_v2Parser::MethodReference_lf_primaryContext::typeArguments() {
  return getRuleContext<Java9_v2Parser::TypeArgumentsContext>(0);
}


size_t Java9_v2Parser::MethodReference_lf_primaryContext::getRuleIndex() const {
  return Java9_v2Parser::RuleMethodReference_lf_primary;
}

void Java9_v2Parser::MethodReference_lf_primaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodReference_lf_primary(this);
}

void Java9_v2Parser::MethodReference_lf_primaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodReference_lf_primary(this);
}


antlrcpp::Any Java9_v2Parser::MethodReference_lf_primaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitMethodReference_lf_primary(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::MethodReference_lf_primaryContext* Java9_v2Parser::methodReference_lf_primary() {
  MethodReference_lf_primaryContext *_localctx = _tracker.createInstance<MethodReference_lf_primaryContext>(_ctx, getState());
  enterRule(_localctx, 416, Java9_v2Parser::RuleMethodReference_lf_primary);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2614);
    match(Java9_v2Parser::COLONCOLON);
    setState(2616);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java9_v2Parser::LT) {
      setState(2615);
      typeArguments();
    }
    setState(2618);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodReference_lfno_primaryContext ------------------------------------------------------------------

Java9_v2Parser::MethodReference_lfno_primaryContext::MethodReference_lfno_primaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::MethodReference_lfno_primaryContext::getRuleIndex() const {
  return Java9_v2Parser::RuleMethodReference_lfno_primary;
}

void Java9_v2Parser::MethodReference_lfno_primaryContext::copyFrom(MethodReference_lfno_primaryContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- MethodReference_lfno_primary6Context ------------------------------------------------------------------

Java9_v2Parser::ArrayTypeContext* Java9_v2Parser::MethodReference_lfno_primary6Context::arrayType() {
  return getRuleContext<Java9_v2Parser::ArrayTypeContext>(0);
}

tree::TerminalNode* Java9_v2Parser::MethodReference_lfno_primary6Context::COLONCOLON() {
  return getToken(Java9_v2Parser::COLONCOLON, 0);
}

tree::TerminalNode* Java9_v2Parser::MethodReference_lfno_primary6Context::NEW() {
  return getToken(Java9_v2Parser::NEW, 0);
}

Java9_v2Parser::MethodReference_lfno_primary6Context::MethodReference_lfno_primary6Context(MethodReference_lfno_primaryContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::MethodReference_lfno_primary6Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodReference_lfno_primary6(this);
}
void Java9_v2Parser::MethodReference_lfno_primary6Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodReference_lfno_primary6(this);
}

antlrcpp::Any Java9_v2Parser::MethodReference_lfno_primary6Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitMethodReference_lfno_primary6(this);
  else
    return visitor->visitChildren(this);
}
//----------------- MethodReference_lfno_primary5Context ------------------------------------------------------------------

Java9_v2Parser::ClassTypeContext* Java9_v2Parser::MethodReference_lfno_primary5Context::classType() {
  return getRuleContext<Java9_v2Parser::ClassTypeContext>(0);
}

tree::TerminalNode* Java9_v2Parser::MethodReference_lfno_primary5Context::COLONCOLON() {
  return getToken(Java9_v2Parser::COLONCOLON, 0);
}

tree::TerminalNode* Java9_v2Parser::MethodReference_lfno_primary5Context::NEW() {
  return getToken(Java9_v2Parser::NEW, 0);
}

Java9_v2Parser::TypeArgumentsContext* Java9_v2Parser::MethodReference_lfno_primary5Context::typeArguments() {
  return getRuleContext<Java9_v2Parser::TypeArgumentsContext>(0);
}

Java9_v2Parser::MethodReference_lfno_primary5Context::MethodReference_lfno_primary5Context(MethodReference_lfno_primaryContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::MethodReference_lfno_primary5Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodReference_lfno_primary5(this);
}
void Java9_v2Parser::MethodReference_lfno_primary5Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodReference_lfno_primary5(this);
}

antlrcpp::Any Java9_v2Parser::MethodReference_lfno_primary5Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitMethodReference_lfno_primary5(this);
  else
    return visitor->visitChildren(this);
}
//----------------- MethodReference_lfno_primary4Context ------------------------------------------------------------------

Java9_v2Parser::TypeNameContext* Java9_v2Parser::MethodReference_lfno_primary4Context::typeName() {
  return getRuleContext<Java9_v2Parser::TypeNameContext>(0);
}

tree::TerminalNode* Java9_v2Parser::MethodReference_lfno_primary4Context::DOT() {
  return getToken(Java9_v2Parser::DOT, 0);
}

tree::TerminalNode* Java9_v2Parser::MethodReference_lfno_primary4Context::SUPER() {
  return getToken(Java9_v2Parser::SUPER, 0);
}

tree::TerminalNode* Java9_v2Parser::MethodReference_lfno_primary4Context::COLONCOLON() {
  return getToken(Java9_v2Parser::COLONCOLON, 0);
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::MethodReference_lfno_primary4Context::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

Java9_v2Parser::TypeArgumentsContext* Java9_v2Parser::MethodReference_lfno_primary4Context::typeArguments() {
  return getRuleContext<Java9_v2Parser::TypeArgumentsContext>(0);
}

Java9_v2Parser::MethodReference_lfno_primary4Context::MethodReference_lfno_primary4Context(MethodReference_lfno_primaryContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::MethodReference_lfno_primary4Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodReference_lfno_primary4(this);
}
void Java9_v2Parser::MethodReference_lfno_primary4Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodReference_lfno_primary4(this);
}

antlrcpp::Any Java9_v2Parser::MethodReference_lfno_primary4Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitMethodReference_lfno_primary4(this);
  else
    return visitor->visitChildren(this);
}
//----------------- MethodReference_lfno_primary3Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::MethodReference_lfno_primary3Context::SUPER() {
  return getToken(Java9_v2Parser::SUPER, 0);
}

tree::TerminalNode* Java9_v2Parser::MethodReference_lfno_primary3Context::COLONCOLON() {
  return getToken(Java9_v2Parser::COLONCOLON, 0);
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::MethodReference_lfno_primary3Context::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

Java9_v2Parser::TypeArgumentsContext* Java9_v2Parser::MethodReference_lfno_primary3Context::typeArguments() {
  return getRuleContext<Java9_v2Parser::TypeArgumentsContext>(0);
}

Java9_v2Parser::MethodReference_lfno_primary3Context::MethodReference_lfno_primary3Context(MethodReference_lfno_primaryContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::MethodReference_lfno_primary3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodReference_lfno_primary3(this);
}
void Java9_v2Parser::MethodReference_lfno_primary3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodReference_lfno_primary3(this);
}

antlrcpp::Any Java9_v2Parser::MethodReference_lfno_primary3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitMethodReference_lfno_primary3(this);
  else
    return visitor->visitChildren(this);
}
//----------------- MethodReference_lfno_primary2Context ------------------------------------------------------------------

Java9_v2Parser::ReferenceTypeContext* Java9_v2Parser::MethodReference_lfno_primary2Context::referenceType() {
  return getRuleContext<Java9_v2Parser::ReferenceTypeContext>(0);
}

tree::TerminalNode* Java9_v2Parser::MethodReference_lfno_primary2Context::COLONCOLON() {
  return getToken(Java9_v2Parser::COLONCOLON, 0);
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::MethodReference_lfno_primary2Context::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

Java9_v2Parser::TypeArgumentsContext* Java9_v2Parser::MethodReference_lfno_primary2Context::typeArguments() {
  return getRuleContext<Java9_v2Parser::TypeArgumentsContext>(0);
}

Java9_v2Parser::MethodReference_lfno_primary2Context::MethodReference_lfno_primary2Context(MethodReference_lfno_primaryContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::MethodReference_lfno_primary2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodReference_lfno_primary2(this);
}
void Java9_v2Parser::MethodReference_lfno_primary2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodReference_lfno_primary2(this);
}

antlrcpp::Any Java9_v2Parser::MethodReference_lfno_primary2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitMethodReference_lfno_primary2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- MethodReference_lfno_primary1Context ------------------------------------------------------------------

Java9_v2Parser::ExpressionNameContext* Java9_v2Parser::MethodReference_lfno_primary1Context::expressionName() {
  return getRuleContext<Java9_v2Parser::ExpressionNameContext>(0);
}

tree::TerminalNode* Java9_v2Parser::MethodReference_lfno_primary1Context::COLONCOLON() {
  return getToken(Java9_v2Parser::COLONCOLON, 0);
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::MethodReference_lfno_primary1Context::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

Java9_v2Parser::TypeArgumentsContext* Java9_v2Parser::MethodReference_lfno_primary1Context::typeArguments() {
  return getRuleContext<Java9_v2Parser::TypeArgumentsContext>(0);
}

Java9_v2Parser::MethodReference_lfno_primary1Context::MethodReference_lfno_primary1Context(MethodReference_lfno_primaryContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::MethodReference_lfno_primary1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodReference_lfno_primary1(this);
}
void Java9_v2Parser::MethodReference_lfno_primary1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodReference_lfno_primary1(this);
}

antlrcpp::Any Java9_v2Parser::MethodReference_lfno_primary1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitMethodReference_lfno_primary1(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::MethodReference_lfno_primaryContext* Java9_v2Parser::methodReference_lfno_primary() {
  MethodReference_lfno_primaryContext *_localctx = _tracker.createInstance<MethodReference_lfno_primaryContext>(_ctx, getState());
  enterRule(_localctx, 418, Java9_v2Parser::RuleMethodReference_lfno_primary);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2660);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 302, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<MethodReference_lfno_primaryContext *>(_tracker.createInstance<Java9_v2Parser::MethodReference_lfno_primary1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(2620);
      expressionName();
      setState(2621);
      match(Java9_v2Parser::COLONCOLON);
      setState(2623);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java9_v2Parser::LT) {
        setState(2622);
        typeArguments();
      }
      setState(2625);
      identifier();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<MethodReference_lfno_primaryContext *>(_tracker.createInstance<Java9_v2Parser::MethodReference_lfno_primary2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(2627);
      referenceType();
      setState(2628);
      match(Java9_v2Parser::COLONCOLON);
      setState(2630);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java9_v2Parser::LT) {
        setState(2629);
        typeArguments();
      }
      setState(2632);
      identifier();
      break;
    }

    case 3: {
      _localctx = dynamic_cast<MethodReference_lfno_primaryContext *>(_tracker.createInstance<Java9_v2Parser::MethodReference_lfno_primary3Context>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(2634);
      match(Java9_v2Parser::SUPER);
      setState(2635);
      match(Java9_v2Parser::COLONCOLON);
      setState(2637);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java9_v2Parser::LT) {
        setState(2636);
        typeArguments();
      }
      setState(2639);
      identifier();
      break;
    }

    case 4: {
      _localctx = dynamic_cast<MethodReference_lfno_primaryContext *>(_tracker.createInstance<Java9_v2Parser::MethodReference_lfno_primary4Context>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(2640);
      typeName();
      setState(2641);
      match(Java9_v2Parser::DOT);
      setState(2642);
      match(Java9_v2Parser::SUPER);
      setState(2643);
      match(Java9_v2Parser::COLONCOLON);
      setState(2645);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java9_v2Parser::LT) {
        setState(2644);
        typeArguments();
      }
      setState(2647);
      identifier();
      break;
    }

    case 5: {
      _localctx = dynamic_cast<MethodReference_lfno_primaryContext *>(_tracker.createInstance<Java9_v2Parser::MethodReference_lfno_primary5Context>(_localctx));
      enterOuterAlt(_localctx, 5);
      setState(2649);
      classType();
      setState(2650);
      match(Java9_v2Parser::COLONCOLON);
      setState(2652);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java9_v2Parser::LT) {
        setState(2651);
        typeArguments();
      }
      setState(2654);
      match(Java9_v2Parser::NEW);
      break;
    }

    case 6: {
      _localctx = dynamic_cast<MethodReference_lfno_primaryContext *>(_tracker.createInstance<Java9_v2Parser::MethodReference_lfno_primary6Context>(_localctx));
      enterOuterAlt(_localctx, 6);
      setState(2656);
      arrayType();
      setState(2657);
      match(Java9_v2Parser::COLONCOLON);
      setState(2658);
      match(Java9_v2Parser::NEW);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayCreationExpressionContext ------------------------------------------------------------------

Java9_v2Parser::ArrayCreationExpressionContext::ArrayCreationExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::ArrayCreationExpressionContext::getRuleIndex() const {
  return Java9_v2Parser::RuleArrayCreationExpression;
}

void Java9_v2Parser::ArrayCreationExpressionContext::copyFrom(ArrayCreationExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ArrayCreationExpression4Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::ArrayCreationExpression4Context::NEW() {
  return getToken(Java9_v2Parser::NEW, 0);
}

Java9_v2Parser::ClassOrInterfaceTypeContext* Java9_v2Parser::ArrayCreationExpression4Context::classOrInterfaceType() {
  return getRuleContext<Java9_v2Parser::ClassOrInterfaceTypeContext>(0);
}

Java9_v2Parser::DimsContext* Java9_v2Parser::ArrayCreationExpression4Context::dims() {
  return getRuleContext<Java9_v2Parser::DimsContext>(0);
}

Java9_v2Parser::ArrayInitializerContext* Java9_v2Parser::ArrayCreationExpression4Context::arrayInitializer() {
  return getRuleContext<Java9_v2Parser::ArrayInitializerContext>(0);
}

Java9_v2Parser::ArrayCreationExpression4Context::ArrayCreationExpression4Context(ArrayCreationExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ArrayCreationExpression4Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayCreationExpression4(this);
}
void Java9_v2Parser::ArrayCreationExpression4Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayCreationExpression4(this);
}

antlrcpp::Any Java9_v2Parser::ArrayCreationExpression4Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitArrayCreationExpression4(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ArrayCreationExpression2Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::ArrayCreationExpression2Context::NEW() {
  return getToken(Java9_v2Parser::NEW, 0);
}

Java9_v2Parser::ClassOrInterfaceTypeContext* Java9_v2Parser::ArrayCreationExpression2Context::classOrInterfaceType() {
  return getRuleContext<Java9_v2Parser::ClassOrInterfaceTypeContext>(0);
}

Java9_v2Parser::DimExprsContext* Java9_v2Parser::ArrayCreationExpression2Context::dimExprs() {
  return getRuleContext<Java9_v2Parser::DimExprsContext>(0);
}

Java9_v2Parser::DimsContext* Java9_v2Parser::ArrayCreationExpression2Context::dims() {
  return getRuleContext<Java9_v2Parser::DimsContext>(0);
}

Java9_v2Parser::ArrayCreationExpression2Context::ArrayCreationExpression2Context(ArrayCreationExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ArrayCreationExpression2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayCreationExpression2(this);
}
void Java9_v2Parser::ArrayCreationExpression2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayCreationExpression2(this);
}

antlrcpp::Any Java9_v2Parser::ArrayCreationExpression2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitArrayCreationExpression2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ArrayCreationExpression3Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::ArrayCreationExpression3Context::NEW() {
  return getToken(Java9_v2Parser::NEW, 0);
}

Java9_v2Parser::PrimitiveTypeContext* Java9_v2Parser::ArrayCreationExpression3Context::primitiveType() {
  return getRuleContext<Java9_v2Parser::PrimitiveTypeContext>(0);
}

Java9_v2Parser::DimsContext* Java9_v2Parser::ArrayCreationExpression3Context::dims() {
  return getRuleContext<Java9_v2Parser::DimsContext>(0);
}

Java9_v2Parser::ArrayInitializerContext* Java9_v2Parser::ArrayCreationExpression3Context::arrayInitializer() {
  return getRuleContext<Java9_v2Parser::ArrayInitializerContext>(0);
}

Java9_v2Parser::ArrayCreationExpression3Context::ArrayCreationExpression3Context(ArrayCreationExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ArrayCreationExpression3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayCreationExpression3(this);
}
void Java9_v2Parser::ArrayCreationExpression3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayCreationExpression3(this);
}

antlrcpp::Any Java9_v2Parser::ArrayCreationExpression3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitArrayCreationExpression3(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ArrayCreationExpression1Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::ArrayCreationExpression1Context::NEW() {
  return getToken(Java9_v2Parser::NEW, 0);
}

Java9_v2Parser::PrimitiveTypeContext* Java9_v2Parser::ArrayCreationExpression1Context::primitiveType() {
  return getRuleContext<Java9_v2Parser::PrimitiveTypeContext>(0);
}

Java9_v2Parser::DimExprsContext* Java9_v2Parser::ArrayCreationExpression1Context::dimExprs() {
  return getRuleContext<Java9_v2Parser::DimExprsContext>(0);
}

Java9_v2Parser::DimsContext* Java9_v2Parser::ArrayCreationExpression1Context::dims() {
  return getRuleContext<Java9_v2Parser::DimsContext>(0);
}

Java9_v2Parser::ArrayCreationExpression1Context::ArrayCreationExpression1Context(ArrayCreationExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ArrayCreationExpression1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayCreationExpression1(this);
}
void Java9_v2Parser::ArrayCreationExpression1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayCreationExpression1(this);
}

antlrcpp::Any Java9_v2Parser::ArrayCreationExpression1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitArrayCreationExpression1(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::ArrayCreationExpressionContext* Java9_v2Parser::arrayCreationExpression() {
  ArrayCreationExpressionContext *_localctx = _tracker.createInstance<ArrayCreationExpressionContext>(_ctx, getState());
  enterRule(_localctx, 420, Java9_v2Parser::RuleArrayCreationExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2684);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 305, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<ArrayCreationExpressionContext *>(_tracker.createInstance<Java9_v2Parser::ArrayCreationExpression1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(2662);
      match(Java9_v2Parser::NEW);
      setState(2663);
      primitiveType();
      setState(2664);
      dimExprs();
      setState(2666);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 303, _ctx)) {
      case 1: {
        setState(2665);
        dims();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      _localctx = dynamic_cast<ArrayCreationExpressionContext *>(_tracker.createInstance<Java9_v2Parser::ArrayCreationExpression2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(2668);
      match(Java9_v2Parser::NEW);
      setState(2669);
      classOrInterfaceType();
      setState(2670);
      dimExprs();
      setState(2672);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 304, _ctx)) {
      case 1: {
        setState(2671);
        dims();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 3: {
      _localctx = dynamic_cast<ArrayCreationExpressionContext *>(_tracker.createInstance<Java9_v2Parser::ArrayCreationExpression3Context>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(2674);
      match(Java9_v2Parser::NEW);
      setState(2675);
      primitiveType();
      setState(2676);
      dims();
      setState(2677);
      arrayInitializer();
      break;
    }

    case 4: {
      _localctx = dynamic_cast<ArrayCreationExpressionContext *>(_tracker.createInstance<Java9_v2Parser::ArrayCreationExpression4Context>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(2679);
      match(Java9_v2Parser::NEW);
      setState(2680);
      classOrInterfaceType();
      setState(2681);
      dims();
      setState(2682);
      arrayInitializer();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DimExprsContext ------------------------------------------------------------------

Java9_v2Parser::DimExprsContext::DimExprsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Java9_v2Parser::DimExprContext *> Java9_v2Parser::DimExprsContext::dimExpr() {
  return getRuleContexts<Java9_v2Parser::DimExprContext>();
}

Java9_v2Parser::DimExprContext* Java9_v2Parser::DimExprsContext::dimExpr(size_t i) {
  return getRuleContext<Java9_v2Parser::DimExprContext>(i);
}


size_t Java9_v2Parser::DimExprsContext::getRuleIndex() const {
  return Java9_v2Parser::RuleDimExprs;
}

void Java9_v2Parser::DimExprsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDimExprs(this);
}

void Java9_v2Parser::DimExprsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDimExprs(this);
}


antlrcpp::Any Java9_v2Parser::DimExprsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitDimExprs(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::DimExprsContext* Java9_v2Parser::dimExprs() {
  DimExprsContext *_localctx = _tracker.createInstance<DimExprsContext>(_ctx, getState());
  enterRule(_localctx, 422, Java9_v2Parser::RuleDimExprs);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2687); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(2686);
              dimExpr();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(2689); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 306, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DimExprContext ------------------------------------------------------------------

Java9_v2Parser::DimExprContext::DimExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::DimExprContext::LBRACK() {
  return getToken(Java9_v2Parser::LBRACK, 0);
}

Java9_v2Parser::ExpressionContext* Java9_v2Parser::DimExprContext::expression() {
  return getRuleContext<Java9_v2Parser::ExpressionContext>(0);
}

tree::TerminalNode* Java9_v2Parser::DimExprContext::RBRACK() {
  return getToken(Java9_v2Parser::RBRACK, 0);
}

std::vector<Java9_v2Parser::AnnotationContext *> Java9_v2Parser::DimExprContext::annotation() {
  return getRuleContexts<Java9_v2Parser::AnnotationContext>();
}

Java9_v2Parser::AnnotationContext* Java9_v2Parser::DimExprContext::annotation(size_t i) {
  return getRuleContext<Java9_v2Parser::AnnotationContext>(i);
}


size_t Java9_v2Parser::DimExprContext::getRuleIndex() const {
  return Java9_v2Parser::RuleDimExpr;
}

void Java9_v2Parser::DimExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDimExpr(this);
}

void Java9_v2Parser::DimExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDimExpr(this);
}


antlrcpp::Any Java9_v2Parser::DimExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitDimExpr(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::DimExprContext* Java9_v2Parser::dimExpr() {
  DimExprContext *_localctx = _tracker.createInstance<DimExprContext>(_ctx, getState());
  enterRule(_localctx, 424, Java9_v2Parser::RuleDimExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2694);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java9_v2Parser::AT) {
      setState(2691);
      annotation();
      setState(2696);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2697);
    match(Java9_v2Parser::LBRACK);
    setState(2698);
    expression();
    setState(2699);
    match(Java9_v2Parser::RBRACK);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstantExpressionContext ------------------------------------------------------------------

Java9_v2Parser::ConstantExpressionContext::ConstantExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::ExpressionContext* Java9_v2Parser::ConstantExpressionContext::expression() {
  return getRuleContext<Java9_v2Parser::ExpressionContext>(0);
}


size_t Java9_v2Parser::ConstantExpressionContext::getRuleIndex() const {
  return Java9_v2Parser::RuleConstantExpression;
}

void Java9_v2Parser::ConstantExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstantExpression(this);
}

void Java9_v2Parser::ConstantExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstantExpression(this);
}


antlrcpp::Any Java9_v2Parser::ConstantExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitConstantExpression(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::ConstantExpressionContext* Java9_v2Parser::constantExpression() {
  ConstantExpressionContext *_localctx = _tracker.createInstance<ConstantExpressionContext>(_ctx, getState());
  enterRule(_localctx, 426, Java9_v2Parser::RuleConstantExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2701);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

Java9_v2Parser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::ExpressionContext::getRuleIndex() const {
  return Java9_v2Parser::RuleExpression;
}

void Java9_v2Parser::ExpressionContext::copyFrom(ExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- Expression2Context ------------------------------------------------------------------

Java9_v2Parser::AssignmentExpressionContext* Java9_v2Parser::Expression2Context::assignmentExpression() {
  return getRuleContext<Java9_v2Parser::AssignmentExpressionContext>(0);
}

Java9_v2Parser::Expression2Context::Expression2Context(ExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::Expression2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpression2(this);
}
void Java9_v2Parser::Expression2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpression2(this);
}

antlrcpp::Any Java9_v2Parser::Expression2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitExpression2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Expression1Context ------------------------------------------------------------------

Java9_v2Parser::LambdaExpressionContext* Java9_v2Parser::Expression1Context::lambdaExpression() {
  return getRuleContext<Java9_v2Parser::LambdaExpressionContext>(0);
}

Java9_v2Parser::Expression1Context::Expression1Context(ExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::Expression1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpression1(this);
}
void Java9_v2Parser::Expression1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpression1(this);
}

antlrcpp::Any Java9_v2Parser::Expression1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitExpression1(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::ExpressionContext* Java9_v2Parser::expression() {
  ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 428, Java9_v2Parser::RuleExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2705);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 308, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<ExpressionContext *>(_tracker.createInstance<Java9_v2Parser::Expression1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(2703);
      lambdaExpression();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<ExpressionContext *>(_tracker.createInstance<Java9_v2Parser::Expression2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(2704);
      assignmentExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LambdaExpressionContext ------------------------------------------------------------------

Java9_v2Parser::LambdaExpressionContext::LambdaExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::LambdaParametersContext* Java9_v2Parser::LambdaExpressionContext::lambdaParameters() {
  return getRuleContext<Java9_v2Parser::LambdaParametersContext>(0);
}

tree::TerminalNode* Java9_v2Parser::LambdaExpressionContext::ARROW() {
  return getToken(Java9_v2Parser::ARROW, 0);
}

Java9_v2Parser::LambdaBodyContext* Java9_v2Parser::LambdaExpressionContext::lambdaBody() {
  return getRuleContext<Java9_v2Parser::LambdaBodyContext>(0);
}


size_t Java9_v2Parser::LambdaExpressionContext::getRuleIndex() const {
  return Java9_v2Parser::RuleLambdaExpression;
}

void Java9_v2Parser::LambdaExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLambdaExpression(this);
}

void Java9_v2Parser::LambdaExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLambdaExpression(this);
}


antlrcpp::Any Java9_v2Parser::LambdaExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitLambdaExpression(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::LambdaExpressionContext* Java9_v2Parser::lambdaExpression() {
  LambdaExpressionContext *_localctx = _tracker.createInstance<LambdaExpressionContext>(_ctx, getState());
  enterRule(_localctx, 430, Java9_v2Parser::RuleLambdaExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2707);
    lambdaParameters();
    setState(2708);
    match(Java9_v2Parser::ARROW);
    setState(2709);
    lambdaBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LambdaParametersContext ------------------------------------------------------------------

Java9_v2Parser::LambdaParametersContext::LambdaParametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::LambdaParametersContext::getRuleIndex() const {
  return Java9_v2Parser::RuleLambdaParameters;
}

void Java9_v2Parser::LambdaParametersContext::copyFrom(LambdaParametersContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- LambdaParameters3Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::LambdaParameters3Context::LPAREN() {
  return getToken(Java9_v2Parser::LPAREN, 0);
}

Java9_v2Parser::InferredFormalParameterListContext* Java9_v2Parser::LambdaParameters3Context::inferredFormalParameterList() {
  return getRuleContext<Java9_v2Parser::InferredFormalParameterListContext>(0);
}

tree::TerminalNode* Java9_v2Parser::LambdaParameters3Context::RPAREN() {
  return getToken(Java9_v2Parser::RPAREN, 0);
}

Java9_v2Parser::LambdaParameters3Context::LambdaParameters3Context(LambdaParametersContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::LambdaParameters3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLambdaParameters3(this);
}
void Java9_v2Parser::LambdaParameters3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLambdaParameters3(this);
}

antlrcpp::Any Java9_v2Parser::LambdaParameters3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitLambdaParameters3(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LambdaParameters1Context ------------------------------------------------------------------

Java9_v2Parser::IdentifierContext* Java9_v2Parser::LambdaParameters1Context::identifier() {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(0);
}

Java9_v2Parser::LambdaParameters1Context::LambdaParameters1Context(LambdaParametersContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::LambdaParameters1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLambdaParameters1(this);
}
void Java9_v2Parser::LambdaParameters1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLambdaParameters1(this);
}

antlrcpp::Any Java9_v2Parser::LambdaParameters1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitLambdaParameters1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LambdaParameters2Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::LambdaParameters2Context::LPAREN() {
  return getToken(Java9_v2Parser::LPAREN, 0);
}

tree::TerminalNode* Java9_v2Parser::LambdaParameters2Context::RPAREN() {
  return getToken(Java9_v2Parser::RPAREN, 0);
}

Java9_v2Parser::FormalParameterListContext* Java9_v2Parser::LambdaParameters2Context::formalParameterList() {
  return getRuleContext<Java9_v2Parser::FormalParameterListContext>(0);
}

Java9_v2Parser::LambdaParameters2Context::LambdaParameters2Context(LambdaParametersContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::LambdaParameters2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLambdaParameters2(this);
}
void Java9_v2Parser::LambdaParameters2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLambdaParameters2(this);
}

antlrcpp::Any Java9_v2Parser::LambdaParameters2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitLambdaParameters2(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::LambdaParametersContext* Java9_v2Parser::lambdaParameters() {
  LambdaParametersContext *_localctx = _tracker.createInstance<LambdaParametersContext>(_ctx, getState());
  enterRule(_localctx, 432, Java9_v2Parser::RuleLambdaParameters);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2721);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 310, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<LambdaParametersContext *>(_tracker.createInstance<Java9_v2Parser::LambdaParameters1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(2711);
      identifier();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<LambdaParametersContext *>(_tracker.createInstance<Java9_v2Parser::LambdaParameters2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(2712);
      match(Java9_v2Parser::LPAREN);
      setState(2714);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << Java9_v2Parser::T__0)
        | (1ULL << Java9_v2Parser::T__1)
        | (1ULL << Java9_v2Parser::T__2)
        | (1ULL << Java9_v2Parser::T__3)
        | (1ULL << Java9_v2Parser::T__4)
        | (1ULL << Java9_v2Parser::T__5)
        | (1ULL << Java9_v2Parser::T__6)
        | (1ULL << Java9_v2Parser::T__7)
        | (1ULL << Java9_v2Parser::T__8)
        | (1ULL << Java9_v2Parser::BOOLEAN)
        | (1ULL << Java9_v2Parser::BYTE)
        | (1ULL << Java9_v2Parser::CHAR)
        | (1ULL << Java9_v2Parser::DOUBLE)
        | (1ULL << Java9_v2Parser::FINAL)
        | (1ULL << Java9_v2Parser::FLOAT)
        | (1ULL << Java9_v2Parser::INT)
        | (1ULL << Java9_v2Parser::LONG)
        | (1ULL << Java9_v2Parser::SHORT))) != 0) || _la == Java9_v2Parser::AT

      || _la == Java9_v2Parser::Identifier) {
        setState(2713);
        formalParameterList();
      }
      setState(2716);
      match(Java9_v2Parser::RPAREN);
      break;
    }

    case 3: {
      _localctx = dynamic_cast<LambdaParametersContext *>(_tracker.createInstance<Java9_v2Parser::LambdaParameters3Context>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(2717);
      match(Java9_v2Parser::LPAREN);
      setState(2718);
      inferredFormalParameterList();
      setState(2719);
      match(Java9_v2Parser::RPAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InferredFormalParameterListContext ------------------------------------------------------------------

Java9_v2Parser::InferredFormalParameterListContext::InferredFormalParameterListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Java9_v2Parser::IdentifierContext *> Java9_v2Parser::InferredFormalParameterListContext::identifier() {
  return getRuleContexts<Java9_v2Parser::IdentifierContext>();
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::InferredFormalParameterListContext::identifier(size_t i) {
  return getRuleContext<Java9_v2Parser::IdentifierContext>(i);
}

std::vector<tree::TerminalNode *> Java9_v2Parser::InferredFormalParameterListContext::COMMA() {
  return getTokens(Java9_v2Parser::COMMA);
}

tree::TerminalNode* Java9_v2Parser::InferredFormalParameterListContext::COMMA(size_t i) {
  return getToken(Java9_v2Parser::COMMA, i);
}


size_t Java9_v2Parser::InferredFormalParameterListContext::getRuleIndex() const {
  return Java9_v2Parser::RuleInferredFormalParameterList;
}

void Java9_v2Parser::InferredFormalParameterListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInferredFormalParameterList(this);
}

void Java9_v2Parser::InferredFormalParameterListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInferredFormalParameterList(this);
}


antlrcpp::Any Java9_v2Parser::InferredFormalParameterListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitInferredFormalParameterList(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::InferredFormalParameterListContext* Java9_v2Parser::inferredFormalParameterList() {
  InferredFormalParameterListContext *_localctx = _tracker.createInstance<InferredFormalParameterListContext>(_ctx, getState());
  enterRule(_localctx, 434, Java9_v2Parser::RuleInferredFormalParameterList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2723);
    identifier();
    setState(2728);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java9_v2Parser::COMMA) {
      setState(2724);
      match(Java9_v2Parser::COMMA);
      setState(2725);
      identifier();
      setState(2730);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LambdaBodyContext ------------------------------------------------------------------

Java9_v2Parser::LambdaBodyContext::LambdaBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::LambdaBodyContext::getRuleIndex() const {
  return Java9_v2Parser::RuleLambdaBody;
}

void Java9_v2Parser::LambdaBodyContext::copyFrom(LambdaBodyContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- LambdaBody1Context ------------------------------------------------------------------

Java9_v2Parser::ExpressionContext* Java9_v2Parser::LambdaBody1Context::expression() {
  return getRuleContext<Java9_v2Parser::ExpressionContext>(0);
}

Java9_v2Parser::LambdaBody1Context::LambdaBody1Context(LambdaBodyContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::LambdaBody1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLambdaBody1(this);
}
void Java9_v2Parser::LambdaBody1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLambdaBody1(this);
}

antlrcpp::Any Java9_v2Parser::LambdaBody1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitLambdaBody1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LambdaBody2Context ------------------------------------------------------------------

Java9_v2Parser::BlockContext* Java9_v2Parser::LambdaBody2Context::block() {
  return getRuleContext<Java9_v2Parser::BlockContext>(0);
}

Java9_v2Parser::LambdaBody2Context::LambdaBody2Context(LambdaBodyContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::LambdaBody2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLambdaBody2(this);
}
void Java9_v2Parser::LambdaBody2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLambdaBody2(this);
}

antlrcpp::Any Java9_v2Parser::LambdaBody2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitLambdaBody2(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::LambdaBodyContext* Java9_v2Parser::lambdaBody() {
  LambdaBodyContext *_localctx = _tracker.createInstance<LambdaBodyContext>(_ctx, getState());
  enterRule(_localctx, 436, Java9_v2Parser::RuleLambdaBody);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2733);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Java9_v2Parser::T__0:
      case Java9_v2Parser::T__1:
      case Java9_v2Parser::T__2:
      case Java9_v2Parser::T__3:
      case Java9_v2Parser::T__4:
      case Java9_v2Parser::T__5:
      case Java9_v2Parser::T__6:
      case Java9_v2Parser::T__7:
      case Java9_v2Parser::T__8:
      case Java9_v2Parser::BOOLEAN:
      case Java9_v2Parser::BYTE:
      case Java9_v2Parser::CHAR:
      case Java9_v2Parser::DOUBLE:
      case Java9_v2Parser::FLOAT:
      case Java9_v2Parser::INT:
      case Java9_v2Parser::LONG:
      case Java9_v2Parser::NEW:
      case Java9_v2Parser::SHORT:
      case Java9_v2Parser::SUPER:
      case Java9_v2Parser::THIS:
      case Java9_v2Parser::VOID:
      case Java9_v2Parser::IntegerLiteral:
      case Java9_v2Parser::FloatingPointLiteral:
      case Java9_v2Parser::BooleanLiteral:
      case Java9_v2Parser::CharacterLiteral:
      case Java9_v2Parser::StringLiteral:
      case Java9_v2Parser::NullLiteral:
      case Java9_v2Parser::LPAREN:
      case Java9_v2Parser::AT:
      case Java9_v2Parser::BANG:
      case Java9_v2Parser::TILDE:
      case Java9_v2Parser::INC:
      case Java9_v2Parser::DEC:
      case Java9_v2Parser::ADD:
      case Java9_v2Parser::SUB:
      case Java9_v2Parser::Identifier: {
        _localctx = dynamic_cast<LambdaBodyContext *>(_tracker.createInstance<Java9_v2Parser::LambdaBody1Context>(_localctx));
        enterOuterAlt(_localctx, 1);
        setState(2731);
        expression();
        break;
      }

      case Java9_v2Parser::LBRACE: {
        _localctx = dynamic_cast<LambdaBodyContext *>(_tracker.createInstance<Java9_v2Parser::LambdaBody2Context>(_localctx));
        enterOuterAlt(_localctx, 2);
        setState(2732);
        block();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignmentExpressionContext ------------------------------------------------------------------

Java9_v2Parser::AssignmentExpressionContext::AssignmentExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::AssignmentExpressionContext::getRuleIndex() const {
  return Java9_v2Parser::RuleAssignmentExpression;
}

void Java9_v2Parser::AssignmentExpressionContext::copyFrom(AssignmentExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- AssignmentExpression1Context ------------------------------------------------------------------

Java9_v2Parser::ConditionalExpressionContext* Java9_v2Parser::AssignmentExpression1Context::conditionalExpression() {
  return getRuleContext<Java9_v2Parser::ConditionalExpressionContext>(0);
}

Java9_v2Parser::AssignmentExpression1Context::AssignmentExpression1Context(AssignmentExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::AssignmentExpression1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignmentExpression1(this);
}
void Java9_v2Parser::AssignmentExpression1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignmentExpression1(this);
}

antlrcpp::Any Java9_v2Parser::AssignmentExpression1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitAssignmentExpression1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AssignmentExpression2Context ------------------------------------------------------------------

Java9_v2Parser::AssignmentContext* Java9_v2Parser::AssignmentExpression2Context::assignment() {
  return getRuleContext<Java9_v2Parser::AssignmentContext>(0);
}

Java9_v2Parser::AssignmentExpression2Context::AssignmentExpression2Context(AssignmentExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::AssignmentExpression2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignmentExpression2(this);
}
void Java9_v2Parser::AssignmentExpression2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignmentExpression2(this);
}

antlrcpp::Any Java9_v2Parser::AssignmentExpression2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitAssignmentExpression2(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::AssignmentExpressionContext* Java9_v2Parser::assignmentExpression() {
  AssignmentExpressionContext *_localctx = _tracker.createInstance<AssignmentExpressionContext>(_ctx, getState());
  enterRule(_localctx, 438, Java9_v2Parser::RuleAssignmentExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2737);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 313, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<AssignmentExpressionContext *>(_tracker.createInstance<Java9_v2Parser::AssignmentExpression1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(2735);
      conditionalExpression();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<AssignmentExpressionContext *>(_tracker.createInstance<Java9_v2Parser::AssignmentExpression2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(2736);
      assignment();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignmentContext ------------------------------------------------------------------

Java9_v2Parser::AssignmentContext::AssignmentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::LeftHandSideContext* Java9_v2Parser::AssignmentContext::leftHandSide() {
  return getRuleContext<Java9_v2Parser::LeftHandSideContext>(0);
}

Java9_v2Parser::AssignmentOperatorContext* Java9_v2Parser::AssignmentContext::assignmentOperator() {
  return getRuleContext<Java9_v2Parser::AssignmentOperatorContext>(0);
}

Java9_v2Parser::ExpressionContext* Java9_v2Parser::AssignmentContext::expression() {
  return getRuleContext<Java9_v2Parser::ExpressionContext>(0);
}


size_t Java9_v2Parser::AssignmentContext::getRuleIndex() const {
  return Java9_v2Parser::RuleAssignment;
}

void Java9_v2Parser::AssignmentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignment(this);
}

void Java9_v2Parser::AssignmentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignment(this);
}


antlrcpp::Any Java9_v2Parser::AssignmentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitAssignment(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::AssignmentContext* Java9_v2Parser::assignment() {
  AssignmentContext *_localctx = _tracker.createInstance<AssignmentContext>(_ctx, getState());
  enterRule(_localctx, 440, Java9_v2Parser::RuleAssignment);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2739);
    leftHandSide();
    setState(2740);
    assignmentOperator();
    setState(2741);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LeftHandSideContext ------------------------------------------------------------------

Java9_v2Parser::LeftHandSideContext::LeftHandSideContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::LeftHandSideContext::getRuleIndex() const {
  return Java9_v2Parser::RuleLeftHandSide;
}

void Java9_v2Parser::LeftHandSideContext::copyFrom(LeftHandSideContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- LeftHandSide5Context ------------------------------------------------------------------

Java9_v2Parser::ArrayAccessContext* Java9_v2Parser::LeftHandSide5Context::arrayAccess() {
  return getRuleContext<Java9_v2Parser::ArrayAccessContext>(0);
}

Java9_v2Parser::LeftHandSide5Context::LeftHandSide5Context(LeftHandSideContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::LeftHandSide5Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLeftHandSide5(this);
}
void Java9_v2Parser::LeftHandSide5Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLeftHandSide5(this);
}

antlrcpp::Any Java9_v2Parser::LeftHandSide5Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitLeftHandSide5(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LeftHandSide4Context ------------------------------------------------------------------

Java9_v2Parser::FieldAccessContext* Java9_v2Parser::LeftHandSide4Context::fieldAccess() {
  return getRuleContext<Java9_v2Parser::FieldAccessContext>(0);
}

Java9_v2Parser::LeftHandSide4Context::LeftHandSide4Context(LeftHandSideContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::LeftHandSide4Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLeftHandSide4(this);
}
void Java9_v2Parser::LeftHandSide4Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLeftHandSide4(this);
}

antlrcpp::Any Java9_v2Parser::LeftHandSide4Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitLeftHandSide4(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LeftHandSide3Context ------------------------------------------------------------------

Java9_v2Parser::ExpressionNameContext* Java9_v2Parser::LeftHandSide3Context::expressionName() {
  return getRuleContext<Java9_v2Parser::ExpressionNameContext>(0);
}

Java9_v2Parser::LeftHandSide3Context::LeftHandSide3Context(LeftHandSideContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::LeftHandSide3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLeftHandSide3(this);
}
void Java9_v2Parser::LeftHandSide3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLeftHandSide3(this);
}

antlrcpp::Any Java9_v2Parser::LeftHandSide3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitLeftHandSide3(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::LeftHandSideContext* Java9_v2Parser::leftHandSide() {
  LeftHandSideContext *_localctx = _tracker.createInstance<LeftHandSideContext>(_ctx, getState());
  enterRule(_localctx, 442, Java9_v2Parser::RuleLeftHandSide);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2746);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 314, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<LeftHandSideContext *>(_tracker.createInstance<Java9_v2Parser::LeftHandSide3Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(2743);
      expressionName();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<LeftHandSideContext *>(_tracker.createInstance<Java9_v2Parser::LeftHandSide4Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(2744);
      fieldAccess();
      break;
    }

    case 3: {
      _localctx = dynamic_cast<LeftHandSideContext *>(_tracker.createInstance<Java9_v2Parser::LeftHandSide5Context>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(2745);
      arrayAccess();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignmentOperatorContext ------------------------------------------------------------------

Java9_v2Parser::AssignmentOperatorContext::AssignmentOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::AssignmentOperatorContext::ASSIGN() {
  return getToken(Java9_v2Parser::ASSIGN, 0);
}

tree::TerminalNode* Java9_v2Parser::AssignmentOperatorContext::MUL_ASSIGN() {
  return getToken(Java9_v2Parser::MUL_ASSIGN, 0);
}

tree::TerminalNode* Java9_v2Parser::AssignmentOperatorContext::DIV_ASSIGN() {
  return getToken(Java9_v2Parser::DIV_ASSIGN, 0);
}

tree::TerminalNode* Java9_v2Parser::AssignmentOperatorContext::MOD_ASSIGN() {
  return getToken(Java9_v2Parser::MOD_ASSIGN, 0);
}

tree::TerminalNode* Java9_v2Parser::AssignmentOperatorContext::ADD_ASSIGN() {
  return getToken(Java9_v2Parser::ADD_ASSIGN, 0);
}

tree::TerminalNode* Java9_v2Parser::AssignmentOperatorContext::SUB_ASSIGN() {
  return getToken(Java9_v2Parser::SUB_ASSIGN, 0);
}

tree::TerminalNode* Java9_v2Parser::AssignmentOperatorContext::LSHIFT_ASSIGN() {
  return getToken(Java9_v2Parser::LSHIFT_ASSIGN, 0);
}

tree::TerminalNode* Java9_v2Parser::AssignmentOperatorContext::RSHIFT_ASSIGN() {
  return getToken(Java9_v2Parser::RSHIFT_ASSIGN, 0);
}

tree::TerminalNode* Java9_v2Parser::AssignmentOperatorContext::URSHIFT_ASSIGN() {
  return getToken(Java9_v2Parser::URSHIFT_ASSIGN, 0);
}

tree::TerminalNode* Java9_v2Parser::AssignmentOperatorContext::AND_ASSIGN() {
  return getToken(Java9_v2Parser::AND_ASSIGN, 0);
}

tree::TerminalNode* Java9_v2Parser::AssignmentOperatorContext::XOR_ASSIGN() {
  return getToken(Java9_v2Parser::XOR_ASSIGN, 0);
}

tree::TerminalNode* Java9_v2Parser::AssignmentOperatorContext::OR_ASSIGN() {
  return getToken(Java9_v2Parser::OR_ASSIGN, 0);
}


size_t Java9_v2Parser::AssignmentOperatorContext::getRuleIndex() const {
  return Java9_v2Parser::RuleAssignmentOperator;
}

void Java9_v2Parser::AssignmentOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignmentOperator(this);
}

void Java9_v2Parser::AssignmentOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignmentOperator(this);
}


antlrcpp::Any Java9_v2Parser::AssignmentOperatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitAssignmentOperator(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::AssignmentOperatorContext* Java9_v2Parser::assignmentOperator() {
  AssignmentOperatorContext *_localctx = _tracker.createInstance<AssignmentOperatorContext>(_ctx, getState());
  enterRule(_localctx, 444, Java9_v2Parser::RuleAssignmentOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2748);
    _la = _input->LA(1);
    if (!(((((_la - 80) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 80)) & ((1ULL << (Java9_v2Parser::ASSIGN - 80))
      | (1ULL << (Java9_v2Parser::ADD_ASSIGN - 80))
      | (1ULL << (Java9_v2Parser::SUB_ASSIGN - 80))
      | (1ULL << (Java9_v2Parser::MUL_ASSIGN - 80))
      | (1ULL << (Java9_v2Parser::DIV_ASSIGN - 80))
      | (1ULL << (Java9_v2Parser::AND_ASSIGN - 80))
      | (1ULL << (Java9_v2Parser::OR_ASSIGN - 80))
      | (1ULL << (Java9_v2Parser::XOR_ASSIGN - 80))
      | (1ULL << (Java9_v2Parser::MOD_ASSIGN - 80))
      | (1ULL << (Java9_v2Parser::LSHIFT_ASSIGN - 80))
      | (1ULL << (Java9_v2Parser::RSHIFT_ASSIGN - 80))
      | (1ULL << (Java9_v2Parser::URSHIFT_ASSIGN - 80)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConditionalExpressionContext ------------------------------------------------------------------

Java9_v2Parser::ConditionalExpressionContext::ConditionalExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::ConditionalExpressionContext::getRuleIndex() const {
  return Java9_v2Parser::RuleConditionalExpression;
}

void Java9_v2Parser::ConditionalExpressionContext::copyFrom(ConditionalExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ConditionalExpression1Context ------------------------------------------------------------------

Java9_v2Parser::ConditionalOrExpressionContext* Java9_v2Parser::ConditionalExpression1Context::conditionalOrExpression() {
  return getRuleContext<Java9_v2Parser::ConditionalOrExpressionContext>(0);
}

Java9_v2Parser::ConditionalExpression1Context::ConditionalExpression1Context(ConditionalExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ConditionalExpression1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConditionalExpression1(this);
}
void Java9_v2Parser::ConditionalExpression1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConditionalExpression1(this);
}

antlrcpp::Any Java9_v2Parser::ConditionalExpression1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitConditionalExpression1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ConditionalExpression2Context ------------------------------------------------------------------

Java9_v2Parser::ConditionalOrExpressionContext* Java9_v2Parser::ConditionalExpression2Context::conditionalOrExpression() {
  return getRuleContext<Java9_v2Parser::ConditionalOrExpressionContext>(0);
}

tree::TerminalNode* Java9_v2Parser::ConditionalExpression2Context::QUESTION() {
  return getToken(Java9_v2Parser::QUESTION, 0);
}

Java9_v2Parser::ExpressionContext* Java9_v2Parser::ConditionalExpression2Context::expression() {
  return getRuleContext<Java9_v2Parser::ExpressionContext>(0);
}

tree::TerminalNode* Java9_v2Parser::ConditionalExpression2Context::COLON() {
  return getToken(Java9_v2Parser::COLON, 0);
}

Java9_v2Parser::ConditionalExpressionContext* Java9_v2Parser::ConditionalExpression2Context::conditionalExpression() {
  return getRuleContext<Java9_v2Parser::ConditionalExpressionContext>(0);
}

Java9_v2Parser::LambdaExpressionContext* Java9_v2Parser::ConditionalExpression2Context::lambdaExpression() {
  return getRuleContext<Java9_v2Parser::LambdaExpressionContext>(0);
}

Java9_v2Parser::ConditionalExpression2Context::ConditionalExpression2Context(ConditionalExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ConditionalExpression2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConditionalExpression2(this);
}
void Java9_v2Parser::ConditionalExpression2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConditionalExpression2(this);
}

antlrcpp::Any Java9_v2Parser::ConditionalExpression2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitConditionalExpression2(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::ConditionalExpressionContext* Java9_v2Parser::conditionalExpression() {
  ConditionalExpressionContext *_localctx = _tracker.createInstance<ConditionalExpressionContext>(_ctx, getState());
  enterRule(_localctx, 446, Java9_v2Parser::RuleConditionalExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2759);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 316, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<ConditionalExpressionContext *>(_tracker.createInstance<Java9_v2Parser::ConditionalExpression1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(2750);
      conditionalOrExpression(0);
      break;
    }

    case 2: {
      _localctx = dynamic_cast<ConditionalExpressionContext *>(_tracker.createInstance<Java9_v2Parser::ConditionalExpression2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(2751);
      conditionalOrExpression(0);
      setState(2752);
      match(Java9_v2Parser::QUESTION);
      setState(2753);
      expression();
      setState(2754);
      match(Java9_v2Parser::COLON);
      setState(2757);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 315, _ctx)) {
      case 1: {
        setState(2755);
        conditionalExpression();
        break;
      }

      case 2: {
        setState(2756);
        lambdaExpression();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConditionalOrExpressionContext ------------------------------------------------------------------

Java9_v2Parser::ConditionalOrExpressionContext::ConditionalOrExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::ConditionalOrExpressionContext::getRuleIndex() const {
  return Java9_v2Parser::RuleConditionalOrExpression;
}

void Java9_v2Parser::ConditionalOrExpressionContext::copyFrom(ConditionalOrExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ConditionalOrExpression1Context ------------------------------------------------------------------

Java9_v2Parser::ConditionalAndExpressionContext* Java9_v2Parser::ConditionalOrExpression1Context::conditionalAndExpression() {
  return getRuleContext<Java9_v2Parser::ConditionalAndExpressionContext>(0);
}

Java9_v2Parser::ConditionalOrExpression1Context::ConditionalOrExpression1Context(ConditionalOrExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ConditionalOrExpression1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConditionalOrExpression1(this);
}
void Java9_v2Parser::ConditionalOrExpression1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConditionalOrExpression1(this);
}

antlrcpp::Any Java9_v2Parser::ConditionalOrExpression1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitConditionalOrExpression1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ConditionalOrExpression2Context ------------------------------------------------------------------

Java9_v2Parser::ConditionalOrExpressionContext* Java9_v2Parser::ConditionalOrExpression2Context::conditionalOrExpression() {
  return getRuleContext<Java9_v2Parser::ConditionalOrExpressionContext>(0);
}

tree::TerminalNode* Java9_v2Parser::ConditionalOrExpression2Context::OR() {
  return getToken(Java9_v2Parser::OR, 0);
}

Java9_v2Parser::ConditionalAndExpressionContext* Java9_v2Parser::ConditionalOrExpression2Context::conditionalAndExpression() {
  return getRuleContext<Java9_v2Parser::ConditionalAndExpressionContext>(0);
}

Java9_v2Parser::ConditionalOrExpression2Context::ConditionalOrExpression2Context(ConditionalOrExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ConditionalOrExpression2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConditionalOrExpression2(this);
}
void Java9_v2Parser::ConditionalOrExpression2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConditionalOrExpression2(this);
}

antlrcpp::Any Java9_v2Parser::ConditionalOrExpression2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitConditionalOrExpression2(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::ConditionalOrExpressionContext* Java9_v2Parser::conditionalOrExpression() {
   return conditionalOrExpression(0);
}

Java9_v2Parser::ConditionalOrExpressionContext* Java9_v2Parser::conditionalOrExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Java9_v2Parser::ConditionalOrExpressionContext *_localctx = _tracker.createInstance<ConditionalOrExpressionContext>(_ctx, parentState);
  Java9_v2Parser::ConditionalOrExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 448;
  enterRecursionRule(_localctx, 448, Java9_v2Parser::RuleConditionalOrExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    _localctx = _tracker.createInstance<ConditionalOrExpression1Context>(_localctx);
    _ctx = _localctx;
    previousContext = _localctx;

    setState(2762);
    conditionalAndExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(2769);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 317, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        auto newContext = _tracker.createInstance<ConditionalOrExpression2Context>(_tracker.createInstance<ConditionalOrExpressionContext>(parentContext, parentState));
        _localctx = newContext;
        pushNewRecursionContext(newContext, startState, RuleConditionalOrExpression);
        setState(2764);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(2765);
        match(Java9_v2Parser::OR);
        setState(2766);
        conditionalAndExpression(0); 
      }
      setState(2771);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 317, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ConditionalAndExpressionContext ------------------------------------------------------------------

Java9_v2Parser::ConditionalAndExpressionContext::ConditionalAndExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::ConditionalAndExpressionContext::getRuleIndex() const {
  return Java9_v2Parser::RuleConditionalAndExpression;
}

void Java9_v2Parser::ConditionalAndExpressionContext::copyFrom(ConditionalAndExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ConditionalAndExpression2Context ------------------------------------------------------------------

Java9_v2Parser::ConditionalAndExpressionContext* Java9_v2Parser::ConditionalAndExpression2Context::conditionalAndExpression() {
  return getRuleContext<Java9_v2Parser::ConditionalAndExpressionContext>(0);
}

tree::TerminalNode* Java9_v2Parser::ConditionalAndExpression2Context::AND() {
  return getToken(Java9_v2Parser::AND, 0);
}

Java9_v2Parser::InclusiveOrExpressionContext* Java9_v2Parser::ConditionalAndExpression2Context::inclusiveOrExpression() {
  return getRuleContext<Java9_v2Parser::InclusiveOrExpressionContext>(0);
}

Java9_v2Parser::ConditionalAndExpression2Context::ConditionalAndExpression2Context(ConditionalAndExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ConditionalAndExpression2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConditionalAndExpression2(this);
}
void Java9_v2Parser::ConditionalAndExpression2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConditionalAndExpression2(this);
}

antlrcpp::Any Java9_v2Parser::ConditionalAndExpression2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitConditionalAndExpression2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ConditionalAndExpression1Context ------------------------------------------------------------------

Java9_v2Parser::InclusiveOrExpressionContext* Java9_v2Parser::ConditionalAndExpression1Context::inclusiveOrExpression() {
  return getRuleContext<Java9_v2Parser::InclusiveOrExpressionContext>(0);
}

Java9_v2Parser::ConditionalAndExpression1Context::ConditionalAndExpression1Context(ConditionalAndExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ConditionalAndExpression1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConditionalAndExpression1(this);
}
void Java9_v2Parser::ConditionalAndExpression1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConditionalAndExpression1(this);
}

antlrcpp::Any Java9_v2Parser::ConditionalAndExpression1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitConditionalAndExpression1(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::ConditionalAndExpressionContext* Java9_v2Parser::conditionalAndExpression() {
   return conditionalAndExpression(0);
}

Java9_v2Parser::ConditionalAndExpressionContext* Java9_v2Parser::conditionalAndExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Java9_v2Parser::ConditionalAndExpressionContext *_localctx = _tracker.createInstance<ConditionalAndExpressionContext>(_ctx, parentState);
  Java9_v2Parser::ConditionalAndExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 450;
  enterRecursionRule(_localctx, 450, Java9_v2Parser::RuleConditionalAndExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    _localctx = _tracker.createInstance<ConditionalAndExpression1Context>(_localctx);
    _ctx = _localctx;
    previousContext = _localctx;

    setState(2773);
    inclusiveOrExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(2780);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 318, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        auto newContext = _tracker.createInstance<ConditionalAndExpression2Context>(_tracker.createInstance<ConditionalAndExpressionContext>(parentContext, parentState));
        _localctx = newContext;
        pushNewRecursionContext(newContext, startState, RuleConditionalAndExpression);
        setState(2775);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(2776);
        match(Java9_v2Parser::AND);
        setState(2777);
        inclusiveOrExpression(0); 
      }
      setState(2782);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 318, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- InclusiveOrExpressionContext ------------------------------------------------------------------

Java9_v2Parser::InclusiveOrExpressionContext::InclusiveOrExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::InclusiveOrExpressionContext::getRuleIndex() const {
  return Java9_v2Parser::RuleInclusiveOrExpression;
}

void Java9_v2Parser::InclusiveOrExpressionContext::copyFrom(InclusiveOrExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- InclusiveOrExpression2Context ------------------------------------------------------------------

Java9_v2Parser::InclusiveOrExpressionContext* Java9_v2Parser::InclusiveOrExpression2Context::inclusiveOrExpression() {
  return getRuleContext<Java9_v2Parser::InclusiveOrExpressionContext>(0);
}

tree::TerminalNode* Java9_v2Parser::InclusiveOrExpression2Context::BITOR() {
  return getToken(Java9_v2Parser::BITOR, 0);
}

Java9_v2Parser::ExclusiveOrExpressionContext* Java9_v2Parser::InclusiveOrExpression2Context::exclusiveOrExpression() {
  return getRuleContext<Java9_v2Parser::ExclusiveOrExpressionContext>(0);
}

Java9_v2Parser::InclusiveOrExpression2Context::InclusiveOrExpression2Context(InclusiveOrExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::InclusiveOrExpression2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInclusiveOrExpression2(this);
}
void Java9_v2Parser::InclusiveOrExpression2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInclusiveOrExpression2(this);
}

antlrcpp::Any Java9_v2Parser::InclusiveOrExpression2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitInclusiveOrExpression2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- InclusiveOrExpression1Context ------------------------------------------------------------------

Java9_v2Parser::ExclusiveOrExpressionContext* Java9_v2Parser::InclusiveOrExpression1Context::exclusiveOrExpression() {
  return getRuleContext<Java9_v2Parser::ExclusiveOrExpressionContext>(0);
}

Java9_v2Parser::InclusiveOrExpression1Context::InclusiveOrExpression1Context(InclusiveOrExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::InclusiveOrExpression1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInclusiveOrExpression1(this);
}
void Java9_v2Parser::InclusiveOrExpression1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInclusiveOrExpression1(this);
}

antlrcpp::Any Java9_v2Parser::InclusiveOrExpression1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitInclusiveOrExpression1(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::InclusiveOrExpressionContext* Java9_v2Parser::inclusiveOrExpression() {
   return inclusiveOrExpression(0);
}

Java9_v2Parser::InclusiveOrExpressionContext* Java9_v2Parser::inclusiveOrExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Java9_v2Parser::InclusiveOrExpressionContext *_localctx = _tracker.createInstance<InclusiveOrExpressionContext>(_ctx, parentState);
  Java9_v2Parser::InclusiveOrExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 452;
  enterRecursionRule(_localctx, 452, Java9_v2Parser::RuleInclusiveOrExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    _localctx = _tracker.createInstance<InclusiveOrExpression1Context>(_localctx);
    _ctx = _localctx;
    previousContext = _localctx;

    setState(2784);
    exclusiveOrExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(2791);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 319, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        auto newContext = _tracker.createInstance<InclusiveOrExpression2Context>(_tracker.createInstance<InclusiveOrExpressionContext>(parentContext, parentState));
        _localctx = newContext;
        pushNewRecursionContext(newContext, startState, RuleInclusiveOrExpression);
        setState(2786);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(2787);
        match(Java9_v2Parser::BITOR);
        setState(2788);
        exclusiveOrExpression(0); 
      }
      setState(2793);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 319, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ExclusiveOrExpressionContext ------------------------------------------------------------------

Java9_v2Parser::ExclusiveOrExpressionContext::ExclusiveOrExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::ExclusiveOrExpressionContext::getRuleIndex() const {
  return Java9_v2Parser::RuleExclusiveOrExpression;
}

void Java9_v2Parser::ExclusiveOrExpressionContext::copyFrom(ExclusiveOrExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ExclusiveOrExpression1Context ------------------------------------------------------------------

Java9_v2Parser::AndExpressionContext* Java9_v2Parser::ExclusiveOrExpression1Context::andExpression() {
  return getRuleContext<Java9_v2Parser::AndExpressionContext>(0);
}

Java9_v2Parser::ExclusiveOrExpression1Context::ExclusiveOrExpression1Context(ExclusiveOrExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ExclusiveOrExpression1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExclusiveOrExpression1(this);
}
void Java9_v2Parser::ExclusiveOrExpression1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExclusiveOrExpression1(this);
}

antlrcpp::Any Java9_v2Parser::ExclusiveOrExpression1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitExclusiveOrExpression1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ExclusiveOrExpression2Context ------------------------------------------------------------------

Java9_v2Parser::ExclusiveOrExpressionContext* Java9_v2Parser::ExclusiveOrExpression2Context::exclusiveOrExpression() {
  return getRuleContext<Java9_v2Parser::ExclusiveOrExpressionContext>(0);
}

tree::TerminalNode* Java9_v2Parser::ExclusiveOrExpression2Context::CARET() {
  return getToken(Java9_v2Parser::CARET, 0);
}

Java9_v2Parser::AndExpressionContext* Java9_v2Parser::ExclusiveOrExpression2Context::andExpression() {
  return getRuleContext<Java9_v2Parser::AndExpressionContext>(0);
}

Java9_v2Parser::ExclusiveOrExpression2Context::ExclusiveOrExpression2Context(ExclusiveOrExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ExclusiveOrExpression2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExclusiveOrExpression2(this);
}
void Java9_v2Parser::ExclusiveOrExpression2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExclusiveOrExpression2(this);
}

antlrcpp::Any Java9_v2Parser::ExclusiveOrExpression2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitExclusiveOrExpression2(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::ExclusiveOrExpressionContext* Java9_v2Parser::exclusiveOrExpression() {
   return exclusiveOrExpression(0);
}

Java9_v2Parser::ExclusiveOrExpressionContext* Java9_v2Parser::exclusiveOrExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Java9_v2Parser::ExclusiveOrExpressionContext *_localctx = _tracker.createInstance<ExclusiveOrExpressionContext>(_ctx, parentState);
  Java9_v2Parser::ExclusiveOrExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 454;
  enterRecursionRule(_localctx, 454, Java9_v2Parser::RuleExclusiveOrExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    _localctx = _tracker.createInstance<ExclusiveOrExpression1Context>(_localctx);
    _ctx = _localctx;
    previousContext = _localctx;

    setState(2795);
    andExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(2802);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 320, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        auto newContext = _tracker.createInstance<ExclusiveOrExpression2Context>(_tracker.createInstance<ExclusiveOrExpressionContext>(parentContext, parentState));
        _localctx = newContext;
        pushNewRecursionContext(newContext, startState, RuleExclusiveOrExpression);
        setState(2797);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(2798);
        match(Java9_v2Parser::CARET);
        setState(2799);
        andExpression(0); 
      }
      setState(2804);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 320, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- AndExpressionContext ------------------------------------------------------------------

Java9_v2Parser::AndExpressionContext::AndExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::AndExpressionContext::getRuleIndex() const {
  return Java9_v2Parser::RuleAndExpression;
}

void Java9_v2Parser::AndExpressionContext::copyFrom(AndExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- AndExpression2Context ------------------------------------------------------------------

Java9_v2Parser::AndExpressionContext* Java9_v2Parser::AndExpression2Context::andExpression() {
  return getRuleContext<Java9_v2Parser::AndExpressionContext>(0);
}

tree::TerminalNode* Java9_v2Parser::AndExpression2Context::BITAND() {
  return getToken(Java9_v2Parser::BITAND, 0);
}

Java9_v2Parser::EqualityExpressionContext* Java9_v2Parser::AndExpression2Context::equalityExpression() {
  return getRuleContext<Java9_v2Parser::EqualityExpressionContext>(0);
}

Java9_v2Parser::AndExpression2Context::AndExpression2Context(AndExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::AndExpression2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAndExpression2(this);
}
void Java9_v2Parser::AndExpression2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAndExpression2(this);
}

antlrcpp::Any Java9_v2Parser::AndExpression2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitAndExpression2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AndExpression1Context ------------------------------------------------------------------

Java9_v2Parser::EqualityExpressionContext* Java9_v2Parser::AndExpression1Context::equalityExpression() {
  return getRuleContext<Java9_v2Parser::EqualityExpressionContext>(0);
}

Java9_v2Parser::AndExpression1Context::AndExpression1Context(AndExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::AndExpression1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAndExpression1(this);
}
void Java9_v2Parser::AndExpression1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAndExpression1(this);
}

antlrcpp::Any Java9_v2Parser::AndExpression1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitAndExpression1(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::AndExpressionContext* Java9_v2Parser::andExpression() {
   return andExpression(0);
}

Java9_v2Parser::AndExpressionContext* Java9_v2Parser::andExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Java9_v2Parser::AndExpressionContext *_localctx = _tracker.createInstance<AndExpressionContext>(_ctx, parentState);
  Java9_v2Parser::AndExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 456;
  enterRecursionRule(_localctx, 456, Java9_v2Parser::RuleAndExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    _localctx = _tracker.createInstance<AndExpression1Context>(_localctx);
    _ctx = _localctx;
    previousContext = _localctx;

    setState(2806);
    equalityExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(2813);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 321, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        auto newContext = _tracker.createInstance<AndExpression2Context>(_tracker.createInstance<AndExpressionContext>(parentContext, parentState));
        _localctx = newContext;
        pushNewRecursionContext(newContext, startState, RuleAndExpression);
        setState(2808);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(2809);
        match(Java9_v2Parser::BITAND);
        setState(2810);
        equalityExpression(0); 
      }
      setState(2815);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 321, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- EqualityExpressionContext ------------------------------------------------------------------

Java9_v2Parser::EqualityExpressionContext::EqualityExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::EqualityExpressionContext::getRuleIndex() const {
  return Java9_v2Parser::RuleEqualityExpression;
}

void Java9_v2Parser::EqualityExpressionContext::copyFrom(EqualityExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- EqualityExpression3Context ------------------------------------------------------------------

Java9_v2Parser::EqualityExpressionContext* Java9_v2Parser::EqualityExpression3Context::equalityExpression() {
  return getRuleContext<Java9_v2Parser::EqualityExpressionContext>(0);
}

tree::TerminalNode* Java9_v2Parser::EqualityExpression3Context::NOTEQUAL() {
  return getToken(Java9_v2Parser::NOTEQUAL, 0);
}

Java9_v2Parser::RelationalExpressionContext* Java9_v2Parser::EqualityExpression3Context::relationalExpression() {
  return getRuleContext<Java9_v2Parser::RelationalExpressionContext>(0);
}

Java9_v2Parser::EqualityExpression3Context::EqualityExpression3Context(EqualityExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::EqualityExpression3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEqualityExpression3(this);
}
void Java9_v2Parser::EqualityExpression3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEqualityExpression3(this);
}

antlrcpp::Any Java9_v2Parser::EqualityExpression3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitEqualityExpression3(this);
  else
    return visitor->visitChildren(this);
}
//----------------- EqualityExpression2Context ------------------------------------------------------------------

Java9_v2Parser::EqualityExpressionContext* Java9_v2Parser::EqualityExpression2Context::equalityExpression() {
  return getRuleContext<Java9_v2Parser::EqualityExpressionContext>(0);
}

tree::TerminalNode* Java9_v2Parser::EqualityExpression2Context::EQUAL() {
  return getToken(Java9_v2Parser::EQUAL, 0);
}

Java9_v2Parser::RelationalExpressionContext* Java9_v2Parser::EqualityExpression2Context::relationalExpression() {
  return getRuleContext<Java9_v2Parser::RelationalExpressionContext>(0);
}

Java9_v2Parser::EqualityExpression2Context::EqualityExpression2Context(EqualityExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::EqualityExpression2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEqualityExpression2(this);
}
void Java9_v2Parser::EqualityExpression2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEqualityExpression2(this);
}

antlrcpp::Any Java9_v2Parser::EqualityExpression2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitEqualityExpression2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- EqualityExpression1Context ------------------------------------------------------------------

Java9_v2Parser::RelationalExpressionContext* Java9_v2Parser::EqualityExpression1Context::relationalExpression() {
  return getRuleContext<Java9_v2Parser::RelationalExpressionContext>(0);
}

Java9_v2Parser::EqualityExpression1Context::EqualityExpression1Context(EqualityExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::EqualityExpression1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEqualityExpression1(this);
}
void Java9_v2Parser::EqualityExpression1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEqualityExpression1(this);
}

antlrcpp::Any Java9_v2Parser::EqualityExpression1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitEqualityExpression1(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::EqualityExpressionContext* Java9_v2Parser::equalityExpression() {
   return equalityExpression(0);
}

Java9_v2Parser::EqualityExpressionContext* Java9_v2Parser::equalityExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Java9_v2Parser::EqualityExpressionContext *_localctx = _tracker.createInstance<EqualityExpressionContext>(_ctx, parentState);
  Java9_v2Parser::EqualityExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 458;
  enterRecursionRule(_localctx, 458, Java9_v2Parser::RuleEqualityExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    _localctx = _tracker.createInstance<EqualityExpression1Context>(_localctx);
    _ctx = _localctx;
    previousContext = _localctx;

    setState(2817);
    relationalExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(2827);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 323, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(2825);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 322, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<EqualityExpression2Context>(_tracker.createInstance<EqualityExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleEqualityExpression);
          setState(2819);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(2820);
          match(Java9_v2Parser::EQUAL);
          setState(2821);
          relationalExpression(0);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<EqualityExpression3Context>(_tracker.createInstance<EqualityExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleEqualityExpression);
          setState(2822);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(2823);
          match(Java9_v2Parser::NOTEQUAL);
          setState(2824);
          relationalExpression(0);
          break;
        }

        default:
          break;
        } 
      }
      setState(2829);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 323, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- RelationalExpressionContext ------------------------------------------------------------------

Java9_v2Parser::RelationalExpressionContext::RelationalExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::RelationalExpressionContext::getRuleIndex() const {
  return Java9_v2Parser::RuleRelationalExpression;
}

void Java9_v2Parser::RelationalExpressionContext::copyFrom(RelationalExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- RelationalExpression1Context ------------------------------------------------------------------

Java9_v2Parser::ShiftExpressionContext* Java9_v2Parser::RelationalExpression1Context::shiftExpression() {
  return getRuleContext<Java9_v2Parser::ShiftExpressionContext>(0);
}

Java9_v2Parser::RelationalExpression1Context::RelationalExpression1Context(RelationalExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::RelationalExpression1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRelationalExpression1(this);
}
void Java9_v2Parser::RelationalExpression1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRelationalExpression1(this);
}

antlrcpp::Any Java9_v2Parser::RelationalExpression1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitRelationalExpression1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- RelationalExpression2Context ------------------------------------------------------------------

Java9_v2Parser::RelationalExpressionContext* Java9_v2Parser::RelationalExpression2Context::relationalExpression() {
  return getRuleContext<Java9_v2Parser::RelationalExpressionContext>(0);
}

tree::TerminalNode* Java9_v2Parser::RelationalExpression2Context::LT() {
  return getToken(Java9_v2Parser::LT, 0);
}

Java9_v2Parser::ShiftExpressionContext* Java9_v2Parser::RelationalExpression2Context::shiftExpression() {
  return getRuleContext<Java9_v2Parser::ShiftExpressionContext>(0);
}

Java9_v2Parser::RelationalExpression2Context::RelationalExpression2Context(RelationalExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::RelationalExpression2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRelationalExpression2(this);
}
void Java9_v2Parser::RelationalExpression2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRelationalExpression2(this);
}

antlrcpp::Any Java9_v2Parser::RelationalExpression2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitRelationalExpression2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- RelationalExpression5Context ------------------------------------------------------------------

Java9_v2Parser::RelationalExpressionContext* Java9_v2Parser::RelationalExpression5Context::relationalExpression() {
  return getRuleContext<Java9_v2Parser::RelationalExpressionContext>(0);
}

tree::TerminalNode* Java9_v2Parser::RelationalExpression5Context::GE() {
  return getToken(Java9_v2Parser::GE, 0);
}

Java9_v2Parser::ShiftExpressionContext* Java9_v2Parser::RelationalExpression5Context::shiftExpression() {
  return getRuleContext<Java9_v2Parser::ShiftExpressionContext>(0);
}

Java9_v2Parser::RelationalExpression5Context::RelationalExpression5Context(RelationalExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::RelationalExpression5Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRelationalExpression5(this);
}
void Java9_v2Parser::RelationalExpression5Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRelationalExpression5(this);
}

antlrcpp::Any Java9_v2Parser::RelationalExpression5Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitRelationalExpression5(this);
  else
    return visitor->visitChildren(this);
}
//----------------- RelationalExpression6Context ------------------------------------------------------------------

Java9_v2Parser::RelationalExpressionContext* Java9_v2Parser::RelationalExpression6Context::relationalExpression() {
  return getRuleContext<Java9_v2Parser::RelationalExpressionContext>(0);
}

tree::TerminalNode* Java9_v2Parser::RelationalExpression6Context::INSTANCEOF() {
  return getToken(Java9_v2Parser::INSTANCEOF, 0);
}

Java9_v2Parser::ReferenceTypeContext* Java9_v2Parser::RelationalExpression6Context::referenceType() {
  return getRuleContext<Java9_v2Parser::ReferenceTypeContext>(0);
}

Java9_v2Parser::RelationalExpression6Context::RelationalExpression6Context(RelationalExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::RelationalExpression6Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRelationalExpression6(this);
}
void Java9_v2Parser::RelationalExpression6Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRelationalExpression6(this);
}

antlrcpp::Any Java9_v2Parser::RelationalExpression6Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitRelationalExpression6(this);
  else
    return visitor->visitChildren(this);
}
//----------------- RelationalExpression3Context ------------------------------------------------------------------

Java9_v2Parser::RelationalExpressionContext* Java9_v2Parser::RelationalExpression3Context::relationalExpression() {
  return getRuleContext<Java9_v2Parser::RelationalExpressionContext>(0);
}

tree::TerminalNode* Java9_v2Parser::RelationalExpression3Context::GT() {
  return getToken(Java9_v2Parser::GT, 0);
}

Java9_v2Parser::ShiftExpressionContext* Java9_v2Parser::RelationalExpression3Context::shiftExpression() {
  return getRuleContext<Java9_v2Parser::ShiftExpressionContext>(0);
}

Java9_v2Parser::RelationalExpression3Context::RelationalExpression3Context(RelationalExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::RelationalExpression3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRelationalExpression3(this);
}
void Java9_v2Parser::RelationalExpression3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRelationalExpression3(this);
}

antlrcpp::Any Java9_v2Parser::RelationalExpression3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitRelationalExpression3(this);
  else
    return visitor->visitChildren(this);
}
//----------------- RelationalExpression4Context ------------------------------------------------------------------

Java9_v2Parser::RelationalExpressionContext* Java9_v2Parser::RelationalExpression4Context::relationalExpression() {
  return getRuleContext<Java9_v2Parser::RelationalExpressionContext>(0);
}

tree::TerminalNode* Java9_v2Parser::RelationalExpression4Context::LE() {
  return getToken(Java9_v2Parser::LE, 0);
}

Java9_v2Parser::ShiftExpressionContext* Java9_v2Parser::RelationalExpression4Context::shiftExpression() {
  return getRuleContext<Java9_v2Parser::ShiftExpressionContext>(0);
}

Java9_v2Parser::RelationalExpression4Context::RelationalExpression4Context(RelationalExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::RelationalExpression4Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRelationalExpression4(this);
}
void Java9_v2Parser::RelationalExpression4Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRelationalExpression4(this);
}

antlrcpp::Any Java9_v2Parser::RelationalExpression4Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitRelationalExpression4(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::RelationalExpressionContext* Java9_v2Parser::relationalExpression() {
   return relationalExpression(0);
}

Java9_v2Parser::RelationalExpressionContext* Java9_v2Parser::relationalExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Java9_v2Parser::RelationalExpressionContext *_localctx = _tracker.createInstance<RelationalExpressionContext>(_ctx, parentState);
  Java9_v2Parser::RelationalExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 460;
  enterRecursionRule(_localctx, 460, Java9_v2Parser::RuleRelationalExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    _localctx = _tracker.createInstance<RelationalExpression1Context>(_localctx);
    _ctx = _localctx;
    previousContext = _localctx;

    setState(2831);
    shiftExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(2850);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 325, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(2848);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 324, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<RelationalExpression2Context>(_tracker.createInstance<RelationalExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleRelationalExpression);
          setState(2833);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
          setState(2834);
          match(Java9_v2Parser::LT);
          setState(2835);
          shiftExpression(0);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<RelationalExpression3Context>(_tracker.createInstance<RelationalExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleRelationalExpression);
          setState(2836);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(2837);
          match(Java9_v2Parser::GT);
          setState(2838);
          shiftExpression(0);
          break;
        }

        case 3: {
          auto newContext = _tracker.createInstance<RelationalExpression4Context>(_tracker.createInstance<RelationalExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleRelationalExpression);
          setState(2839);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(2840);
          match(Java9_v2Parser::LE);
          setState(2841);
          shiftExpression(0);
          break;
        }

        case 4: {
          auto newContext = _tracker.createInstance<RelationalExpression5Context>(_tracker.createInstance<RelationalExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleRelationalExpression);
          setState(2842);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(2843);
          match(Java9_v2Parser::GE);
          setState(2844);
          shiftExpression(0);
          break;
        }

        case 5: {
          auto newContext = _tracker.createInstance<RelationalExpression6Context>(_tracker.createInstance<RelationalExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleRelationalExpression);
          setState(2845);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(2846);
          match(Java9_v2Parser::INSTANCEOF);
          setState(2847);
          referenceType();
          break;
        }

        default:
          break;
        } 
      }
      setState(2852);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 325, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ShiftExpressionContext ------------------------------------------------------------------

Java9_v2Parser::ShiftExpressionContext::ShiftExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::ShiftExpressionContext::getRuleIndex() const {
  return Java9_v2Parser::RuleShiftExpression;
}

void Java9_v2Parser::ShiftExpressionContext::copyFrom(ShiftExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ShiftExpression1Context ------------------------------------------------------------------

Java9_v2Parser::AdditiveExpressionContext* Java9_v2Parser::ShiftExpression1Context::additiveExpression() {
  return getRuleContext<Java9_v2Parser::AdditiveExpressionContext>(0);
}

Java9_v2Parser::ShiftExpression1Context::ShiftExpression1Context(ShiftExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ShiftExpression1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShiftExpression1(this);
}
void Java9_v2Parser::ShiftExpression1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShiftExpression1(this);
}

antlrcpp::Any Java9_v2Parser::ShiftExpression1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitShiftExpression1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ShiftExpression3Context ------------------------------------------------------------------

Java9_v2Parser::ShiftExpressionContext* Java9_v2Parser::ShiftExpression3Context::shiftExpression() {
  return getRuleContext<Java9_v2Parser::ShiftExpressionContext>(0);
}

std::vector<tree::TerminalNode *> Java9_v2Parser::ShiftExpression3Context::GT() {
  return getTokens(Java9_v2Parser::GT);
}

tree::TerminalNode* Java9_v2Parser::ShiftExpression3Context::GT(size_t i) {
  return getToken(Java9_v2Parser::GT, i);
}

Java9_v2Parser::AdditiveExpressionContext* Java9_v2Parser::ShiftExpression3Context::additiveExpression() {
  return getRuleContext<Java9_v2Parser::AdditiveExpressionContext>(0);
}

Java9_v2Parser::ShiftExpression3Context::ShiftExpression3Context(ShiftExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ShiftExpression3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShiftExpression3(this);
}
void Java9_v2Parser::ShiftExpression3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShiftExpression3(this);
}

antlrcpp::Any Java9_v2Parser::ShiftExpression3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitShiftExpression3(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ShiftExpression2Context ------------------------------------------------------------------

Java9_v2Parser::ShiftExpressionContext* Java9_v2Parser::ShiftExpression2Context::shiftExpression() {
  return getRuleContext<Java9_v2Parser::ShiftExpressionContext>(0);
}

std::vector<tree::TerminalNode *> Java9_v2Parser::ShiftExpression2Context::LT() {
  return getTokens(Java9_v2Parser::LT);
}

tree::TerminalNode* Java9_v2Parser::ShiftExpression2Context::LT(size_t i) {
  return getToken(Java9_v2Parser::LT, i);
}

Java9_v2Parser::AdditiveExpressionContext* Java9_v2Parser::ShiftExpression2Context::additiveExpression() {
  return getRuleContext<Java9_v2Parser::AdditiveExpressionContext>(0);
}

Java9_v2Parser::ShiftExpression2Context::ShiftExpression2Context(ShiftExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ShiftExpression2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShiftExpression2(this);
}
void Java9_v2Parser::ShiftExpression2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShiftExpression2(this);
}

antlrcpp::Any Java9_v2Parser::ShiftExpression2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitShiftExpression2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ShiftExpression4Context ------------------------------------------------------------------

Java9_v2Parser::ShiftExpressionContext* Java9_v2Parser::ShiftExpression4Context::shiftExpression() {
  return getRuleContext<Java9_v2Parser::ShiftExpressionContext>(0);
}

std::vector<tree::TerminalNode *> Java9_v2Parser::ShiftExpression4Context::GT() {
  return getTokens(Java9_v2Parser::GT);
}

tree::TerminalNode* Java9_v2Parser::ShiftExpression4Context::GT(size_t i) {
  return getToken(Java9_v2Parser::GT, i);
}

Java9_v2Parser::AdditiveExpressionContext* Java9_v2Parser::ShiftExpression4Context::additiveExpression() {
  return getRuleContext<Java9_v2Parser::AdditiveExpressionContext>(0);
}

Java9_v2Parser::ShiftExpression4Context::ShiftExpression4Context(ShiftExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::ShiftExpression4Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShiftExpression4(this);
}
void Java9_v2Parser::ShiftExpression4Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShiftExpression4(this);
}

antlrcpp::Any Java9_v2Parser::ShiftExpression4Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitShiftExpression4(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::ShiftExpressionContext* Java9_v2Parser::shiftExpression() {
   return shiftExpression(0);
}

Java9_v2Parser::ShiftExpressionContext* Java9_v2Parser::shiftExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Java9_v2Parser::ShiftExpressionContext *_localctx = _tracker.createInstance<ShiftExpressionContext>(_ctx, parentState);
  Java9_v2Parser::ShiftExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 462;
  enterRecursionRule(_localctx, 462, Java9_v2Parser::RuleShiftExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    _localctx = _tracker.createInstance<ShiftExpression1Context>(_localctx);
    _ctx = _localctx;
    previousContext = _localctx;

    setState(2854);
    additiveExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(2871);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 327, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(2869);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 326, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<ShiftExpression2Context>(_tracker.createInstance<ShiftExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleShiftExpression);
          setState(2856);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(2857);
          match(Java9_v2Parser::LT);
          setState(2858);
          match(Java9_v2Parser::LT);
          setState(2859);
          additiveExpression(0);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<ShiftExpression3Context>(_tracker.createInstance<ShiftExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleShiftExpression);
          setState(2860);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(2861);
          match(Java9_v2Parser::GT);
          setState(2862);
          match(Java9_v2Parser::GT);
          setState(2863);
          additiveExpression(0);
          break;
        }

        case 3: {
          auto newContext = _tracker.createInstance<ShiftExpression4Context>(_tracker.createInstance<ShiftExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleShiftExpression);
          setState(2864);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(2865);
          match(Java9_v2Parser::GT);
          setState(2866);
          match(Java9_v2Parser::GT);
          setState(2867);
          match(Java9_v2Parser::GT);
          setState(2868);
          additiveExpression(0);
          break;
        }

        default:
          break;
        } 
      }
      setState(2873);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 327, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- AdditiveExpressionContext ------------------------------------------------------------------

Java9_v2Parser::AdditiveExpressionContext::AdditiveExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::AdditiveExpressionContext::getRuleIndex() const {
  return Java9_v2Parser::RuleAdditiveExpression;
}

void Java9_v2Parser::AdditiveExpressionContext::copyFrom(AdditiveExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- AdditiveExpression1Context ------------------------------------------------------------------

Java9_v2Parser::MultiplicativeExpressionContext* Java9_v2Parser::AdditiveExpression1Context::multiplicativeExpression() {
  return getRuleContext<Java9_v2Parser::MultiplicativeExpressionContext>(0);
}

Java9_v2Parser::AdditiveExpression1Context::AdditiveExpression1Context(AdditiveExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::AdditiveExpression1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAdditiveExpression1(this);
}
void Java9_v2Parser::AdditiveExpression1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAdditiveExpression1(this);
}

antlrcpp::Any Java9_v2Parser::AdditiveExpression1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitAdditiveExpression1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AdditiveExpression3Context ------------------------------------------------------------------

Java9_v2Parser::AdditiveExpressionContext* Java9_v2Parser::AdditiveExpression3Context::additiveExpression() {
  return getRuleContext<Java9_v2Parser::AdditiveExpressionContext>(0);
}

tree::TerminalNode* Java9_v2Parser::AdditiveExpression3Context::SUB() {
  return getToken(Java9_v2Parser::SUB, 0);
}

Java9_v2Parser::MultiplicativeExpressionContext* Java9_v2Parser::AdditiveExpression3Context::multiplicativeExpression() {
  return getRuleContext<Java9_v2Parser::MultiplicativeExpressionContext>(0);
}

Java9_v2Parser::AdditiveExpression3Context::AdditiveExpression3Context(AdditiveExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::AdditiveExpression3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAdditiveExpression3(this);
}
void Java9_v2Parser::AdditiveExpression3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAdditiveExpression3(this);
}

antlrcpp::Any Java9_v2Parser::AdditiveExpression3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitAdditiveExpression3(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AdditiveExpressio2Context ------------------------------------------------------------------

Java9_v2Parser::AdditiveExpressionContext* Java9_v2Parser::AdditiveExpressio2Context::additiveExpression() {
  return getRuleContext<Java9_v2Parser::AdditiveExpressionContext>(0);
}

tree::TerminalNode* Java9_v2Parser::AdditiveExpressio2Context::ADD() {
  return getToken(Java9_v2Parser::ADD, 0);
}

Java9_v2Parser::MultiplicativeExpressionContext* Java9_v2Parser::AdditiveExpressio2Context::multiplicativeExpression() {
  return getRuleContext<Java9_v2Parser::MultiplicativeExpressionContext>(0);
}

Java9_v2Parser::AdditiveExpressio2Context::AdditiveExpressio2Context(AdditiveExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::AdditiveExpressio2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAdditiveExpressio2(this);
}
void Java9_v2Parser::AdditiveExpressio2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAdditiveExpressio2(this);
}

antlrcpp::Any Java9_v2Parser::AdditiveExpressio2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitAdditiveExpressio2(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::AdditiveExpressionContext* Java9_v2Parser::additiveExpression() {
   return additiveExpression(0);
}

Java9_v2Parser::AdditiveExpressionContext* Java9_v2Parser::additiveExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Java9_v2Parser::AdditiveExpressionContext *_localctx = _tracker.createInstance<AdditiveExpressionContext>(_ctx, parentState);
  Java9_v2Parser::AdditiveExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 464;
  enterRecursionRule(_localctx, 464, Java9_v2Parser::RuleAdditiveExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    _localctx = _tracker.createInstance<AdditiveExpression1Context>(_localctx);
    _ctx = _localctx;
    previousContext = _localctx;

    setState(2875);
    multiplicativeExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(2885);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 329, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(2883);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 328, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<AdditiveExpressio2Context>(_tracker.createInstance<AdditiveExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleAdditiveExpression);
          setState(2877);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(2878);
          match(Java9_v2Parser::ADD);
          setState(2879);
          multiplicativeExpression(0);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<AdditiveExpression3Context>(_tracker.createInstance<AdditiveExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleAdditiveExpression);
          setState(2880);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(2881);
          match(Java9_v2Parser::SUB);
          setState(2882);
          multiplicativeExpression(0);
          break;
        }

        default:
          break;
        } 
      }
      setState(2887);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 329, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- MultiplicativeExpressionContext ------------------------------------------------------------------

Java9_v2Parser::MultiplicativeExpressionContext::MultiplicativeExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::MultiplicativeExpressionContext::getRuleIndex() const {
  return Java9_v2Parser::RuleMultiplicativeExpression;
}

void Java9_v2Parser::MultiplicativeExpressionContext::copyFrom(MultiplicativeExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- MultiplicativeExpression1Context ------------------------------------------------------------------

Java9_v2Parser::UnaryExpressionContext* Java9_v2Parser::MultiplicativeExpression1Context::unaryExpression() {
  return getRuleContext<Java9_v2Parser::UnaryExpressionContext>(0);
}

Java9_v2Parser::MultiplicativeExpression1Context::MultiplicativeExpression1Context(MultiplicativeExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::MultiplicativeExpression1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiplicativeExpression1(this);
}
void Java9_v2Parser::MultiplicativeExpression1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiplicativeExpression1(this);
}

antlrcpp::Any Java9_v2Parser::MultiplicativeExpression1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitMultiplicativeExpression1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- MultiplicativeExpression4Context ------------------------------------------------------------------

Java9_v2Parser::MultiplicativeExpressionContext* Java9_v2Parser::MultiplicativeExpression4Context::multiplicativeExpression() {
  return getRuleContext<Java9_v2Parser::MultiplicativeExpressionContext>(0);
}

tree::TerminalNode* Java9_v2Parser::MultiplicativeExpression4Context::MOD() {
  return getToken(Java9_v2Parser::MOD, 0);
}

Java9_v2Parser::UnaryExpressionContext* Java9_v2Parser::MultiplicativeExpression4Context::unaryExpression() {
  return getRuleContext<Java9_v2Parser::UnaryExpressionContext>(0);
}

Java9_v2Parser::MultiplicativeExpression4Context::MultiplicativeExpression4Context(MultiplicativeExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::MultiplicativeExpression4Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiplicativeExpression4(this);
}
void Java9_v2Parser::MultiplicativeExpression4Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiplicativeExpression4(this);
}

antlrcpp::Any Java9_v2Parser::MultiplicativeExpression4Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitMultiplicativeExpression4(this);
  else
    return visitor->visitChildren(this);
}
//----------------- MultiplicativeExpression3Context ------------------------------------------------------------------

Java9_v2Parser::MultiplicativeExpressionContext* Java9_v2Parser::MultiplicativeExpression3Context::multiplicativeExpression() {
  return getRuleContext<Java9_v2Parser::MultiplicativeExpressionContext>(0);
}

tree::TerminalNode* Java9_v2Parser::MultiplicativeExpression3Context::DIV() {
  return getToken(Java9_v2Parser::DIV, 0);
}

Java9_v2Parser::UnaryExpressionContext* Java9_v2Parser::MultiplicativeExpression3Context::unaryExpression() {
  return getRuleContext<Java9_v2Parser::UnaryExpressionContext>(0);
}

Java9_v2Parser::MultiplicativeExpression3Context::MultiplicativeExpression3Context(MultiplicativeExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::MultiplicativeExpression3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiplicativeExpression3(this);
}
void Java9_v2Parser::MultiplicativeExpression3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiplicativeExpression3(this);
}

antlrcpp::Any Java9_v2Parser::MultiplicativeExpression3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitMultiplicativeExpression3(this);
  else
    return visitor->visitChildren(this);
}
//----------------- MultiplicativeExpression2Context ------------------------------------------------------------------

Java9_v2Parser::MultiplicativeExpressionContext* Java9_v2Parser::MultiplicativeExpression2Context::multiplicativeExpression() {
  return getRuleContext<Java9_v2Parser::MultiplicativeExpressionContext>(0);
}

tree::TerminalNode* Java9_v2Parser::MultiplicativeExpression2Context::MUL() {
  return getToken(Java9_v2Parser::MUL, 0);
}

Java9_v2Parser::UnaryExpressionContext* Java9_v2Parser::MultiplicativeExpression2Context::unaryExpression() {
  return getRuleContext<Java9_v2Parser::UnaryExpressionContext>(0);
}

Java9_v2Parser::MultiplicativeExpression2Context::MultiplicativeExpression2Context(MultiplicativeExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::MultiplicativeExpression2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiplicativeExpression2(this);
}
void Java9_v2Parser::MultiplicativeExpression2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiplicativeExpression2(this);
}

antlrcpp::Any Java9_v2Parser::MultiplicativeExpression2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitMultiplicativeExpression2(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::MultiplicativeExpressionContext* Java9_v2Parser::multiplicativeExpression() {
   return multiplicativeExpression(0);
}

Java9_v2Parser::MultiplicativeExpressionContext* Java9_v2Parser::multiplicativeExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Java9_v2Parser::MultiplicativeExpressionContext *_localctx = _tracker.createInstance<MultiplicativeExpressionContext>(_ctx, parentState);
  Java9_v2Parser::MultiplicativeExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 466;
  enterRecursionRule(_localctx, 466, Java9_v2Parser::RuleMultiplicativeExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    _localctx = _tracker.createInstance<MultiplicativeExpression1Context>(_localctx);
    _ctx = _localctx;
    previousContext = _localctx;

    setState(2889);
    unaryExpression();
    _ctx->stop = _input->LT(-1);
    setState(2902);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 331, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(2900);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 330, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<MultiplicativeExpression2Context>(_tracker.createInstance<MultiplicativeExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleMultiplicativeExpression);
          setState(2891);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(2892);
          match(Java9_v2Parser::MUL);
          setState(2893);
          unaryExpression();
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<MultiplicativeExpression3Context>(_tracker.createInstance<MultiplicativeExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleMultiplicativeExpression);
          setState(2894);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(2895);
          match(Java9_v2Parser::DIV);
          setState(2896);
          unaryExpression();
          break;
        }

        case 3: {
          auto newContext = _tracker.createInstance<MultiplicativeExpression4Context>(_tracker.createInstance<MultiplicativeExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleMultiplicativeExpression);
          setState(2897);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(2898);
          match(Java9_v2Parser::MOD);
          setState(2899);
          unaryExpression();
          break;
        }

        default:
          break;
        } 
      }
      setState(2904);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 331, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- UnaryExpressionContext ------------------------------------------------------------------

Java9_v2Parser::UnaryExpressionContext::UnaryExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::UnaryExpressionContext::getRuleIndex() const {
  return Java9_v2Parser::RuleUnaryExpression;
}

void Java9_v2Parser::UnaryExpressionContext::copyFrom(UnaryExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- UnaryExpression2Context ------------------------------------------------------------------

Java9_v2Parser::PreDecrementExpressionContext* Java9_v2Parser::UnaryExpression2Context::preDecrementExpression() {
  return getRuleContext<Java9_v2Parser::PreDecrementExpressionContext>(0);
}

Java9_v2Parser::UnaryExpression2Context::UnaryExpression2Context(UnaryExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::UnaryExpression2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnaryExpression2(this);
}
void Java9_v2Parser::UnaryExpression2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnaryExpression2(this);
}

antlrcpp::Any Java9_v2Parser::UnaryExpression2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitUnaryExpression2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- UnaryExpression1Context ------------------------------------------------------------------

Java9_v2Parser::PreIncrementExpressionContext* Java9_v2Parser::UnaryExpression1Context::preIncrementExpression() {
  return getRuleContext<Java9_v2Parser::PreIncrementExpressionContext>(0);
}

Java9_v2Parser::UnaryExpression1Context::UnaryExpression1Context(UnaryExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::UnaryExpression1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnaryExpression1(this);
}
void Java9_v2Parser::UnaryExpression1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnaryExpression1(this);
}

antlrcpp::Any Java9_v2Parser::UnaryExpression1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitUnaryExpression1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- UnaryExpression5Context ------------------------------------------------------------------

Java9_v2Parser::UnaryExpressionNotPlusMinusContext* Java9_v2Parser::UnaryExpression5Context::unaryExpressionNotPlusMinus() {
  return getRuleContext<Java9_v2Parser::UnaryExpressionNotPlusMinusContext>(0);
}

Java9_v2Parser::UnaryExpression5Context::UnaryExpression5Context(UnaryExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::UnaryExpression5Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnaryExpression5(this);
}
void Java9_v2Parser::UnaryExpression5Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnaryExpression5(this);
}

antlrcpp::Any Java9_v2Parser::UnaryExpression5Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitUnaryExpression5(this);
  else
    return visitor->visitChildren(this);
}
//----------------- UnaryExpression4Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::UnaryExpression4Context::SUB() {
  return getToken(Java9_v2Parser::SUB, 0);
}

Java9_v2Parser::UnaryExpressionContext* Java9_v2Parser::UnaryExpression4Context::unaryExpression() {
  return getRuleContext<Java9_v2Parser::UnaryExpressionContext>(0);
}

Java9_v2Parser::UnaryExpression4Context::UnaryExpression4Context(UnaryExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::UnaryExpression4Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnaryExpression4(this);
}
void Java9_v2Parser::UnaryExpression4Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnaryExpression4(this);
}

antlrcpp::Any Java9_v2Parser::UnaryExpression4Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitUnaryExpression4(this);
  else
    return visitor->visitChildren(this);
}
//----------------- UnaryExpression3Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::UnaryExpression3Context::ADD() {
  return getToken(Java9_v2Parser::ADD, 0);
}

Java9_v2Parser::UnaryExpressionContext* Java9_v2Parser::UnaryExpression3Context::unaryExpression() {
  return getRuleContext<Java9_v2Parser::UnaryExpressionContext>(0);
}

Java9_v2Parser::UnaryExpression3Context::UnaryExpression3Context(UnaryExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::UnaryExpression3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnaryExpression3(this);
}
void Java9_v2Parser::UnaryExpression3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnaryExpression3(this);
}

antlrcpp::Any Java9_v2Parser::UnaryExpression3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitUnaryExpression3(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::UnaryExpressionContext* Java9_v2Parser::unaryExpression() {
  UnaryExpressionContext *_localctx = _tracker.createInstance<UnaryExpressionContext>(_ctx, getState());
  enterRule(_localctx, 468, Java9_v2Parser::RuleUnaryExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2912);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Java9_v2Parser::INC: {
        _localctx = dynamic_cast<UnaryExpressionContext *>(_tracker.createInstance<Java9_v2Parser::UnaryExpression1Context>(_localctx));
        enterOuterAlt(_localctx, 1);
        setState(2905);
        preIncrementExpression();
        break;
      }

      case Java9_v2Parser::DEC: {
        _localctx = dynamic_cast<UnaryExpressionContext *>(_tracker.createInstance<Java9_v2Parser::UnaryExpression2Context>(_localctx));
        enterOuterAlt(_localctx, 2);
        setState(2906);
        preDecrementExpression();
        break;
      }

      case Java9_v2Parser::ADD: {
        _localctx = dynamic_cast<UnaryExpressionContext *>(_tracker.createInstance<Java9_v2Parser::UnaryExpression3Context>(_localctx));
        enterOuterAlt(_localctx, 3);
        setState(2907);
        match(Java9_v2Parser::ADD);
        setState(2908);
        unaryExpression();
        break;
      }

      case Java9_v2Parser::SUB: {
        _localctx = dynamic_cast<UnaryExpressionContext *>(_tracker.createInstance<Java9_v2Parser::UnaryExpression4Context>(_localctx));
        enterOuterAlt(_localctx, 4);
        setState(2909);
        match(Java9_v2Parser::SUB);
        setState(2910);
        unaryExpression();
        break;
      }

      case Java9_v2Parser::T__0:
      case Java9_v2Parser::T__1:
      case Java9_v2Parser::T__2:
      case Java9_v2Parser::T__3:
      case Java9_v2Parser::T__4:
      case Java9_v2Parser::T__5:
      case Java9_v2Parser::T__6:
      case Java9_v2Parser::T__7:
      case Java9_v2Parser::T__8:
      case Java9_v2Parser::BOOLEAN:
      case Java9_v2Parser::BYTE:
      case Java9_v2Parser::CHAR:
      case Java9_v2Parser::DOUBLE:
      case Java9_v2Parser::FLOAT:
      case Java9_v2Parser::INT:
      case Java9_v2Parser::LONG:
      case Java9_v2Parser::NEW:
      case Java9_v2Parser::SHORT:
      case Java9_v2Parser::SUPER:
      case Java9_v2Parser::THIS:
      case Java9_v2Parser::VOID:
      case Java9_v2Parser::IntegerLiteral:
      case Java9_v2Parser::FloatingPointLiteral:
      case Java9_v2Parser::BooleanLiteral:
      case Java9_v2Parser::CharacterLiteral:
      case Java9_v2Parser::StringLiteral:
      case Java9_v2Parser::NullLiteral:
      case Java9_v2Parser::LPAREN:
      case Java9_v2Parser::AT:
      case Java9_v2Parser::BANG:
      case Java9_v2Parser::TILDE:
      case Java9_v2Parser::Identifier: {
        _localctx = dynamic_cast<UnaryExpressionContext *>(_tracker.createInstance<Java9_v2Parser::UnaryExpression5Context>(_localctx));
        enterOuterAlt(_localctx, 5);
        setState(2911);
        unaryExpressionNotPlusMinus();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PreIncrementExpressionContext ------------------------------------------------------------------

Java9_v2Parser::PreIncrementExpressionContext::PreIncrementExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::PreIncrementExpressionContext::INC() {
  return getToken(Java9_v2Parser::INC, 0);
}

Java9_v2Parser::UnaryExpressionContext* Java9_v2Parser::PreIncrementExpressionContext::unaryExpression() {
  return getRuleContext<Java9_v2Parser::UnaryExpressionContext>(0);
}


size_t Java9_v2Parser::PreIncrementExpressionContext::getRuleIndex() const {
  return Java9_v2Parser::RulePreIncrementExpression;
}

void Java9_v2Parser::PreIncrementExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPreIncrementExpression(this);
}

void Java9_v2Parser::PreIncrementExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPreIncrementExpression(this);
}


antlrcpp::Any Java9_v2Parser::PreIncrementExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPreIncrementExpression(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::PreIncrementExpressionContext* Java9_v2Parser::preIncrementExpression() {
  PreIncrementExpressionContext *_localctx = _tracker.createInstance<PreIncrementExpressionContext>(_ctx, getState());
  enterRule(_localctx, 470, Java9_v2Parser::RulePreIncrementExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2914);
    match(Java9_v2Parser::INC);
    setState(2915);
    unaryExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PreDecrementExpressionContext ------------------------------------------------------------------

Java9_v2Parser::PreDecrementExpressionContext::PreDecrementExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::PreDecrementExpressionContext::DEC() {
  return getToken(Java9_v2Parser::DEC, 0);
}

Java9_v2Parser::UnaryExpressionContext* Java9_v2Parser::PreDecrementExpressionContext::unaryExpression() {
  return getRuleContext<Java9_v2Parser::UnaryExpressionContext>(0);
}


size_t Java9_v2Parser::PreDecrementExpressionContext::getRuleIndex() const {
  return Java9_v2Parser::RulePreDecrementExpression;
}

void Java9_v2Parser::PreDecrementExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPreDecrementExpression(this);
}

void Java9_v2Parser::PreDecrementExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPreDecrementExpression(this);
}


antlrcpp::Any Java9_v2Parser::PreDecrementExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPreDecrementExpression(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::PreDecrementExpressionContext* Java9_v2Parser::preDecrementExpression() {
  PreDecrementExpressionContext *_localctx = _tracker.createInstance<PreDecrementExpressionContext>(_ctx, getState());
  enterRule(_localctx, 472, Java9_v2Parser::RulePreDecrementExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2917);
    match(Java9_v2Parser::DEC);
    setState(2918);
    unaryExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnaryExpressionNotPlusMinusContext ------------------------------------------------------------------

Java9_v2Parser::UnaryExpressionNotPlusMinusContext::UnaryExpressionNotPlusMinusContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::UnaryExpressionNotPlusMinusContext::getRuleIndex() const {
  return Java9_v2Parser::RuleUnaryExpressionNotPlusMinus;
}

void Java9_v2Parser::UnaryExpressionNotPlusMinusContext::copyFrom(UnaryExpressionNotPlusMinusContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- UnaryExpressionNotPlusMinus4Context ------------------------------------------------------------------

Java9_v2Parser::CastExpressionContext* Java9_v2Parser::UnaryExpressionNotPlusMinus4Context::castExpression() {
  return getRuleContext<Java9_v2Parser::CastExpressionContext>(0);
}

Java9_v2Parser::UnaryExpressionNotPlusMinus4Context::UnaryExpressionNotPlusMinus4Context(UnaryExpressionNotPlusMinusContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::UnaryExpressionNotPlusMinus4Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnaryExpressionNotPlusMinus4(this);
}
void Java9_v2Parser::UnaryExpressionNotPlusMinus4Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnaryExpressionNotPlusMinus4(this);
}

antlrcpp::Any Java9_v2Parser::UnaryExpressionNotPlusMinus4Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitUnaryExpressionNotPlusMinus4(this);
  else
    return visitor->visitChildren(this);
}
//----------------- UnaryExpressionNotPlusMinus3Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::UnaryExpressionNotPlusMinus3Context::BANG() {
  return getToken(Java9_v2Parser::BANG, 0);
}

Java9_v2Parser::UnaryExpressionContext* Java9_v2Parser::UnaryExpressionNotPlusMinus3Context::unaryExpression() {
  return getRuleContext<Java9_v2Parser::UnaryExpressionContext>(0);
}

Java9_v2Parser::UnaryExpressionNotPlusMinus3Context::UnaryExpressionNotPlusMinus3Context(UnaryExpressionNotPlusMinusContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::UnaryExpressionNotPlusMinus3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnaryExpressionNotPlusMinus3(this);
}
void Java9_v2Parser::UnaryExpressionNotPlusMinus3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnaryExpressionNotPlusMinus3(this);
}

antlrcpp::Any Java9_v2Parser::UnaryExpressionNotPlusMinus3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitUnaryExpressionNotPlusMinus3(this);
  else
    return visitor->visitChildren(this);
}
//----------------- UnaryExpressionNotPlusMinus2Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::UnaryExpressionNotPlusMinus2Context::TILDE() {
  return getToken(Java9_v2Parser::TILDE, 0);
}

Java9_v2Parser::UnaryExpressionContext* Java9_v2Parser::UnaryExpressionNotPlusMinus2Context::unaryExpression() {
  return getRuleContext<Java9_v2Parser::UnaryExpressionContext>(0);
}

Java9_v2Parser::UnaryExpressionNotPlusMinus2Context::UnaryExpressionNotPlusMinus2Context(UnaryExpressionNotPlusMinusContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::UnaryExpressionNotPlusMinus2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnaryExpressionNotPlusMinus2(this);
}
void Java9_v2Parser::UnaryExpressionNotPlusMinus2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnaryExpressionNotPlusMinus2(this);
}

antlrcpp::Any Java9_v2Parser::UnaryExpressionNotPlusMinus2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitUnaryExpressionNotPlusMinus2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- UnaryExpressionNotPlusMinus1Context ------------------------------------------------------------------

Java9_v2Parser::PostfixExpressionContext* Java9_v2Parser::UnaryExpressionNotPlusMinus1Context::postfixExpression() {
  return getRuleContext<Java9_v2Parser::PostfixExpressionContext>(0);
}

Java9_v2Parser::UnaryExpressionNotPlusMinus1Context::UnaryExpressionNotPlusMinus1Context(UnaryExpressionNotPlusMinusContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::UnaryExpressionNotPlusMinus1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnaryExpressionNotPlusMinus1(this);
}
void Java9_v2Parser::UnaryExpressionNotPlusMinus1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnaryExpressionNotPlusMinus1(this);
}

antlrcpp::Any Java9_v2Parser::UnaryExpressionNotPlusMinus1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitUnaryExpressionNotPlusMinus1(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::UnaryExpressionNotPlusMinusContext* Java9_v2Parser::unaryExpressionNotPlusMinus() {
  UnaryExpressionNotPlusMinusContext *_localctx = _tracker.createInstance<UnaryExpressionNotPlusMinusContext>(_ctx, getState());
  enterRule(_localctx, 474, Java9_v2Parser::RuleUnaryExpressionNotPlusMinus);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2926);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 333, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<UnaryExpressionNotPlusMinusContext *>(_tracker.createInstance<Java9_v2Parser::UnaryExpressionNotPlusMinus1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(2920);
      postfixExpression();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<UnaryExpressionNotPlusMinusContext *>(_tracker.createInstance<Java9_v2Parser::UnaryExpressionNotPlusMinus2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(2921);
      match(Java9_v2Parser::TILDE);
      setState(2922);
      unaryExpression();
      break;
    }

    case 3: {
      _localctx = dynamic_cast<UnaryExpressionNotPlusMinusContext *>(_tracker.createInstance<Java9_v2Parser::UnaryExpressionNotPlusMinus3Context>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(2923);
      match(Java9_v2Parser::BANG);
      setState(2924);
      unaryExpression();
      break;
    }

    case 4: {
      _localctx = dynamic_cast<UnaryExpressionNotPlusMinusContext *>(_tracker.createInstance<Java9_v2Parser::UnaryExpressionNotPlusMinus4Context>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(2925);
      castExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PostfixExpressionContext ------------------------------------------------------------------

Java9_v2Parser::PostfixExpressionContext::PostfixExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::PrimaryContext* Java9_v2Parser::PostfixExpressionContext::primary() {
  return getRuleContext<Java9_v2Parser::PrimaryContext>(0);
}

Java9_v2Parser::ExpressionNameContext* Java9_v2Parser::PostfixExpressionContext::expressionName() {
  return getRuleContext<Java9_v2Parser::ExpressionNameContext>(0);
}

std::vector<Java9_v2Parser::PostIncrementExpression_lf_postfixExpressionContext *> Java9_v2Parser::PostfixExpressionContext::postIncrementExpression_lf_postfixExpression() {
  return getRuleContexts<Java9_v2Parser::PostIncrementExpression_lf_postfixExpressionContext>();
}

Java9_v2Parser::PostIncrementExpression_lf_postfixExpressionContext* Java9_v2Parser::PostfixExpressionContext::postIncrementExpression_lf_postfixExpression(size_t i) {
  return getRuleContext<Java9_v2Parser::PostIncrementExpression_lf_postfixExpressionContext>(i);
}

std::vector<Java9_v2Parser::PostDecrementExpression_lf_postfixExpressionContext *> Java9_v2Parser::PostfixExpressionContext::postDecrementExpression_lf_postfixExpression() {
  return getRuleContexts<Java9_v2Parser::PostDecrementExpression_lf_postfixExpressionContext>();
}

Java9_v2Parser::PostDecrementExpression_lf_postfixExpressionContext* Java9_v2Parser::PostfixExpressionContext::postDecrementExpression_lf_postfixExpression(size_t i) {
  return getRuleContext<Java9_v2Parser::PostDecrementExpression_lf_postfixExpressionContext>(i);
}


size_t Java9_v2Parser::PostfixExpressionContext::getRuleIndex() const {
  return Java9_v2Parser::RulePostfixExpression;
}

void Java9_v2Parser::PostfixExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPostfixExpression(this);
}

void Java9_v2Parser::PostfixExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPostfixExpression(this);
}


antlrcpp::Any Java9_v2Parser::PostfixExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPostfixExpression(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::PostfixExpressionContext* Java9_v2Parser::postfixExpression() {
  PostfixExpressionContext *_localctx = _tracker.createInstance<PostfixExpressionContext>(_ctx, getState());
  enterRule(_localctx, 476, Java9_v2Parser::RulePostfixExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2930);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 334, _ctx)) {
    case 1: {
      setState(2928);
      primary();
      break;
    }

    case 2: {
      setState(2929);
      expressionName();
      break;
    }

    default:
      break;
    }
    setState(2936);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 336, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2934);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case Java9_v2Parser::INC: {
            setState(2932);
            postIncrementExpression_lf_postfixExpression();
            break;
          }

          case Java9_v2Parser::DEC: {
            setState(2933);
            postDecrementExpression_lf_postfixExpression();
            break;
          }

        default:
          throw NoViableAltException(this);
        } 
      }
      setState(2938);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 336, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PostIncrementExpressionContext ------------------------------------------------------------------

Java9_v2Parser::PostIncrementExpressionContext::PostIncrementExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::PostfixExpressionContext* Java9_v2Parser::PostIncrementExpressionContext::postfixExpression() {
  return getRuleContext<Java9_v2Parser::PostfixExpressionContext>(0);
}

tree::TerminalNode* Java9_v2Parser::PostIncrementExpressionContext::INC() {
  return getToken(Java9_v2Parser::INC, 0);
}


size_t Java9_v2Parser::PostIncrementExpressionContext::getRuleIndex() const {
  return Java9_v2Parser::RulePostIncrementExpression;
}

void Java9_v2Parser::PostIncrementExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPostIncrementExpression(this);
}

void Java9_v2Parser::PostIncrementExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPostIncrementExpression(this);
}


antlrcpp::Any Java9_v2Parser::PostIncrementExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPostIncrementExpression(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::PostIncrementExpressionContext* Java9_v2Parser::postIncrementExpression() {
  PostIncrementExpressionContext *_localctx = _tracker.createInstance<PostIncrementExpressionContext>(_ctx, getState());
  enterRule(_localctx, 478, Java9_v2Parser::RulePostIncrementExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2939);
    postfixExpression();
    setState(2940);
    match(Java9_v2Parser::INC);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PostIncrementExpression_lf_postfixExpressionContext ------------------------------------------------------------------

Java9_v2Parser::PostIncrementExpression_lf_postfixExpressionContext::PostIncrementExpression_lf_postfixExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::PostIncrementExpression_lf_postfixExpressionContext::INC() {
  return getToken(Java9_v2Parser::INC, 0);
}


size_t Java9_v2Parser::PostIncrementExpression_lf_postfixExpressionContext::getRuleIndex() const {
  return Java9_v2Parser::RulePostIncrementExpression_lf_postfixExpression;
}

void Java9_v2Parser::PostIncrementExpression_lf_postfixExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPostIncrementExpression_lf_postfixExpression(this);
}

void Java9_v2Parser::PostIncrementExpression_lf_postfixExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPostIncrementExpression_lf_postfixExpression(this);
}


antlrcpp::Any Java9_v2Parser::PostIncrementExpression_lf_postfixExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPostIncrementExpression_lf_postfixExpression(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::PostIncrementExpression_lf_postfixExpressionContext* Java9_v2Parser::postIncrementExpression_lf_postfixExpression() {
  PostIncrementExpression_lf_postfixExpressionContext *_localctx = _tracker.createInstance<PostIncrementExpression_lf_postfixExpressionContext>(_ctx, getState());
  enterRule(_localctx, 480, Java9_v2Parser::RulePostIncrementExpression_lf_postfixExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2942);
    match(Java9_v2Parser::INC);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PostDecrementExpressionContext ------------------------------------------------------------------

Java9_v2Parser::PostDecrementExpressionContext::PostDecrementExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java9_v2Parser::PostfixExpressionContext* Java9_v2Parser::PostDecrementExpressionContext::postfixExpression() {
  return getRuleContext<Java9_v2Parser::PostfixExpressionContext>(0);
}

tree::TerminalNode* Java9_v2Parser::PostDecrementExpressionContext::DEC() {
  return getToken(Java9_v2Parser::DEC, 0);
}


size_t Java9_v2Parser::PostDecrementExpressionContext::getRuleIndex() const {
  return Java9_v2Parser::RulePostDecrementExpression;
}

void Java9_v2Parser::PostDecrementExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPostDecrementExpression(this);
}

void Java9_v2Parser::PostDecrementExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPostDecrementExpression(this);
}


antlrcpp::Any Java9_v2Parser::PostDecrementExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPostDecrementExpression(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::PostDecrementExpressionContext* Java9_v2Parser::postDecrementExpression() {
  PostDecrementExpressionContext *_localctx = _tracker.createInstance<PostDecrementExpressionContext>(_ctx, getState());
  enterRule(_localctx, 482, Java9_v2Parser::RulePostDecrementExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2944);
    postfixExpression();
    setState(2945);
    match(Java9_v2Parser::DEC);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PostDecrementExpression_lf_postfixExpressionContext ------------------------------------------------------------------

Java9_v2Parser::PostDecrementExpression_lf_postfixExpressionContext::PostDecrementExpression_lf_postfixExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::PostDecrementExpression_lf_postfixExpressionContext::DEC() {
  return getToken(Java9_v2Parser::DEC, 0);
}


size_t Java9_v2Parser::PostDecrementExpression_lf_postfixExpressionContext::getRuleIndex() const {
  return Java9_v2Parser::RulePostDecrementExpression_lf_postfixExpression;
}

void Java9_v2Parser::PostDecrementExpression_lf_postfixExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPostDecrementExpression_lf_postfixExpression(this);
}

void Java9_v2Parser::PostDecrementExpression_lf_postfixExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPostDecrementExpression_lf_postfixExpression(this);
}


antlrcpp::Any Java9_v2Parser::PostDecrementExpression_lf_postfixExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitPostDecrementExpression_lf_postfixExpression(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::PostDecrementExpression_lf_postfixExpressionContext* Java9_v2Parser::postDecrementExpression_lf_postfixExpression() {
  PostDecrementExpression_lf_postfixExpressionContext *_localctx = _tracker.createInstance<PostDecrementExpression_lf_postfixExpressionContext>(_ctx, getState());
  enterRule(_localctx, 484, Java9_v2Parser::RulePostDecrementExpression_lf_postfixExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2947);
    match(Java9_v2Parser::DEC);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CastExpressionContext ------------------------------------------------------------------

Java9_v2Parser::CastExpressionContext::CastExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Java9_v2Parser::CastExpressionContext::getRuleIndex() const {
  return Java9_v2Parser::RuleCastExpression;
}

void Java9_v2Parser::CastExpressionContext::copyFrom(CastExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- CastExpression3Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::CastExpression3Context::LPAREN() {
  return getToken(Java9_v2Parser::LPAREN, 0);
}

Java9_v2Parser::ReferenceTypeContext* Java9_v2Parser::CastExpression3Context::referenceType() {
  return getRuleContext<Java9_v2Parser::ReferenceTypeContext>(0);
}

tree::TerminalNode* Java9_v2Parser::CastExpression3Context::RPAREN() {
  return getToken(Java9_v2Parser::RPAREN, 0);
}

Java9_v2Parser::LambdaExpressionContext* Java9_v2Parser::CastExpression3Context::lambdaExpression() {
  return getRuleContext<Java9_v2Parser::LambdaExpressionContext>(0);
}

std::vector<Java9_v2Parser::AdditionalBoundContext *> Java9_v2Parser::CastExpression3Context::additionalBound() {
  return getRuleContexts<Java9_v2Parser::AdditionalBoundContext>();
}

Java9_v2Parser::AdditionalBoundContext* Java9_v2Parser::CastExpression3Context::additionalBound(size_t i) {
  return getRuleContext<Java9_v2Parser::AdditionalBoundContext>(i);
}

Java9_v2Parser::CastExpression3Context::CastExpression3Context(CastExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::CastExpression3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCastExpression3(this);
}
void Java9_v2Parser::CastExpression3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCastExpression3(this);
}

antlrcpp::Any Java9_v2Parser::CastExpression3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitCastExpression3(this);
  else
    return visitor->visitChildren(this);
}
//----------------- CastExpression1Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::CastExpression1Context::LPAREN() {
  return getToken(Java9_v2Parser::LPAREN, 0);
}

Java9_v2Parser::PrimitiveTypeContext* Java9_v2Parser::CastExpression1Context::primitiveType() {
  return getRuleContext<Java9_v2Parser::PrimitiveTypeContext>(0);
}

tree::TerminalNode* Java9_v2Parser::CastExpression1Context::RPAREN() {
  return getToken(Java9_v2Parser::RPAREN, 0);
}

Java9_v2Parser::UnaryExpressionContext* Java9_v2Parser::CastExpression1Context::unaryExpression() {
  return getRuleContext<Java9_v2Parser::UnaryExpressionContext>(0);
}

Java9_v2Parser::CastExpression1Context::CastExpression1Context(CastExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::CastExpression1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCastExpression1(this);
}
void Java9_v2Parser::CastExpression1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCastExpression1(this);
}

antlrcpp::Any Java9_v2Parser::CastExpression1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitCastExpression1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- CastExpression2Context ------------------------------------------------------------------

tree::TerminalNode* Java9_v2Parser::CastExpression2Context::LPAREN() {
  return getToken(Java9_v2Parser::LPAREN, 0);
}

Java9_v2Parser::ReferenceTypeContext* Java9_v2Parser::CastExpression2Context::referenceType() {
  return getRuleContext<Java9_v2Parser::ReferenceTypeContext>(0);
}

tree::TerminalNode* Java9_v2Parser::CastExpression2Context::RPAREN() {
  return getToken(Java9_v2Parser::RPAREN, 0);
}

Java9_v2Parser::UnaryExpressionNotPlusMinusContext* Java9_v2Parser::CastExpression2Context::unaryExpressionNotPlusMinus() {
  return getRuleContext<Java9_v2Parser::UnaryExpressionNotPlusMinusContext>(0);
}

std::vector<Java9_v2Parser::AdditionalBoundContext *> Java9_v2Parser::CastExpression2Context::additionalBound() {
  return getRuleContexts<Java9_v2Parser::AdditionalBoundContext>();
}

Java9_v2Parser::AdditionalBoundContext* Java9_v2Parser::CastExpression2Context::additionalBound(size_t i) {
  return getRuleContext<Java9_v2Parser::AdditionalBoundContext>(i);
}

Java9_v2Parser::CastExpression2Context::CastExpression2Context(CastExpressionContext *ctx) { copyFrom(ctx); }

void Java9_v2Parser::CastExpression2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCastExpression2(this);
}
void Java9_v2Parser::CastExpression2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCastExpression2(this);
}

antlrcpp::Any Java9_v2Parser::CastExpression2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitCastExpression2(this);
  else
    return visitor->visitChildren(this);
}
Java9_v2Parser::CastExpressionContext* Java9_v2Parser::castExpression() {
  CastExpressionContext *_localctx = _tracker.createInstance<CastExpressionContext>(_ctx, getState());
  enterRule(_localctx, 486, Java9_v2Parser::RuleCastExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2976);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 339, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<CastExpressionContext *>(_tracker.createInstance<Java9_v2Parser::CastExpression1Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(2949);
      match(Java9_v2Parser::LPAREN);
      setState(2950);
      primitiveType();
      setState(2951);
      match(Java9_v2Parser::RPAREN);
      setState(2952);
      unaryExpression();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<CastExpressionContext *>(_tracker.createInstance<Java9_v2Parser::CastExpression2Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(2954);
      match(Java9_v2Parser::LPAREN);
      setState(2955);
      referenceType();
      setState(2959);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Java9_v2Parser::BITAND) {
        setState(2956);
        additionalBound();
        setState(2961);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2962);
      match(Java9_v2Parser::RPAREN);
      setState(2963);
      unaryExpressionNotPlusMinus();
      break;
    }

    case 3: {
      _localctx = dynamic_cast<CastExpressionContext *>(_tracker.createInstance<Java9_v2Parser::CastExpression3Context>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(2965);
      match(Java9_v2Parser::LPAREN);
      setState(2966);
      referenceType();
      setState(2970);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Java9_v2Parser::BITAND) {
        setState(2967);
        additionalBound();
        setState(2972);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2973);
      match(Java9_v2Parser::RPAREN);
      setState(2974);
      lambdaExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierContext ------------------------------------------------------------------

Java9_v2Parser::IdentifierContext::IdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java9_v2Parser::IdentifierContext::Identifier() {
  return getToken(Java9_v2Parser::Identifier, 0);
}


size_t Java9_v2Parser::IdentifierContext::getRuleIndex() const {
  return Java9_v2Parser::RuleIdentifier;
}

void Java9_v2Parser::IdentifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIdentifier(this);
}

void Java9_v2Parser::IdentifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Java9_v2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIdentifier(this);
}


antlrcpp::Any Java9_v2Parser::IdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java9_v2Visitor*>(visitor))
    return parserVisitor->visitIdentifier(this);
  else
    return visitor->visitChildren(this);
}

Java9_v2Parser::IdentifierContext* Java9_v2Parser::identifier() {
  IdentifierContext *_localctx = _tracker.createInstance<IdentifierContext>(_ctx, getState());
  enterRule(_localctx, 488, Java9_v2Parser::RuleIdentifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2978);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << Java9_v2Parser::T__0)
      | (1ULL << Java9_v2Parser::T__1)
      | (1ULL << Java9_v2Parser::T__2)
      | (1ULL << Java9_v2Parser::T__3)
      | (1ULL << Java9_v2Parser::T__4)
      | (1ULL << Java9_v2Parser::T__5)
      | (1ULL << Java9_v2Parser::T__6)
      | (1ULL << Java9_v2Parser::T__7)
      | (1ULL << Java9_v2Parser::T__8))) != 0) || _la == Java9_v2Parser::Identifier)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool Java9_v2Parser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 25: return moduleNameSempred(dynamic_cast<ModuleNameContext *>(context), predicateIndex);
    case 26: return packageNameSempred(dynamic_cast<PackageNameContext *>(context), predicateIndex);
    case 28: return packageOrTypeNameSempred(dynamic_cast<PackageOrTypeNameContext *>(context), predicateIndex);
    case 31: return ambiguousNameSempred(dynamic_cast<AmbiguousNameContext *>(context), predicateIndex);
    case 224: return conditionalOrExpressionSempred(dynamic_cast<ConditionalOrExpressionContext *>(context), predicateIndex);
    case 225: return conditionalAndExpressionSempred(dynamic_cast<ConditionalAndExpressionContext *>(context), predicateIndex);
    case 226: return inclusiveOrExpressionSempred(dynamic_cast<InclusiveOrExpressionContext *>(context), predicateIndex);
    case 227: return exclusiveOrExpressionSempred(dynamic_cast<ExclusiveOrExpressionContext *>(context), predicateIndex);
    case 228: return andExpressionSempred(dynamic_cast<AndExpressionContext *>(context), predicateIndex);
    case 229: return equalityExpressionSempred(dynamic_cast<EqualityExpressionContext *>(context), predicateIndex);
    case 230: return relationalExpressionSempred(dynamic_cast<RelationalExpressionContext *>(context), predicateIndex);
    case 231: return shiftExpressionSempred(dynamic_cast<ShiftExpressionContext *>(context), predicateIndex);
    case 232: return additiveExpressionSempred(dynamic_cast<AdditiveExpressionContext *>(context), predicateIndex);
    case 233: return multiplicativeExpressionSempred(dynamic_cast<MultiplicativeExpressionContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool Java9_v2Parser::moduleNameSempred(ModuleNameContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool Java9_v2Parser::packageNameSempred(PackageNameContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 1: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool Java9_v2Parser::packageOrTypeNameSempred(PackageOrTypeNameContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 2: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool Java9_v2Parser::ambiguousNameSempred(AmbiguousNameContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 3: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool Java9_v2Parser::conditionalOrExpressionSempred(ConditionalOrExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 4: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool Java9_v2Parser::conditionalAndExpressionSempred(ConditionalAndExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 5: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool Java9_v2Parser::inclusiveOrExpressionSempred(InclusiveOrExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 6: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool Java9_v2Parser::exclusiveOrExpressionSempred(ExclusiveOrExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 7: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool Java9_v2Parser::andExpressionSempred(AndExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 8: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool Java9_v2Parser::equalityExpressionSempred(EqualityExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 9: return precpred(_ctx, 2);
    case 10: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool Java9_v2Parser::relationalExpressionSempred(RelationalExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 11: return precpred(_ctx, 5);
    case 12: return precpred(_ctx, 4);
    case 13: return precpred(_ctx, 3);
    case 14: return precpred(_ctx, 2);
    case 15: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool Java9_v2Parser::shiftExpressionSempred(ShiftExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 16: return precpred(_ctx, 3);
    case 17: return precpred(_ctx, 2);
    case 18: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool Java9_v2Parser::additiveExpressionSempred(AdditiveExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 19: return precpred(_ctx, 2);
    case 20: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool Java9_v2Parser::multiplicativeExpressionSempred(MultiplicativeExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 21: return precpred(_ctx, 3);
    case 22: return precpred(_ctx, 2);
    case 23: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

// Static vars and initialization.
std::vector<dfa::DFA> Java9_v2Parser::_decisionToDFA;
atn::PredictionContextCache Java9_v2Parser::_sharedContextCache;

// We own the ATN which in turn owns the ATN states.
atn::ATN Java9_v2Parser::_atn;
std::vector<uint16_t> Java9_v2Parser::_serializedATN;

std::vector<std::string> Java9_v2Parser::_ruleNames = {
  "literal", "primitiveType", "numericType", "integralType", "floatingPointType", 
  "referenceType", "classOrInterfaceType", "classType", "classType_lf_classOrInterfaceType", 
  "classType_lfno_classOrInterfaceType", "interfaceType", "interfaceType_lf_classOrInterfaceType", 
  "interfaceType_lfno_classOrInterfaceType", "typeVariable", "arrayType", 
  "dims", "typeParameter", "typeParameterModifier", "typeBound", "additionalBound", 
  "typeArguments", "typeArgumentList", "typeArgument", "wildcard", "wildcardBounds", 
  "moduleName", "packageName", "typeName", "packageOrTypeName", "expressionName", 
  "methodName", "ambiguousName", "compilationUnit", "ordinaryCompilation", 
  "modularCompilation", "packageDeclaration", "packageModifier", "importDeclaration", 
  "singleTypeImportDeclaration", "typeImportOnDemandDeclaration", "singleStaticImportDeclaration", 
  "staticImportOnDemandDeclaration", "typeDeclaration", "moduleDeclaration", 
  "moduleDirective", "requiresModifier", "classDeclaration", "normalClassDeclaration", 
  "classModifier", "typeParameters", "typeParameterList", "superclass", 
  "superinterfaces", "interfaceTypeList", "classBody", "classBodyDeclaration", 
  "classMemberDeclaration", "fieldDeclaration", "fieldModifier", "variableDeclaratorList", 
  "variableDeclarator", "variableDeclaratorId", "variableInitializer", "unannType", 
  "unannPrimitiveType", "unannReferenceType", "unannClassOrInterfaceType", 
  "unannClassType", "unannClassType_lf_unannClassOrInterfaceType", "unannClassType_lfno_unannClassOrInterfaceType", 
  "unannInterfaceType", "unannInterfaceType_lf_unannClassOrInterfaceType", 
  "unannInterfaceType_lfno_unannClassOrInterfaceType", "unannTypeVariable", 
  "unannArrayType", "methodDeclaration", "methodModifier", "methodHeader", 
  "result", "methodDeclarator", "formalParameterList", "formalParameters", 
  "formalParameter", "variableModifier", "lastFormalParameter", "receiverParameter", 
  "throws_", "exceptionTypeList", "exceptionType", "methodBody", "instanceInitializer", 
  "staticInitializer", "constructorDeclaration", "constructorModifier", 
  "constructorDeclarator", "simpleTypeName", "constructorBody", "explicitConstructorInvocation", 
  "enumDeclaration", "enumBody", "enumConstantList", "enumConstant", "enumConstantModifier", 
  "enumBodyDeclarations", "interfaceDeclaration", "normalInterfaceDeclaration", 
  "interfaceModifier", "extendsInterfaces", "interfaceBody", "interfaceMemberDeclaration", 
  "constantDeclaration", "constantModifier", "interfaceMethodDeclaration", 
  "interfaceMethodModifier", "annotationTypeDeclaration", "annotationTypeBody", 
  "annotationTypeMemberDeclaration", "annotationTypeElementDeclaration", 
  "annotationTypeElementModifier", "defaultValue", "annotation", "normalAnnotation", 
  "elementValuePairList", "elementValuePair", "elementValue", "elementValueArrayInitializer", 
  "elementValueList", "markerAnnotation", "singleElementAnnotation", "arrayInitializer", 
  "variableInitializerList", "block", "blockStatements", "blockStatement", 
  "localVariableDeclarationStatement", "localVariableDeclaration", "statement", 
  "statementNoShortIf", "statementWithoutTrailingSubstatement", "emptyStatement", 
  "labeledStatement", "labeledStatementNoShortIf", "expressionStatement", 
  "statementExpression", "ifThenStatement", "ifThenElseStatement", "ifThenElseStatementNoShortIf", 
  "assertStatement", "switchStatement", "switchBlock", "switchBlockStatementGroup", 
  "switchLabels", "switchLabel", "enumConstantName", "whileStatement", "whileStatementNoShortIf", 
  "doStatement", "forStatement", "forStatementNoShortIf", "basicForStatement", 
  "basicForStatementNoShortIf", "forInit", "forUpdate", "statementExpressionList", 
  "enhancedForStatement", "enhancedForStatementNoShortIf", "breakStatement", 
  "continueStatement", "returnStatement", "throwStatement", "synchronizedStatement", 
  "tryStatement", "catches", "catchClause", "catchFormalParameter", "catchType", 
  "finally_", "tryWithResourcesStatement", "resourceSpecification", "resourceList", 
  "resource", "variableAccess", "primary", "primaryNoNewArray", "primaryNoNewArray_lf_arrayAccess", 
  "primaryNoNewArray_lfno_arrayAccess", "primaryNoNewArray_lf_primary", 
  "primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary", "primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary", 
  "primaryNoNewArray_lfno_primary", "primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary", 
  "primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary", "classLiteral", 
  "classInstanceCreationExpression", "classInstanceCreationExpression_lf_primary", 
  "classInstanceCreationExpression_lfno_primary", "typeArgumentsOrDiamond", 
  "fieldAccess", "fieldAccess_lf_primary", "fieldAccess_lfno_primary", "arrayAccess", 
  "arrayAccess_lf_primary", "arrayAccess_lfno_primary", "methodInvocation", 
  "methodInvocation_lf_primary", "methodInvocation_lfno_primary", "argumentList", 
  "methodReference", "methodReference_lf_primary", "methodReference_lfno_primary", 
  "arrayCreationExpression", "dimExprs", "dimExpr", "constantExpression", 
  "expression", "lambdaExpression", "lambdaParameters", "inferredFormalParameterList", 
  "lambdaBody", "assignmentExpression", "assignment", "leftHandSide", "assignmentOperator", 
  "conditionalExpression", "conditionalOrExpression", "conditionalAndExpression", 
  "inclusiveOrExpression", "exclusiveOrExpression", "andExpression", "equalityExpression", 
  "relationalExpression", "shiftExpression", "additiveExpression", "multiplicativeExpression", 
  "unaryExpression", "preIncrementExpression", "preDecrementExpression", 
  "unaryExpressionNotPlusMinus", "postfixExpression", "postIncrementExpression", 
  "postIncrementExpression_lf_postfixExpression", "postDecrementExpression", 
  "postDecrementExpression_lf_postfixExpression", "castExpression", "identifier"
};

std::vector<std::string> Java9_v2Parser::_literalNames = {
  "", "'open'", "'module'", "'requires'", "'exports'", "'to'", "'opens'", 
  "'uses'", "'provides'", "'with'", "'transitive'", "'abstract'", "'assert'", 
  "'boolean'", "'break'", "'byte'", "'case'", "'catch'", "'char'", "'class'", 
  "'const'", "'continue'", "'default'", "'do'", "'double'", "'else'", "'enum'", 
  "'extends'", "'final'", "'finally'", "'float'", "'for'", "'if'", "'goto'", 
  "'implements'", "'import'", "'instanceof'", "'int'", "'interface'", "'long'", 
  "'native'", "'new'", "'package'", "'private'", "'protected'", "'public'", 
  "'return'", "'short'", "'static'", "'strictfp'", "'super'", "'switch'", 
  "'synchronized'", "'this'", "'throw'", "'throws'", "'transient'", "'try'", 
  "'void'", "'volatile'", "'while'", "'_'", "", "", "", "", "", "'null'", 
  "'('", "')'", "'{'", "'}'", "'['", "']'", "';'", "','", "'.'", "'...'", 
  "'@'", "'::'", "'='", "'>'", "'<'", "'!'", "'~'", "'\u003F'", "':'", "'->'", 
  "'=='", "'<='", "'>='", "'!='", "'&&'", "'||'", "'++'", "'--'", "'+'", 
  "'-'", "'*'", "'/'", "'&'", "'|'", "'^'", "'%'", "'+='", "'-='", "'*='", 
  "'/='", "'&='", "'|='", "'^='", "'%='", "'<<='", "'>>='", "'>>>='"
};

std::vector<std::string> Java9_v2Parser::_symbolicNames = {
  "", "", "", "", "", "", "", "", "", "", "", "ABSTRACT", "ASSERT", "BOOLEAN", 
  "BREAK", "BYTE", "CASE", "CATCH", "CHAR", "CLASS", "CONST", "CONTINUE", 
  "DEFAULT", "DO", "DOUBLE", "ELSE", "ENUM", "EXTENDS", "FINAL", "FINALLY", 
  "FLOAT", "FOR", "IF", "GOTO", "IMPLEMENTS", "IMPORT", "INSTANCEOF", "INT", 
  "INTERFACE", "LONG", "NATIVE", "NEW", "PACKAGE", "PRIVATE", "PROTECTED", 
  "PUBLIC", "RETURN", "SHORT", "STATIC", "STRICTFP", "SUPER", "SWITCH", 
  "SYNCHRONIZED", "THIS", "THROW", "THROWS", "TRANSIENT", "TRY", "VOID", 
  "VOLATILE", "WHILE", "UNDER_SCORE", "IntegerLiteral", "FloatingPointLiteral", 
  "BooleanLiteral", "CharacterLiteral", "StringLiteral", "NullLiteral", 
  "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", "SEMI", "COMMA", 
  "DOT", "ELLIPSIS", "AT", "COLONCOLON", "ASSIGN", "GT", "LT", "BANG", "TILDE", 
  "QUESTION", "COLON", "ARROW", "EQUAL", "LE", "GE", "NOTEQUAL", "AND", 
  "OR", "INC", "DEC", "ADD", "SUB", "MUL", "DIV", "BITAND", "BITOR", "CARET", 
  "MOD", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "AND_ASSIGN", 
  "OR_ASSIGN", "XOR_ASSIGN", "MOD_ASSIGN", "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", 
  "URSHIFT_ASSIGN", "Identifier", "WS", "COMMENT", "LINE_COMMENT"
};

dfa::Vocabulary Java9_v2Parser::_vocabulary(_literalNames, _symbolicNames);

std::vector<std::string> Java9_v2Parser::_tokenNames;

Java9_v2Parser::Initializer::Initializer() {
	for (size_t i = 0; i < _symbolicNames.size(); ++i) {
		std::string name = _vocabulary.getLiteralName(i);
		if (name.empty()) {
			name = _vocabulary.getSymbolicName(i);
		}

		if (name.empty()) {
			_tokenNames.push_back("<INVALID>");
		} else {
      _tokenNames.push_back(name);
    }
	}

  static uint16_t serializedATNSegment0[] = {
    0x3, 0x608b, 0xa72a, 0x8133, 0xb9ed, 0x417c, 0x3be7, 0x7786, 0x5964, 
       0x3, 0x78, 0xba7, 0x4, 0x2, 0x9, 0x2, 0x4, 0x3, 0x9, 0x3, 0x4, 0x4, 
       0x9, 0x4, 0x4, 0x5, 0x9, 0x5, 0x4, 0x6, 0x9, 0x6, 0x4, 0x7, 0x9, 
       0x7, 0x4, 0x8, 0x9, 0x8, 0x4, 0x9, 0x9, 0x9, 0x4, 0xa, 0x9, 0xa, 
       0x4, 0xb, 0x9, 0xb, 0x4, 0xc, 0x9, 0xc, 0x4, 0xd, 0x9, 0xd, 0x4, 
       0xe, 0x9, 0xe, 0x4, 0xf, 0x9, 0xf, 0x4, 0x10, 0x9, 0x10, 0x4, 0x11, 
       0x9, 0x11, 0x4, 0x12, 0x9, 0x12, 0x4, 0x13, 0x9, 0x13, 0x4, 0x14, 
       0x9, 0x14, 0x4, 0x15, 0x9, 0x15, 0x4, 0x16, 0x9, 0x16, 0x4, 0x17, 
       0x9, 0x17, 0x4, 0x18, 0x9, 0x18, 0x4, 0x19, 0x9, 0x19, 0x4, 0x1a, 
       0x9, 0x1a, 0x4, 0x1b, 0x9, 0x1b, 0x4, 0x1c, 0x9, 0x1c, 0x4, 0x1d, 
       0x9, 0x1d, 0x4, 0x1e, 0x9, 0x1e, 0x4, 0x1f, 0x9, 0x1f, 0x4, 0x20, 
       0x9, 0x20, 0x4, 0x21, 0x9, 0x21, 0x4, 0x22, 0x9, 0x22, 0x4, 0x23, 
       0x9, 0x23, 0x4, 0x24, 0x9, 0x24, 0x4, 0x25, 0x9, 0x25, 0x4, 0x26, 
       0x9, 0x26, 0x4, 0x27, 0x9, 0x27, 0x4, 0x28, 0x9, 0x28, 0x4, 0x29, 
       0x9, 0x29, 0x4, 0x2a, 0x9, 0x2a, 0x4, 0x2b, 0x9, 0x2b, 0x4, 0x2c, 
       0x9, 0x2c, 0x4, 0x2d, 0x9, 0x2d, 0x4, 0x2e, 0x9, 0x2e, 0x4, 0x2f, 
       0x9, 0x2f, 0x4, 0x30, 0x9, 0x30, 0x4, 0x31, 0x9, 0x31, 0x4, 0x32, 
       0x9, 0x32, 0x4, 0x33, 0x9, 0x33, 0x4, 0x34, 0x9, 0x34, 0x4, 0x35, 
       0x9, 0x35, 0x4, 0x36, 0x9, 0x36, 0x4, 0x37, 0x9, 0x37, 0x4, 0x38, 
       0x9, 0x38, 0x4, 0x39, 0x9, 0x39, 0x4, 0x3a, 0x9, 0x3a, 0x4, 0x3b, 
       0x9, 0x3b, 0x4, 0x3c, 0x9, 0x3c, 0x4, 0x3d, 0x9, 0x3d, 0x4, 0x3e, 
       0x9, 0x3e, 0x4, 0x3f, 0x9, 0x3f, 0x4, 0x40, 0x9, 0x40, 0x4, 0x41, 
       0x9, 0x41, 0x4, 0x42, 0x9, 0x42, 0x4, 0x43, 0x9, 0x43, 0x4, 0x44, 
       0x9, 0x44, 0x4, 0x45, 0x9, 0x45, 0x4, 0x46, 0x9, 0x46, 0x4, 0x47, 
       0x9, 0x47, 0x4, 0x48, 0x9, 0x48, 0x4, 0x49, 0x9, 0x49, 0x4, 0x4a, 
       0x9, 0x4a, 0x4, 0x4b, 0x9, 0x4b, 0x4, 0x4c, 0x9, 0x4c, 0x4, 0x4d, 
       0x9, 0x4d, 0x4, 0x4e, 0x9, 0x4e, 0x4, 0x4f, 0x9, 0x4f, 0x4, 0x50, 
       0x9, 0x50, 0x4, 0x51, 0x9, 0x51, 0x4, 0x52, 0x9, 0x52, 0x4, 0x53, 
       0x9, 0x53, 0x4, 0x54, 0x9, 0x54, 0x4, 0x55, 0x9, 0x55, 0x4, 0x56, 
       0x9, 0x56, 0x4, 0x57, 0x9, 0x57, 0x4, 0x58, 0x9, 0x58, 0x4, 0x59, 
       0x9, 0x59, 0x4, 0x5a, 0x9, 0x5a, 0x4, 0x5b, 0x9, 0x5b, 0x4, 0x5c, 
       0x9, 0x5c, 0x4, 0x5d, 0x9, 0x5d, 0x4, 0x5e, 0x9, 0x5e, 0x4, 0x5f, 
       0x9, 0x5f, 0x4, 0x60, 0x9, 0x60, 0x4, 0x61, 0x9, 0x61, 0x4, 0x62, 
       0x9, 0x62, 0x4, 0x63, 0x9, 0x63, 0x4, 0x64, 0x9, 0x64, 0x4, 0x65, 
       0x9, 0x65, 0x4, 0x66, 0x9, 0x66, 0x4, 0x67, 0x9, 0x67, 0x4, 0x68, 
       0x9, 0x68, 0x4, 0x69, 0x9, 0x69, 0x4, 0x6a, 0x9, 0x6a, 0x4, 0x6b, 
       0x9, 0x6b, 0x4, 0x6c, 0x9, 0x6c, 0x4, 0x6d, 0x9, 0x6d, 0x4, 0x6e, 
       0x9, 0x6e, 0x4, 0x6f, 0x9, 0x6f, 0x4, 0x70, 0x9, 0x70, 0x4, 0x71, 
       0x9, 0x71, 0x4, 0x72, 0x9, 0x72, 0x4, 0x73, 0x9, 0x73, 0x4, 0x74, 
       0x9, 0x74, 0x4, 0x75, 0x9, 0x75, 0x4, 0x76, 0x9, 0x76, 0x4, 0x77, 
       0x9, 0x77, 0x4, 0x78, 0x9, 0x78, 0x4, 0x79, 0x9, 0x79, 0x4, 0x7a, 
       0x9, 0x7a, 0x4, 0x7b, 0x9, 0x7b, 0x4, 0x7c, 0x9, 0x7c, 0x4, 0x7d, 
       0x9, 0x7d, 0x4, 0x7e, 0x9, 0x7e, 0x4, 0x7f, 0x9, 0x7f, 0x4, 0x80, 
       0x9, 0x80, 0x4, 0x81, 0x9, 0x81, 0x4, 0x82, 0x9, 0x82, 0x4, 0x83, 
       0x9, 0x83, 0x4, 0x84, 0x9, 0x84, 0x4, 0x85, 0x9, 0x85, 0x4, 0x86, 
       0x9, 0x86, 0x4, 0x87, 0x9, 0x87, 0x4, 0x88, 0x9, 0x88, 0x4, 0x89, 
       0x9, 0x89, 0x4, 0x8a, 0x9, 0x8a, 0x4, 0x8b, 0x9, 0x8b, 0x4, 0x8c, 
       0x9, 0x8c, 0x4, 0x8d, 0x9, 0x8d, 0x4, 0x8e, 0x9, 0x8e, 0x4, 0x8f, 
       0x9, 0x8f, 0x4, 0x90, 0x9, 0x90, 0x4, 0x91, 0x9, 0x91, 0x4, 0x92, 
       0x9, 0x92, 0x4, 0x93, 0x9, 0x93, 0x4, 0x94, 0x9, 0x94, 0x4, 0x95, 
       0x9, 0x95, 0x4, 0x96, 0x9, 0x96, 0x4, 0x97, 0x9, 0x97, 0x4, 0x98, 
       0x9, 0x98, 0x4, 0x99, 0x9, 0x99, 0x4, 0x9a, 0x9, 0x9a, 0x4, 0x9b, 
       0x9, 0x9b, 0x4, 0x9c, 0x9, 0x9c, 0x4, 0x9d, 0x9, 0x9d, 0x4, 0x9e, 
       0x9, 0x9e, 0x4, 0x9f, 0x9, 0x9f, 0x4, 0xa0, 0x9, 0xa0, 0x4, 0xa1, 
       0x9, 0xa1, 0x4, 0xa2, 0x9, 0xa2, 0x4, 0xa3, 0x9, 0xa3, 0x4, 0xa4, 
       0x9, 0xa4, 0x4, 0xa5, 0x9, 0xa5, 0x4, 0xa6, 0x9, 0xa6, 0x4, 0xa7, 
       0x9, 0xa7, 0x4, 0xa8, 0x9, 0xa8, 0x4, 0xa9, 0x9, 0xa9, 0x4, 0xaa, 
       0x9, 0xaa, 0x4, 0xab, 0x9, 0xab, 0x4, 0xac, 0x9, 0xac, 0x4, 0xad, 
       0x9, 0xad, 0x4, 0xae, 0x9, 0xae, 0x4, 0xaf, 0x9, 0xaf, 0x4, 0xb0, 
       0x9, 0xb0, 0x4, 0xb1, 0x9, 0xb1, 0x4, 0xb2, 0x9, 0xb2, 0x4, 0xb3, 
       0x9, 0xb3, 0x4, 0xb4, 0x9, 0xb4, 0x4, 0xb5, 0x9, 0xb5, 0x4, 0xb6, 
       0x9, 0xb6, 0x4, 0xb7, 0x9, 0xb7, 0x4, 0xb8, 0x9, 0xb8, 0x4, 0xb9, 
       0x9, 0xb9, 0x4, 0xba, 0x9, 0xba, 0x4, 0xbb, 0x9, 0xbb, 0x4, 0xbc, 
       0x9, 0xbc, 0x4, 0xbd, 0x9, 0xbd, 0x4, 0xbe, 0x9, 0xbe, 0x4, 0xbf, 
       0x9, 0xbf, 0x4, 0xc0, 0x9, 0xc0, 0x4, 0xc1, 0x9, 0xc1, 0x4, 0xc2, 
       0x9, 0xc2, 0x4, 0xc3, 0x9, 0xc3, 0x4, 0xc4, 0x9, 0xc4, 0x4, 0xc5, 
       0x9, 0xc5, 0x4, 0xc6, 0x9, 0xc6, 0x4, 0xc7, 0x9, 0xc7, 0x4, 0xc8, 
       0x9, 0xc8, 0x4, 0xc9, 0x9, 0xc9, 0x4, 0xca, 0x9, 0xca, 0x4, 0xcb, 
       0x9, 0xcb, 0x4, 0xcc, 0x9, 0xcc, 0x4, 0xcd, 0x9, 0xcd, 0x4, 0xce, 
       0x9, 0xce, 0x4, 0xcf, 0x9, 0xcf, 0x4, 0xd0, 0x9, 0xd0, 0x4, 0xd1, 
       0x9, 0xd1, 0x4, 0xd2, 0x9, 0xd2, 0x4, 0xd3, 0x9, 0xd3, 0x4, 0xd4, 
       0x9, 0xd4, 0x4, 0xd5, 0x9, 0xd5, 0x4, 0xd6, 0x9, 0xd6, 0x4, 0xd7, 
       0x9, 0xd7, 0x4, 0xd8, 0x9, 0xd8, 0x4, 0xd9, 0x9, 0xd9, 0x4, 0xda, 
       0x9, 0xda, 0x4, 0xdb, 0x9, 0xdb, 0x4, 0xdc, 0x9, 0xdc, 0x4, 0xdd, 
       0x9, 0xdd, 0x4, 0xde, 0x9, 0xde, 0x4, 0xdf, 0x9, 0xdf, 0x4, 0xe0, 
       0x9, 0xe0, 0x4, 0xe1, 0x9, 0xe1, 0x4, 0xe2, 0x9, 0xe2, 0x4, 0xe3, 
       0x9, 0xe3, 0x4, 0xe4, 0x9, 0xe4, 0x4, 0xe5, 0x9, 0xe5, 0x4, 0xe6, 
       0x9, 0xe6, 0x4, 0xe7, 0x9, 0xe7, 0x4, 0xe8, 0x9, 0xe8, 0x4, 0xe9, 
       0x9, 0xe9, 0x4, 0xea, 0x9, 0xea, 0x4, 0xeb, 0x9, 0xeb, 0x4, 0xec, 
       0x9, 0xec, 0x4, 0xed, 0x9, 0xed, 0x4, 0xee, 0x9, 0xee, 0x4, 0xef, 
       0x9, 0xef, 0x4, 0xf0, 0x9, 0xf0, 0x4, 0xf1, 0x9, 0xf1, 0x4, 0xf2, 
       0x9, 0xf2, 0x4, 0xf3, 0x9, 0xf3, 0x4, 0xf4, 0x9, 0xf4, 0x4, 0xf5, 
       0x9, 0xf5, 0x4, 0xf6, 0x9, 0xf6, 0x3, 0x2, 0x3, 0x2, 0x3, 0x3, 0x7, 
       0x3, 0x1f0, 0xa, 0x3, 0xc, 0x3, 0xe, 0x3, 0x1f3, 0xb, 0x3, 0x3, 0x3, 
       0x3, 0x3, 0x7, 0x3, 0x1f7, 0xa, 0x3, 0xc, 0x3, 0xe, 0x3, 0x1fa, 0xb, 
       0x3, 0x3, 0x3, 0x5, 0x3, 0x1fd, 0xa, 0x3, 0x3, 0x4, 0x3, 0x4, 0x5, 
       0x4, 0x201, 0xa, 0x4, 0x3, 0x5, 0x3, 0x5, 0x3, 0x6, 0x3, 0x6, 0x3, 
       0x7, 0x3, 0x7, 0x3, 0x7, 0x5, 0x7, 0x20a, 0xa, 0x7, 0x3, 0x8, 0x3, 
       0x8, 0x5, 0x8, 0x20e, 0xa, 0x8, 0x3, 0x8, 0x3, 0x8, 0x7, 0x8, 0x212, 
       0xa, 0x8, 0xc, 0x8, 0xe, 0x8, 0x215, 0xb, 0x8, 0x3, 0x9, 0x7, 0x9, 
       0x218, 0xa, 0x9, 0xc, 0x9, 0xe, 0x9, 0x21b, 0xb, 0x9, 0x3, 0x9, 0x3, 
       0x9, 0x5, 0x9, 0x21f, 0xa, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x7, 
       0x9, 0x224, 0xa, 0x9, 0xc, 0x9, 0xe, 0x9, 0x227, 0xb, 0x9, 0x3, 0x9, 
       0x3, 0x9, 0x5, 0x9, 0x22b, 0xa, 0x9, 0x5, 0x9, 0x22d, 0xa, 0x9, 0x3, 
       0xa, 0x3, 0xa, 0x7, 0xa, 0x231, 0xa, 0xa, 0xc, 0xa, 0xe, 0xa, 0x234, 
       0xb, 0xa, 0x3, 0xa, 0x3, 0xa, 0x5, 0xa, 0x238, 0xa, 0xa, 0x3, 0xb, 
       0x7, 0xb, 0x23b, 0xa, 0xb, 0xc, 0xb, 0xe, 0xb, 0x23e, 0xb, 0xb, 0x3, 
       0xb, 0x3, 0xb, 0x5, 0xb, 0x242, 0xa, 0xb, 0x3, 0xc, 0x3, 0xc, 0x3, 
       0xd, 0x3, 0xd, 0x3, 0xe, 0x3, 0xe, 0x3, 0xf, 0x7, 0xf, 0x24b, 0xa, 
       0xf, 0xc, 0xf, 0xe, 0xf, 0x24e, 0xb, 0xf, 0x3, 0xf, 0x3, 0xf, 0x3, 
       0x10, 0x3, 0x10, 0x3, 0x10, 0x3, 0x10, 0x3, 0x10, 0x3, 0x10, 0x3, 
       0x10, 0x3, 0x10, 0x3, 0x10, 0x5, 0x10, 0x25b, 0xa, 0x10, 0x3, 0x11, 
       0x7, 0x11, 0x25e, 0xa, 0x11, 0xc, 0x11, 0xe, 0x11, 0x261, 0xb, 0x11, 
       0x3, 0x11, 0x3, 0x11, 0x3, 0x11, 0x7, 0x11, 0x266, 0xa, 0x11, 0xc, 
       0x11, 0xe, 0x11, 0x269, 0xb, 0x11, 0x3, 0x11, 0x3, 0x11, 0x7, 0x11, 
       0x26d, 0xa, 0x11, 0xc, 0x11, 0xe, 0x11, 0x270, 0xb, 0x11, 0x3, 0x12, 
       0x7, 0x12, 0x273, 0xa, 0x12, 0xc, 0x12, 0xe, 0x12, 0x276, 0xb, 0x12, 
       0x3, 0x12, 0x3, 0x12, 0x5, 0x12, 0x27a, 0xa, 0x12, 0x3, 0x13, 0x3, 
       0x13, 0x3, 0x14, 0x3, 0x14, 0x3, 0x14, 0x3, 0x14, 0x3, 0x14, 0x7, 
       0x14, 0x283, 0xa, 0x14, 0xc, 0x14, 0xe, 0x14, 0x286, 0xb, 0x14, 0x5, 
       0x14, 0x288, 0xa, 0x14, 0x3, 0x15, 0x3, 0x15, 0x3, 0x15, 0x3, 0x16, 
       0x3, 0x16, 0x3, 0x16, 0x3, 0x16, 0x3, 0x17, 0x3, 0x17, 0x3, 0x17, 
       0x7, 0x17, 0x294, 0xa, 0x17, 0xc, 0x17, 0xe, 0x17, 0x297, 0xb, 0x17, 
       0x3, 0x18, 0x3, 0x18, 0x5, 0x18, 0x29b, 0xa, 0x18, 0x3, 0x19, 0x7, 
       0x19, 0x29e, 0xa, 0x19, 0xc, 0x19, 0xe, 0x19, 0x2a1, 0xb, 0x19, 0x3, 
       0x19, 0x3, 0x19, 0x5, 0x19, 0x2a5, 0xa, 0x19, 0x3, 0x1a, 0x3, 0x1a, 
       0x3, 0x1a, 0x3, 0x1a, 0x5, 0x1a, 0x2ab, 0xa, 0x1a, 0x3, 0x1b, 0x3, 
       0x1b, 0x3, 0x1b, 0x3, 0x1b, 0x3, 0x1b, 0x3, 0x1b, 0x7, 0x1b, 0x2b3, 
       0xa, 0x1b, 0xc, 0x1b, 0xe, 0x1b, 0x2b6, 0xb, 0x1b, 0x3, 0x1c, 0x3, 
       0x1c, 0x3, 0x1c, 0x3, 0x1c, 0x3, 0x1c, 0x3, 0x1c, 0x7, 0x1c, 0x2be, 
       0xa, 0x1c, 0xc, 0x1c, 0xe, 0x1c, 0x2c1, 0xb, 0x1c, 0x3, 0x1d, 0x3, 
       0x1d, 0x3, 0x1d, 0x3, 0x1d, 0x3, 0x1d, 0x5, 0x1d, 0x2c8, 0xa, 0x1d, 
       0x3, 0x1e, 0x3, 0x1e, 0x3, 0x1e, 0x3, 0x1e, 0x3, 0x1e, 0x3, 0x1e, 
       0x7, 0x1e, 0x2d0, 0xa, 0x1e, 0xc, 0x1e, 0xe, 0x1e, 0x2d3, 0xb, 0x1e, 
       0x3, 0x1f, 0x3, 0x1f, 0x3, 0x1f, 0x3, 0x1f, 0x3, 0x1f, 0x5, 0x1f, 
       0x2da, 0xa, 0x1f, 0x3, 0x20, 0x3, 0x20, 0x3, 0x21, 0x3, 0x21, 0x3, 
       0x21, 0x3, 0x21, 0x3, 0x21, 0x3, 0x21, 0x7, 0x21, 0x2e4, 0xa, 0x21, 
       0xc, 0x21, 0xe, 0x21, 0x2e7, 0xb, 0x21, 0x3, 0x22, 0x3, 0x22, 0x5, 
       0x22, 0x2eb, 0xa, 0x22, 0x3, 0x23, 0x5, 0x23, 0x2ee, 0xa, 0x23, 0x3, 
       0x23, 0x7, 0x23, 0x2f1, 0xa, 0x23, 0xc, 0x23, 0xe, 0x23, 0x2f4, 0xb, 
       0x23, 0x3, 0x23, 0x7, 0x23, 0x2f7, 0xa, 0x23, 0xc, 0x23, 0xe, 0x23, 
       0x2fa, 0xb, 0x23, 0x3, 0x23, 0x3, 0x23, 0x3, 0x24, 0x7, 0x24, 0x2ff, 
       0xa, 0x24, 0xc, 0x24, 0xe, 0x24, 0x302, 0xb, 0x24, 0x3, 0x24, 0x3, 
       0x24, 0x3, 0x25, 0x7, 0x25, 0x307, 0xa, 0x25, 0xc, 0x25, 0xe, 0x25, 
       0x30a, 0xb, 0x25, 0x3, 0x25, 0x3, 0x25, 0x3, 0x25, 0x3, 0x25, 0x3, 
       0x26, 0x3, 0x26, 0x3, 0x27, 0x3, 0x27, 0x3, 0x27, 0x3, 0x27, 0x5, 
       0x27, 0x316, 0xa, 0x27, 0x3, 0x28, 0x3, 0x28, 0x3, 0x28, 0x3, 0x28, 
       0x3, 0x29, 0x3, 0x29, 0x3, 0x29, 0x3, 0x29, 0x3, 0x29, 0x3, 0x29, 
       0x3, 0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x3, 0x2a, 
       0x3, 0x2a, 0x3, 0x2b, 0x3, 0x2b, 0x3, 0x2b, 0x3, 0x2b, 0x3, 0x2b, 
       0x3, 0x2b, 0x3, 0x2b, 0x3, 0x2c, 0x3, 0x2c, 0x3, 0x2c, 0x5, 0x2c, 
       0x333, 0xa, 0x2c, 0x3, 0x2d, 0x7, 0x2d, 0x336, 0xa, 0x2d, 0xc, 0x2d, 
       0xe, 0x2d, 0x339, 0xb, 0x2d, 0x3, 0x2d, 0x5, 0x2d, 0x33c, 0xa, 0x2d, 
       0x3, 0x2d, 0x3, 0x2d, 0x3, 0x2d, 0x3, 0x2d, 0x7, 0x2d, 0x342, 0xa, 
       0x2d, 0xc, 0x2d, 0xe, 0x2d, 0x345, 0xb, 0x2d, 0x3, 0x2d, 0x3, 0x2d, 
       0x3, 0x2e, 0x3, 0x2e, 0x7, 0x2e, 0x34b, 0xa, 0x2e, 0xc, 0x2e, 0xe, 
       0x2e, 0x34e, 0xb, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 
       0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x7, 0x2e, 
       0x359, 0xa, 0x2e, 0xc, 0x2e, 0xe, 0x2e, 0x35c, 0xb, 0x2e, 0x5, 0x2e, 
       0x35e, 0xa, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 
       0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x7, 0x2e, 0x368, 0xa, 0x2e, 
       0xc, 0x2e, 0xe, 0x2e, 0x36b, 0xb, 0x2e, 0x5, 0x2e, 0x36d, 0xa, 0x2e, 
       0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 
       0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 
       0x7, 0x2e, 0x37b, 0xa, 0x2e, 0xc, 0x2e, 0xe, 0x2e, 0x37e, 0xb, 0x2e, 
       0x3, 0x2e, 0x3, 0x2e, 0x5, 0x2e, 0x382, 0xa, 0x2e, 0x3, 0x2f, 0x3, 
       0x2f, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x388, 0xa, 0x30, 0x3, 0x31, 
       0x7, 0x31, 0x38b, 0xa, 0x31, 0xc, 0x31, 0xe, 0x31, 0x38e, 0xb, 0x31, 
       0x3, 0x31, 0x3, 0x31, 0x3, 0x31, 0x5, 0x31, 0x393, 0xa, 0x31, 0x3, 
       0x31, 0x5, 0x31, 0x396, 0xa, 0x31, 0x3, 0x31, 0x5, 0x31, 0x399, 0xa, 
       0x31, 0x3, 0x31, 0x3, 0x31, 0x3, 0x32, 0x3, 0x32, 0x3, 0x32, 0x3, 
       0x32, 0x3, 0x32, 0x3, 0x32, 0x3, 0x32, 0x3, 0x32, 0x5, 0x32, 0x3a5, 
       0xa, 0x32, 0x3, 0x33, 0x3, 0x33, 0x3, 0x33, 0x3, 0x33, 0x3, 0x34, 
       0x3, 0x34, 0x3, 0x34, 0x7, 0x34, 0x3ae, 0xa, 0x34, 0xc, 0x34, 0xe, 
       0x34, 0x3b1, 0xb, 0x34, 0x3, 0x35, 0x3, 0x35, 0x3, 0x35, 0x3, 0x36, 
       0x3, 0x36, 0x3, 0x36, 0x3, 0x37, 0x3, 0x37, 0x3, 0x37, 0x7, 0x37, 
       0x3bc, 0xa, 0x37, 0xc, 0x37, 0xe, 0x37, 0x3bf, 0xb, 0x37, 0x3, 0x38, 
       0x3, 0x38, 0x7, 0x38, 0x3c3, 0xa, 0x38, 0xc, 0x38, 0xe, 0x38, 0x3c6, 
       0xb, 0x38, 0x3, 0x38, 0x3, 0x38, 0x3, 0x39, 0x3, 0x39, 0x3, 0x39, 
       0x3, 0x39, 0x5, 0x39, 0x3ce, 0xa, 0x39, 0x3, 0x3a, 0x3, 0x3a, 0x3, 
       0x3a, 0x3, 0x3a, 0x3, 0x3a, 0x5, 0x3a, 0x3d5, 0xa, 0x3a, 0x3, 0x3b, 
       0x7, 0x3b, 0x3d8, 0xa, 0x3b, 0xc, 0x3b, 0xe, 0x3b, 0x3db, 0xb, 0x3b, 
       0x3, 0x3b, 0x3, 0x3b, 0x3, 0x3b, 0x3, 0x3b, 0x3, 0x3c, 0x3, 0x3c, 
       0x3, 0x3c, 0x3, 0x3c, 0x3, 0x3c, 0x3, 0x3c, 0x3, 0x3c, 0x3, 0x3c, 
       0x5, 0x3c, 0x3e9, 0xa, 0x3c, 0x3, 0x3d, 0x3, 0x3d, 0x3, 0x3d, 0x7, 
       0x3d, 0x3ee, 0xa, 0x3d, 0xc, 0x3d, 0xe, 0x3d, 0x3f1, 0xb, 0x3d, 0x3, 
       0x3e, 0x3, 0x3e, 0x3, 0x3e, 0x5, 0x3e, 0x3f6, 0xa, 0x3e, 0x3, 0x3f, 
       0x3, 0x3f, 0x5, 0x3f, 0x3fa, 0xa, 0x3f, 0x3, 0x40, 0x3, 0x40, 0x5, 
       0x40, 0x3fe, 0xa, 0x40, 0x3, 0x41, 0x3, 0x41, 0x5, 0x41, 0x402, 0xa, 
       0x41, 0x3, 0x42, 0x3, 0x42, 0x5, 0x42, 0x406, 0xa, 0x42, 0x3, 0x43, 
       0x3, 0x43, 0x3, 0x43, 0x5, 0x43, 0x40b, 0xa, 0x43, 0x3, 0x44, 0x3, 
       0x44, 0x5, 0x44, 0x40f, 0xa, 0x44, 0x3, 0x44, 0x3, 0x44, 0x7, 0x44, 
       0x413, 0xa, 0x44, 0xc, 0x44, 0xe, 0x44, 0x416, 0xb, 0x44, 0x3, 0x45, 
       0x3, 0x45, 0x5, 0x45, 0x41a, 0xa, 0x45, 0x3, 0x45, 0x3, 0x45, 0x3, 
       0x45, 0x7, 0x45, 0x41f, 0xa, 0x45, 0xc, 0x45, 0xe, 0x45, 0x422, 0xb, 
       0x45, 0x3, 0x45, 0x3, 0x45, 0x5, 0x45, 0x426, 0xa, 0x45, 0x5, 0x45, 
       0x428, 0xa, 0x45, 0x3, 0x46, 0x3, 0x46, 0x7, 0x46, 0x42c, 0xa, 0x46, 
       0xc, 0x46, 0xe, 0x46, 0x42f, 0xb, 0x46, 0x3, 0x46, 0x3, 0x46, 0x5, 
       0x46, 0x433, 0xa, 0x46, 0x3, 0x47, 0x3, 0x47, 0x5, 0x47, 0x437, 0xa, 
       0x47, 0x3, 0x48, 0x3, 0x48, 0x3, 0x49, 0x3, 0x49, 0x3, 0x4a, 0x3, 
       0x4a, 0x3, 0x4b, 0x3, 0x4b, 0x3, 0x4c, 0x3, 0x4c, 0x3, 0x4c, 0x3, 
       0x4c, 0x3, 0x4c, 0x3, 0x4c, 0x3, 0x4c, 0x3, 0x4c, 0x3, 0x4c, 0x5, 
       0x4c, 0x44a, 0xa, 0x4c, 0x3, 0x4d, 0x7, 0x4d, 0x44d, 0xa, 0x4d, 0xc, 
       0x4d, 0xe, 0x4d, 0x450, 0xb, 0x4d, 0x3, 0x4d, 0x3, 0x4d, 0x3, 0x4d, 
       0x3, 0x4e, 0x3, 0x4e, 0x3, 0x4e, 0x3, 0x4e, 0x3, 0x4e, 0x3, 0x4e, 
       0x3, 0x4e, 0x3, 0x4e, 0x3, 0x4e, 0x3, 0x4e, 0x5, 0x4e, 0x45f, 0xa, 
       0x4e, 0x3, 0x4f, 0x3, 0x4f, 0x3, 0x4f, 0x5, 0x4f, 0x464, 0xa, 0x4f, 
       0x3, 0x4f, 0x3, 0x4f, 0x7, 0x4f, 0x468, 0xa, 0x4f, 0xc, 0x4f, 0xe, 
       0x4f, 0x46b, 0xb, 0x4f, 0x3, 0x4f, 0x3, 0x4f, 0x3, 0x4f, 0x5, 0x4f, 
       0x470, 0xa, 0x4f, 0x5, 0x4f, 0x472, 0xa, 0x4f, 0x3, 0x50, 0x3, 0x50, 
       0x5, 0x50, 0x476, 0xa, 0x50, 0x3, 0x51, 0x3, 0x51, 0x3, 0x51, 0x5, 
       0x51, 0x47b, 0xa, 0x51, 0x3, 0x51, 0x3, 0x51, 0x5, 0x51, 0x47f, 0xa, 
       0x51, 0x3, 0x52, 0x3, 0x52, 0x3, 0x52, 0x3, 0x52, 0x3, 0x52, 0x3, 
       0x52, 0x5, 0x52, 0x487, 0xa, 0x52, 0x3, 0x53, 0x3, 0x53, 0x3, 0x53, 
       0x7, 0x53, 0x48c, 0xa, 0x53, 0xc, 0x53, 0xe, 0x53, 0x48f, 0xb, 0x53, 
       0x3, 0x53, 0x3, 0x53, 0x3, 0x53, 0x7, 0x53, 0x494, 0xa, 0x53, 0xc, 
       0x53, 0xe, 0x53, 0x497, 0xb, 0x53, 0x5, 0x53, 0x499, 0xa, 0x53, 0x3, 
       0x54, 0x7, 0x54, 0x49c, 0xa, 0x54, 0xc, 0x54, 0xe, 0x54, 0x49f, 0xb, 
       0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x55, 0x3, 0x55, 0x5, 
       0x55, 0x4a6, 0xa, 0x55, 0x3, 0x56, 0x7, 0x56, 0x4a9, 0xa, 0x56, 0xc, 
       0x56, 0xe, 0x56, 0x4ac, 0xb, 0x56, 0x3, 0x56, 0x3, 0x56, 0x7, 0x56, 
       0x4b0, 0xa, 0x56, 0xc, 0x56, 0xe, 0x56, 0x4b3, 0xb, 0x56, 0x3, 0x56, 
       0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x5, 0x56, 0x4b9, 0xa, 0x56, 0x3, 
       0x57, 0x7, 0x57, 0x4bc, 0xa, 0x57, 0xc, 0x57, 0xe, 0x57, 0x4bf, 0xb, 
       0x57, 0x3, 0x57, 0x3, 0x57, 0x3, 0x57, 0x3, 0x57, 0x5, 0x57, 0x4c5, 
       0xa, 0x57, 0x3, 0x57, 0x3, 0x57, 0x3, 0x58, 0x3, 0x58, 0x3, 0x58, 
       0x3, 0x59, 0x3, 0x59, 0x3, 0x59, 0x7, 0x59, 0x4cf, 0xa, 0x59, 0xc, 
       0x59, 0xe, 0x59, 0x4d2, 0xb, 0x59, 0x3, 0x5a, 0x3, 0x5a, 0x5, 0x5a, 
       0x4d6, 0xa, 0x5a, 0x3, 0x5b, 0x3, 0x5b, 0x5, 0x5b, 0x4da, 0xa, 0x5b, 
       0x3, 0x5c, 0x3, 0x5c, 0x3, 0x5d, 0x3, 0x5d, 0x3, 0x5d, 0x3, 0x5e, 
       0x7, 0x5e, 0x4e2, 0xa, 0x5e, 0xc, 0x5e, 0xe, 0x5e, 0x4e5, 0xb, 0x5e, 
       0x3, 0x5e, 0x3, 0x5e, 0x5, 0x5e, 0x4e9, 0xa, 0x5e, 0x3, 0x5e, 0x3, 
       0x5e, 0x3, 0x5f, 0x3, 0x5f, 0x3, 0x5f, 0x3, 0x5f, 0x5, 0x5f, 0x4f1, 
       0xa, 0x5f, 0x3, 0x60, 0x5, 0x60, 0x4f4, 0xa, 0x60, 0x3, 0x60, 0x3, 
       0x60, 0x3, 0x60, 0x5, 0x60, 0x4f9, 0xa, 0x60, 0x3, 0x60, 0x3, 0x60, 
       0x3, 0x61, 0x3, 0x61, 0x3, 0x62, 0x3, 0x62, 0x5, 0x62, 0x501, 0xa, 
       0x62, 0x3, 0x62, 0x5, 0x62, 0x504, 0xa, 0x62, 0x3, 0x62, 0x3, 0x62, 
       0x3, 0x63, 0x5, 0x63, 0x509, 0xa, 0x63, 0x3, 0x63, 0x3, 0x63, 0x3, 
       0x63, 0x5, 0x63, 0x50e, 0xa, 0x63, 0x3, 0x63, 0x3, 0x63, 0x3, 0x63, 
       0x5, 0x63, 0x513, 0xa, 0x63, 0x3, 0x63, 0x3, 0x63, 0x3, 0x63, 0x5, 
       0x63, 0x518, 0xa, 0x63, 0x3, 0x63, 0x3, 0x63, 0x3, 0x63, 0x3, 0x63, 
       0x3, 0x63, 0x5, 0x63, 0x51f, 0xa, 0x63, 0x3, 0x63, 0x3, 0x63, 0x3, 
       0x63, 0x5, 0x63, 0x524, 0xa, 0x63, 0x3, 0x63, 0x3, 0x63, 0x3, 0x63, 
       0x3, 0x63, 0x3, 0x63, 0x3, 0x63, 0x5, 0x63, 0x52c, 0xa, 0x63, 0x3, 
       0x63, 0x3, 0x63, 0x3, 0x63, 0x5, 0x63, 0x531, 0xa, 0x63, 0x3, 0x63, 
       0x3, 0x63, 0x3, 0x63, 0x5, 0x63, 0x536, 0xa, 0x63, 0x3, 0x64, 0x7, 
       0x64, 0x539, 0xa, 0x64, 0xc, 0x64, 0xe, 0x64, 0x53c, 0xb, 0x64, 0x3, 
       0x64, 0x3, 0x64, 0x3, 0x64, 0x5, 0x64, 0x541, 0xa, 0x64, 0x3, 0x64, 
       0x3, 0x64, 0x3, 0x65, 0x3, 0x65, 0x5, 0x65, 0x547, 0xa, 0x65, 0x3, 
       0x65, 0x5, 0x65, 0x54a, 0xa, 0x65, 0x3, 0x65, 0x5, 0x65, 0x54d, 0xa, 
       0x65, 0x3, 0x65, 0x3, 0x65, 0x3, 0x66, 0x3, 0x66, 0x3, 0x66, 0x7, 
       0x66, 0x554, 0xa, 0x66, 0xc, 0x66, 0xe, 0x66, 0x557, 0xb, 0x66, 0x3, 
       0x67, 0x7, 0x67, 0x55a, 0xa, 0x67, 0xc, 0x67, 0xe, 0x67, 0x55d, 0xb, 
       0x67, 0x3, 0x67, 0x3, 0x67, 0x3, 0x67, 0x5, 0x67, 0x562, 0xa, 0x67, 
       0x3, 0x67, 0x5, 0x67, 0x565, 0xa, 0x67, 0x3, 0x67, 0x5, 0x67, 0x568, 
       0xa, 0x67, 0x3, 0x68, 0x3, 0x68, 0x3, 0x69, 0x3, 0x69, 0x7, 0x69, 
       0x56e, 0xa, 0x69, 0xc, 0x69, 0xe, 0x69, 0x571, 0xb, 0x69, 0x3, 0x6a, 
       0x3, 0x6a, 0x5, 0x6a, 0x575, 0xa, 0x6a, 0x3, 0x6b, 0x7, 0x6b, 0x578, 
       0xa, 0x6b, 0xc, 0x6b, 0xe, 0x6b, 0x57b, 0xb, 0x6b, 0x3, 0x6b, 0x3, 
       0x6b, 0x3, 0x6b, 0x5, 0x6b, 0x580, 0xa, 0x6b, 0x3, 0x6b, 0x5, 0x6b, 
       0x583, 0xa, 0x6b, 0x3, 0x6b, 0x3, 0x6b, 0x3, 0x6c, 0x3, 0x6c, 0x3, 
       0x6c, 0x3, 0x6c, 0x3, 0x6c, 0x3, 0x6c, 0x3, 0x6c, 0x5, 0x6c, 0x58e, 
       0xa, 0x6c, 0x3, 0x6d, 0x3, 0x6d, 0x3, 0x6d, 0x3, 0x6e, 0x3, 0x6e, 
       0x7, 0x6e, 0x595, 0xa, 0x6e, 0xc, 0x6e, 0xe, 0x6e, 0x598, 0xb, 0x6e, 
       0x3, 0x6e, 0x3, 0x6e, 0x3, 0x6f, 0x3, 0x6f, 0x3, 0x6f, 0x3, 0x6f, 
       0x3, 0x6f, 0x5, 0x6f, 0x5a1, 0xa, 0x6f, 0x3, 0x70, 0x7, 0x70, 0x5a4, 
       0xa, 0x70, 0xc, 0x70, 0xe, 0x70, 0x5a7, 0xb, 0x70, 0x3, 0x70, 0x3, 
       0x70, 0x3, 0x70, 0x3, 0x70, 0x3, 0x71, 0x3, 0x71, 0x3, 0x71, 0x3, 
       0x71, 0x5, 0x71, 0x5b1, 0xa, 0x71, 0x3, 0x72, 0x7, 0x72, 0x5b4, 0xa, 
       0x72, 0xc, 0x72, 0xe, 0x72, 0x5b7, 0xb, 0x72, 0x3, 0x72, 0x3, 0x72, 
       0x3, 0x72, 0x3, 0x73, 0x3, 0x73, 0x3, 0x73, 0x3, 0x73, 0x3, 0x73, 
       0x3, 0x73, 0x3, 0x73, 0x5, 0x73, 0x5c3, 0xa, 0x73, 0x3, 0x74, 0x7, 
       0x74, 0x5c6, 0xa, 0x74, 0xc, 0x74, 0xe, 0x74, 0x5c9, 0xb, 0x74, 0x3, 
       0x74, 0x3, 0x74, 0x3, 0x74, 0x3, 0x74, 0x3, 0x74, 0x3, 0x75, 0x3, 
       0x75, 0x7, 0x75, 0x5d2, 0xa, 0x75, 0xc, 0x75, 0xe, 0x75, 0x5d5, 0xb, 
       0x75, 0x3, 0x75, 0x3, 0x75, 0x3, 0x76, 0x3, 0x76, 0x3, 0x76, 0x3, 
       0x76, 0x3, 0x76, 0x5, 0x76, 0x5de, 0xa, 0x76, 0x3, 0x77, 0x7, 0x77, 
       0x5e1, 0xa, 0x77, 0xc, 0x77, 0xe, 0x77, 0x5e4, 0xb, 0x77, 0x3, 0x77, 
       0x3, 0x77, 0x3, 0x77, 0x3, 0x77, 0x3, 0x77, 0x5, 0x77, 0x5eb, 0xa, 
       0x77, 0x3, 0x77, 0x5, 0x77, 0x5ee, 0xa, 0x77, 0x3, 0x77, 0x3, 0x77, 
       0x3, 0x78, 0x3, 0x78, 0x3, 0x78, 0x5, 0x78, 0x5f5, 0xa, 0x78, 0x3, 
       0x79, 0x3, 0x79, 0x3, 0x79, 0x3, 0x7a, 0x3, 0x7a, 0x3, 0x7a, 0x5, 
       0x7a, 0x5fd, 0xa, 0x7a, 0x3, 0x7b, 0x3, 0x7b, 0x3, 0x7b, 0x3, 0x7b, 
       0x5, 0x7b, 0x603, 0xa, 0x7b, 0x3, 0x7b, 0x3, 0x7b, 0x3, 0x7c, 0x3, 
       0x7c, 0x3, 0x7c, 0x7, 0x7c, 0x60a, 0xa, 0x7c, 0xc, 0x7c, 0xe, 0x7c, 
       0x60d, 0xb, 0x7c, 0x3, 0x7d, 0x3, 0x7d, 0x3, 0x7d, 0x3, 0x7d, 0x3, 
       0x7e, 0x3, 0x7e, 0x3, 0x7e, 0x5, 0x7e, 0x616, 0xa, 0x7e, 0x3, 0x7f, 
       0x3, 0x7f, 0x5, 0x7f, 0x61a, 0xa, 0x7f, 0x3, 0x7f, 0x5, 0x7f, 0x61d, 
       0xa, 0x7f, 0x3, 0x7f, 0x3, 0x7f, 0x3, 0x80, 0x3, 0x80, 0x3, 0x80, 
       0x7, 0x80, 0x624, 0xa, 0x80, 0xc, 0x80, 0xe, 0x80, 0x627, 0xb, 0x80, 
       0x3, 0x81, 0x3, 0x81, 0x3, 0x81, 0x3, 0x82, 0x3, 0x82, 0x3, 0x82, 
       0x3, 0x82, 0x3, 0x82, 0x3, 0x82, 0x3, 0x83, 0x3, 0x83, 0x5, 0x83, 
       0x634, 0xa, 0x83, 0x3, 0x83, 0x5, 0x83, 0x637, 0xa, 0x83, 0x3, 0x83, 
       0x3, 0x83, 0x3, 0x84, 0x3, 0x84, 0x3, 0x84, 0x7, 0x84, 0x63e, 0xa, 
       0x84, 0xc, 0x84, 0xe, 0x84, 0x641, 0xb, 0x84, 0x3, 0x85, 0x3, 0x85, 
       0x5, 0x85, 0x645, 0xa, 0x85, 0x3, 0x85, 0x3, 0x85, 0x3, 0x86, 0x6, 
       0x86, 0x64a, 0xa, 0x86, 0xd, 0x86, 0xe, 0x86, 0x64b, 0x3, 0x87, 0x3, 
       0x87, 0x3, 0x87, 0x5, 0x87, 0x651, 0xa, 0x87, 0x3, 0x88, 0x3, 0x88, 
       0x3, 0x88, 0x3, 0x89, 0x7, 0x89, 0x657, 0xa, 0x89, 0xc, 0x89, 0xe, 
       0x89, 0x65a, 0xb, 0x89, 0x3, 0x89, 0x3, 0x89, 0x3, 0x89, 0x3, 0x8a, 
       0x3, 0x8a, 0x3, 0x8a, 0x3, 0x8a, 0x3, 0x8a, 0x3, 0x8a, 0x5, 0x8a, 
       0x665, 0xa, 0x8a, 0x3, 0x8b, 0x3, 0x8b, 0x3, 0x8b, 0x3, 0x8b, 0x3, 
       0x8b, 0x5, 0x8b, 0x66c, 0xa, 0x8b, 0x3, 0x8c, 0x3, 0x8c, 0x3, 0x8c, 
       0x3, 0x8c, 0x3, 0x8c, 0x3, 0x8c, 0x3, 0x8c, 0x3, 0x8c, 0x3, 0x8c, 
       0x3, 0x8c, 0x3, 0x8c, 0x3, 0x8c, 0x5, 0x8c, 0x67a, 0xa, 0x8c, 0x3, 
       0x8d, 0x3, 0x8d, 0x3, 0x8e, 0x3, 0x8e, 0x3, 0x8e, 0x3, 0x8e, 0x3, 
       0x8f, 0x3, 0x8f, 0x3, 0x8f, 0x3, 0x8f, 0x3, 0x90, 0x3, 0x90, 0x3, 
       0x90, 0x3, 0x91, 0x3, 0x91, 0x3, 0x91, 0x3, 0x91, 0x3, 0x91, 0x3, 
       0x91, 0x3, 0x91, 0x5, 0x91, 0x690, 0xa, 0x91, 0x3, 0x92, 0x3, 0x92, 
       0x3, 0x92, 0x3, 0x92, 0x3, 0x92, 0x3, 0x92, 0x3, 0x93, 0x3, 0x93, 
       0x3, 0x93, 0x3, 0x93, 0x3, 0x93, 0x3, 0x93, 0x3, 0x93, 0x3, 0x93, 
       0x3, 0x94, 0x3, 0x94, 0x3, 0x94, 0x3, 0x94, 0x3, 0x94, 0x3, 0x94, 
       0x3, 0x94, 0x3, 0x94, 0x3, 0x95, 0x3, 0x95, 0x3, 0x95, 0x3, 0x95, 
       0x3, 0x95, 0x3, 0x95, 0x3, 0x95, 0x3, 0x95, 0x3, 0x95, 0x3, 0x95, 
       0x5, 0x95, 0x6b2, 0xa, 0x95, 0x3, 0x96, 0x3, 0x96, 0x3, 0x96, 0x3, 
       0x96, 0x3, 0x96, 0x3, 0x96, 0x3, 0x97, 0x3, 0x97, 0x7, 0x97, 0x6bc, 
       0xa, 0x97, 0xc, 0x97, 0xe, 0x97, 0x6bf, 0xb, 0x97, 0x3, 0x97, 0x7, 
       0x97, 0x6c2, 0xa, 0x97, 0xc, 0x97, 0xe, 0x97, 0x6c5, 0xb, 0x97, 0x3, 
       0x97, 0x3, 0x97, 0x3, 0x98, 0x3, 0x98, 0x3, 0x98, 0x3, 0x99, 0x6, 
       0x99, 0x6cd, 0xa, 0x99, 0xd, 0x99, 0xe, 0x99, 0x6ce, 0x3, 0x9a, 0x3, 
       0x9a, 0x3, 0x9a, 0x3, 0x9a, 0x3, 0x9a, 0x3, 0x9a, 0x3, 0x9a, 0x3, 
       0x9a, 0x3, 0x9a, 0x3, 0x9a, 0x5, 0x9a, 0x6db, 0xa, 0x9a, 0x3, 0x9b, 
       0x3, 0x9b, 0x3, 0x9c, 0x3, 0x9c, 0x3, 0x9c, 0x3, 0x9c, 0x3, 0x9c, 
       0x3, 0x9c, 0x3, 0x9d, 0x3, 0x9d, 0x3, 0x9d, 0x3, 0x9d, 0x3, 0x9d, 
       0x3, 0x9d, 0x3, 0x9e, 0x3, 0x9e, 0x3, 0x9e, 0x3, 0x9e, 0x3, 0x9e, 
       0x3, 0x9e, 0x3, 0x9e, 0x3, 0x9e, 0x3, 0x9f, 0x3, 0x9f, 0x5, 0x9f, 
       0x6f5, 0xa, 0x9f, 0x3, 0xa0, 0x3, 0xa0, 0x5, 0xa0, 0x6f9, 0xa, 0xa0, 
       0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 0x5, 0xa1, 0x6fe, 0xa, 0xa1, 0x3, 
       0xa1, 0x3, 0xa1, 0x5, 0xa1, 0x702, 0xa, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 
       0x5, 0xa1, 0x706, 0xa, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 0x3, 
       0xa2, 0x3, 0xa2, 0x3, 0xa2, 0x5, 0xa2, 0x70e, 0xa, 0xa2, 0x3, 0xa2, 
       0x3, 0xa2, 0x5, 0xa2, 0x712, 0xa, 0xa2, 0x3, 0xa2, 0x3, 0xa2, 0x5, 
       0xa2, 0x716, 0xa, 0xa2, 0x3, 0xa2, 0x3, 0xa2, 0x3, 0xa2, 0x3, 0xa3, 
       0x3, 0xa3, 0x5, 0xa3, 0x71d, 0xa, 0xa3, 0x3, 0xa4, 0x3, 0xa4, 0x3, 
       0xa5, 0x3, 0xa5, 0x3, 0xa5, 0x7, 0xa5, 0x724, 0xa, 0xa5, 0xc, 0xa5, 
       0xe, 0xa5, 0x727, 0xb, 0xa5, 0x3, 0xa6, 0x3, 0xa6, 0x3, 0xa6, 0x7, 
       0xa6, 0x72c, 0xa, 0xa6, 0xc, 0xa6, 0xe, 0xa6, 0x72f, 0xb, 0xa6, 0x3, 
       0xa6, 0x3, 0xa6, 0x3, 0xa6, 0x3, 0xa6, 0x3, 0xa6, 0x3, 0xa6, 0x3, 
       0xa6, 0x3, 0xa7, 0x3, 0xa7, 0x3, 0xa7, 0x7, 0xa7, 0x73b, 0xa, 0xa7, 
       0xc, 0xa7, 0xe, 0xa7, 0x73e, 0xb, 0xa7, 0x3, 0xa7, 0x3, 0xa7, 0x3, 
       0xa7, 0x3, 0xa7, 0x3, 0xa7, 0x3, 0xa7, 0x3, 0xa7, 0x3, 0xa8, 0x3, 
       0xa8, 0x5, 0xa8, 0x749, 0xa, 0xa8, 0x3, 0xa8, 0x3, 0xa8, 0x3, 0xa9, 
       0x3, 0xa9, 0x5, 0xa9, 0x74f, 0xa, 0xa9, 0x3, 0xa9, 0x3, 0xa9, 0x3, 
       0xaa, 0x3, 0xaa, 0x5, 0xaa, 0x755, 0xa, 0xaa, 0x3, 0xaa, 0x3, 0xaa, 
       0x3, 0xab, 0x3, 0xab, 0x3, 0xab, 0x3, 0xab, 0x3, 0xac, 0x3, 0xac, 
       0x3, 0xac, 0x3, 0xac, 0x3, 0xac, 0x3, 0xac, 0x3, 0xad, 0x3, 0xad, 
       0x3, 0xad, 0x3, 0xad, 0x3, 0xad, 0x3, 0xad, 0x3, 0xad, 0x5, 0xad, 
       0x76a, 0xa, 0xad, 0x3, 0xad, 0x3, 0xad, 0x3, 0xad, 0x5, 0xad, 0x76f, 
       0xa, 0xad, 0x3, 0xae, 0x6, 0xae, 0x772, 0xa, 0xae, 0xd, 0xae, 0xe, 
       0xae, 0x773, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 
       0x3, 0xaf, 0x3, 0xb0, 0x7, 0xb0, 0x77d, 0xa, 0xb0, 0xc, 0xb0, 0xe, 
       0xb0, 0x780, 0xb, 0xb0, 0x3, 0xb0, 0x3, 0xb0, 0x3, 0xb0, 0x3, 0xb1, 
       0x3, 0xb1, 0x3, 0xb1, 0x7, 0xb1, 0x788, 0xa, 0xb1, 0xc, 0xb1, 0xe, 
       0xb1, 0x78b, 0xb, 0xb1, 0x3, 0xb2, 0x3, 0xb2, 0x3, 0xb2, 0x3, 0xb3, 
       0x3, 0xb3, 0x3, 0xb3, 0x3, 0xb3, 0x5, 0xb3, 0x794, 0xa, 0xb3, 0x3, 
       0xb3, 0x5, 0xb3, 0x797, 0xa, 0xb3, 0x3, 0xb4, 0x3, 0xb4, 0x3, 0xb4, 
       0x5, 0xb4, 0x79c, 0xa, 0xb4, 0x3, 0xb4, 0x3, 0xb4, 0x3, 0xb5, 0x3, 
       0xb5, 0x3, 0xb5, 0x7, 0xb5, 0x7a3, 0xa, 0xb5, 0xc, 0xb5, 0xe, 0xb5, 
       0x7a6, 0xb, 0xb5, 0x3, 0xb6, 0x7, 0xb6, 0x7a9, 0xa, 0xb6, 0xc, 0xb6, 
       0xe, 0xb6, 0x7ac, 0xb, 0xb6, 0x3, 0xb6, 0x3, 0xb6, 0x3, 0xb6, 0x3, 
       0xb6, 0x3, 0xb6, 0x3, 0xb6, 0x5, 0xb6, 0x7b4, 0xa, 0xb6, 0x3, 0xb7, 
       0x3, 0xb7, 0x5, 0xb7, 0x7b8, 0xa, 0xb7, 0x3, 0xb8, 0x3, 0xb8, 0x5, 
       0xb8, 0x7bc, 0xa, 0xb8, 0x3, 0xb8, 0x7, 0xb8, 0x7bf, 0xa, 0xb8, 0xc, 
       0xb8, 0xe, 0xb8, 0x7c2, 0xb, 0xb8, 0x3, 0xb9, 0x3, 0xb9, 0x3, 0xb9, 
       0x3, 0xb9, 0x3, 0xb9, 0x3, 0xb9, 0x3, 0xb9, 0x3, 0xb9, 0x3, 0xb9, 
       0x3, 0xb9, 0x3, 0xb9, 0x3, 0xb9, 0x3, 0xb9, 0x3, 0xb9, 0x3, 0xb9, 
       0x3, 0xb9, 0x5, 0xb9, 0x7d4, 0xa, 0xb9, 0x3, 0xba, 0x3, 0xba, 0x3, 
       0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x7, 0xbb, 0x7dc, 0xa, 0xbb, 
       0xc, 0xbb, 0xe, 0xbb, 0x7df, 0xb, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x3, 
       0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x3, 
       0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x3, 
       0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x5, 0xbb, 0x7f4, 
       0xa, 0xbb, 0x3, 0xbc, 0x3, 0xbc, 0x3, 0xbc, 0x3, 0xbc, 0x3, 0xbc, 
       0x5, 0xbc, 0x7fb, 0xa, 0xbc, 0x3, 0xbd, 0x3, 0xbd, 0x3, 0xbe, 0x3, 
       0xbe, 0x3, 0xbe, 0x3, 0xbe, 0x5, 0xbe, 0x803, 0xa, 0xbe, 0x3, 0xbf, 
       0x3, 0xbf, 0x3, 0xbf, 0x3, 0xbf, 0x7, 0xbf, 0x809, 0xa, 0xbf, 0xc, 
       0xbf, 0xe, 0xbf, 0x80c, 0xb, 0xbf, 0x3, 0xbf, 0x3, 0xbf, 0x3, 0xbf, 
       0x3, 0xbf, 0x3, 0xbf, 0x3, 0xbf, 0x7, 0xbf, 0x814, 0xa, 0xbf, 0xc, 
       0xbf, 0xe, 0xbf, 0x817, 0xb, 0xbf, 0x3, 0xbf, 0x3, 0xbf, 0x3, 0xbf, 
       0x3, 0xbf, 0x3, 0xbf, 0x3, 0xbf, 0x3, 0xbf, 0x3, 0xbf, 0x3, 0xbf, 
       0x3, 0xbf, 0x3, 0xbf, 0x3, 0xbf, 0x3, 0xbf, 0x3, 0xbf, 0x3, 0xbf, 
       0x3, 0xbf, 0x3, 0xbf, 0x3, 0xbf, 0x3, 0xbf, 0x3, 0xbf, 0x5, 0xbf, 
       0x82d, 0xa, 0xbf, 0x3, 0xc0, 0x3, 0xc0, 0x3, 0xc1, 0x3, 0xc1, 0x3, 
       0xc1, 0x3, 0xc1, 0x7, 0xc1, 0x835, 0xa, 0xc1, 0xc, 0xc1, 0xe, 0xc1, 
       0x838, 0xb, 0xc1, 0x3, 0xc1, 0x3, 0xc1, 0x3, 0xc1, 0x3, 0xc1, 0x3, 
       0xc1, 0x3, 0xc1, 0x7, 0xc1, 0x840, 0xa, 0xc1, 0xc, 0xc1, 0xe, 0xc1, 
       0x843, 0xb, 0xc1, 0x3, 0xc1, 0x3, 0xc1, 0x3, 0xc1, 0x3, 0xc1, 0x3, 
       0xc1, 0x3, 0xc1, 0x3, 0xc1, 0x3, 0xc1, 0x3, 0xc1, 0x3, 0xc1, 0x3, 
       0xc1, 0x3, 0xc1, 0x3, 0xc1, 0x3, 0xc1, 0x3, 0xc1, 0x3, 0xc1, 0x3, 
       0xc1, 0x3, 0xc1, 0x3, 0xc1, 0x5, 0xc1, 0x858, 0xa, 0xc1, 0x3, 0xc2, 
       0x3, 0xc2, 0x3, 0xc2, 0x5, 0xc2, 0x85d, 0xa, 0xc2, 0x3, 0xc2, 0x3, 
       0xc2, 0x7, 0xc2, 0x861, 0xa, 0xc2, 0xc, 0xc2, 0xe, 0xc2, 0x864, 0xb, 
       0xc2, 0x3, 0xc2, 0x3, 0xc2, 0x3, 0xc2, 0x3, 0xc2, 0x3, 0xc2, 0x5, 
       0xc2, 0x86b, 0xa, 0xc2, 0x3, 0xc3, 0x3, 0xc3, 0x5, 0xc3, 0x86f, 0xa, 
       0xc3, 0x3, 0xc3, 0x7, 0xc3, 0x872, 0xa, 0xc3, 0xc, 0xc3, 0xe, 0xc3, 
       0x875, 0xb, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x7, 0xc3, 0x87a, 
       0xa, 0xc3, 0xc, 0xc3, 0xe, 0xc3, 0x87d, 0xb, 0xc3, 0x3, 0xc3, 0x7, 
       0xc3, 0x880, 0xa, 0xc3, 0xc, 0xc3, 0xe, 0xc3, 0x883, 0xb, 0xc3, 0x3, 
       0xc3, 0x5, 0xc3, 0x886, 0xa, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x5, 0xc3, 
       0x88a, 0xa, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x5, 0xc3, 0x88e, 0xa, 0xc3, 
       0x3, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x5, 0xc3, 0x894, 0xa, 
       0xc3, 0x3, 0xc3, 0x7, 0xc3, 0x897, 0xa, 0xc3, 0xc, 0xc3, 0xe, 0xc3, 
       0x89a, 0xb, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x5, 0xc3, 0x89e, 0xa, 0xc3, 
       0x3, 0xc3, 0x3, 0xc3, 0x5, 0xc3, 0x8a2, 0xa, 0xc3, 0x3, 0xc3, 0x3, 
       0xc3, 0x5, 0xc3, 0x8a6, 0xa, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 
       0x3, 0xc3, 0x5, 0xc3, 0x8ac, 0xa, 0xc3, 0x3, 0xc3, 0x7, 0xc3, 0x8af, 
       0xa, 0xc3, 0xc, 0xc3, 0xe, 0xc3, 0x8b2, 0xb, 0xc3, 0x3, 0xc3, 0x3, 
       0xc3, 0x5, 0xc3, 0x8b6, 0xa, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x5, 0xc3, 
       0x8ba, 0xa, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x5, 0xc3, 0x8be, 0xa, 0xc3, 
       0x5, 0xc3, 0x8c0, 0xa, 0xc3, 0x3, 0xc4, 0x3, 0xc4, 0x3, 0xc4, 0x5, 
       0xc4, 0x8c5, 0xa, 0xc4, 0x3, 0xc4, 0x7, 0xc4, 0x8c8, 0xa, 0xc4, 0xc, 
       0xc4, 0xe, 0xc4, 0x8cb, 0xb, 0xc4, 0x3, 0xc4, 0x3, 0xc4, 0x5, 0xc4, 
       0x8cf, 0xa, 0xc4, 0x3, 0xc4, 0x3, 0xc4, 0x5, 0xc4, 0x8d3, 0xa, 0xc4, 
       0x3, 0xc4, 0x3, 0xc4, 0x5, 0xc4, 0x8d7, 0xa, 0xc4, 0x3, 0xc5, 0x3, 
       0xc5, 0x5, 0xc5, 0x8db, 0xa, 0xc5, 0x3, 0xc5, 0x7, 0xc5, 0x8de, 0xa, 
       0xc5, 0xc, 0xc5, 0xe, 0xc5, 0x8e1, 0xb, 0xc5, 0x3, 0xc5, 0x3, 0xc5, 
       0x3, 0xc5, 0x7, 0xc5, 0x8e6, 0xa, 0xc5, 0xc, 0xc5, 0xe, 0xc5, 0x8e9, 
       0xb, 0xc5, 0x3, 0xc5, 0x7, 0xc5, 0x8ec, 0xa, 0xc5, 0xc, 0xc5, 0xe, 
       0xc5, 0x8ef, 0xb, 0xc5, 0x3, 0xc5, 0x5, 0xc5, 0x8f2, 0xa, 0xc5, 0x3, 
       0xc5, 0x3, 0xc5, 0x5, 0xc5, 0x8f6, 0xa, 0xc5, 0x3, 0xc5, 0x3, 0xc5, 
       0x5, 0xc5, 0x8fa, 0xa, 0xc5, 0x3, 0xc5, 0x3, 0xc5, 0x3, 0xc5, 0x3, 
       0xc5, 0x5, 0xc5, 0x900, 0xa, 0xc5, 0x3, 0xc5, 0x7, 0xc5, 0x903, 0xa, 
       0xc5, 0xc, 0xc5, 0xe, 0xc5, 0x906, 0xb, 0xc5, 0x3, 0xc5, 0x3, 0xc5, 
       0x5, 0xc5, 0x90a, 0xa, 0xc5, 0x3, 0xc5, 0x3, 0xc5, 0x5, 0xc5, 0x90e, 
       0xa, 0xc5, 0x3, 0xc5, 0x3, 0xc5, 0x5, 0xc5, 0x912, 0xa, 0xc5, 0x5, 
       0xc5, 0x914, 0xa, 0xc5, 0x3, 0xc6, 0x3, 0xc6, 0x3, 0xc6, 0x5, 0xc6, 
       0x919, 0xa, 0xc6, 0x3, 0xc7, 0x3, 0xc7, 0x3, 0xc7, 0x3, 0xc7, 0x3, 
       0xc7, 0x3, 0xc7, 0x3, 0xc7, 0x3, 0xc7, 0x3, 0xc7, 0x3, 0xc7, 0x3, 
       0xc7, 0x3, 0xc7, 0x3, 0xc7, 0x5, 0xc7, 0x928, 0xa, 0xc7, 0x3, 0xc8, 
       0x3, 0xc8, 0x3, 0xc8, 0x3, 0xc9, 0x3, 0xc9, 0x3, 0xc9, 0x3, 0xc9, 
       0x3, 0xc9, 0x3, 0xc9, 0x3, 0xc9, 0x3, 0xc9, 0x3, 0xc9, 0x5, 0xc9, 
       0x936, 0xa, 0xc9, 0x3, 0xca, 0x3, 0xca, 0x3, 0xca, 0x3, 0xca, 0x3, 
       0xca, 0x3, 0xca, 0x3, 0xca, 0x3, 0xca, 0x3, 0xca, 0x3, 0xca, 0x5, 
       0xca, 0x942, 0xa, 0xca, 0x3, 0xca, 0x3, 0xca, 0x3, 0xca, 0x3, 0xca, 
       0x3, 0xca, 0x7, 0xca, 0x949, 0xa, 0xca, 0xc, 0xca, 0xe, 0xca, 0x94c, 
       0xb, 0xca, 0x3, 0xcb, 0x3, 0xcb, 0x3, 0xcb, 0x3, 0xcb, 0x3, 0xcb, 
       0x3, 0xcb, 0x3, 0xcb, 0x3, 0xcb, 0x3, 0xcb, 0x3, 0xcb, 0x7, 0xcb, 
       0x958, 0xa, 0xcb, 0xc, 0xcb, 0xe, 0xcb, 0x95b, 0xb, 0xcb, 0x3, 0xcc, 
       0x3, 0xcc, 0x3, 0xcc, 0x3, 0xcc, 0x3, 0xcc, 0x3, 0xcc, 0x3, 0xcc, 
       0x3, 0xcc, 0x3, 0xcc, 0x3, 0xcc, 0x5, 0xcc, 0x967, 0xa, 0xcc, 0x3, 
       0xcc, 0x3, 0xcc, 0x3, 0xcc, 0x3, 0xcc, 0x3, 0xcc, 0x7, 0xcc, 0x96e, 
       0xa, 0xcc, 0xc, 0xcc, 0xe, 0xcc, 0x971, 0xb, 0xcc, 0x3, 0xcd, 0x3, 
       0xcd, 0x3, 0xcd, 0x5, 0xcd, 0x976, 0xa, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 
       0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x5, 0xcd, 0x97d, 0xa, 0xcd, 0x3, 
       0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x5, 0xcd, 0x982, 0xa, 0xcd, 0x3, 0xcd, 
       0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x5, 0xcd, 0x989, 0xa, 
       0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x5, 0xcd, 0x98e, 0xa, 0xcd, 
       0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x5, 0xcd, 
       0x995, 0xa, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x5, 0xcd, 0x99a, 
       0xa, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 
       0x5, 0xcd, 0x9a1, 0xa, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x5, 
       0xcd, 0x9a6, 0xa, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 
       0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x5, 0xcd, 0x9af, 0xa, 0xcd, 0x3, 
       0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x5, 0xcd, 0x9b4, 0xa, 0xcd, 0x3, 0xcd, 
       0x3, 0xcd, 0x5, 0xcd, 0x9b8, 0xa, 0xcd, 0x3, 0xce, 0x3, 0xce, 0x5, 
       0xce, 0x9bc, 0xa, 0xce, 0x3, 0xce, 0x3, 0xce, 0x3, 0xce, 0x5, 0xce, 
       0x9c1, 0xa, 0xce, 0x3, 0xce, 0x3, 0xce, 0x3, 0xcf, 0x3, 0xcf, 0x3, 
       0xcf, 0x5, 0xcf, 0x9c8, 0xa, 0xcf, 0x3, 0xcf, 0x3, 0xcf, 0x3, 0xcf, 
       0x3, 0xcf, 0x3, 0xcf, 0x5, 0xcf, 0x9cf, 0xa, 0xcf, 0x3, 0xcf, 0x3, 
       0xcf, 0x3, 0xcf, 0x5, 0xcf, 0x9d4, 0xa, 0xcf, 0x3, 0xcf, 0x3, 0xcf, 
       0x3, 0xcf, 0x3, 0xcf, 0x3, 0xcf, 0x5, 0xcf, 0x9db, 0xa, 0xcf, 0x3, 
       0xcf, 0x3, 0xcf, 0x3, 0xcf, 0x5, 0xcf, 0x9e0, 0xa, 0xcf, 0x3, 0xcf, 
       0x3, 0xcf, 0x3, 0xcf, 0x3, 0xcf, 0x3, 0xcf, 0x5, 0xcf, 0x9e7, 0xa, 
       0xcf, 0x3, 0xcf, 0x3, 0xcf, 0x3, 0xcf, 0x5, 0xcf, 0x9ec, 0xa, 0xcf, 
       0x3, 0xcf, 0x3, 0xcf, 0x3, 0xcf, 0x3, 0xcf, 0x3, 0xcf, 0x3, 0xcf, 
       0x3, 0xcf, 0x5, 0xcf, 0x9f5, 0xa, 0xcf, 0x3, 0xcf, 0x3, 0xcf, 0x3, 
       0xcf, 0x5, 0xcf, 0x9fa, 0xa, 0xcf, 0x3, 0xcf, 0x3, 0xcf, 0x5, 0xcf, 
       0x9fe, 0xa, 0xcf, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x7, 0xd0, 0xa03, 
       0xa, 0xd0, 0xc, 0xd0, 0xe, 0xd0, 0xa06, 0xb, 0xd0, 0x3, 0xd1, 0x3, 
       0xd1, 0x3, 0xd1, 0x5, 0xd1, 0xa0b, 0xa, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 
       0x3, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x5, 0xd1, 0xa12, 0xa, 0xd1, 0x3, 
       0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x5, 0xd1, 0xa19, 
       0xa, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 
       0x5, 0xd1, 0xa20, 0xa, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x3, 
       0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x5, 0xd1, 0xa28, 0xa, 0xd1, 0x3, 0xd1, 
       0x3, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x5, 0xd1, 0xa2f, 0xa, 
       0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x3, 
       0xd1, 0x5, 0xd1, 0xa37, 0xa, 0xd1, 0x3, 0xd2, 0x3, 0xd2, 0x5, 0xd2, 
       0xa3b, 0xa, 0xd2, 0x3, 0xd2, 0x3, 0xd2, 0x3, 0xd3, 0x3, 0xd3, 0x3, 
       0xd3, 0x5, 0xd3, 0xa42, 0xa, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 
       0x3, 0xd3, 0x3, 0xd3, 0x5, 0xd3, 0xa49, 0xa, 0xd3, 0x3, 0xd3, 0x3, 
       0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x5, 0xd3, 0xa50, 0xa, 0xd3, 
       0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 
       0x5, 0xd3, 0xa58, 0xa, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 
       0xd3, 0x3, 0xd3, 0x5, 0xd3, 0xa5f, 0xa, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 
       0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x5, 0xd3, 0xa67, 0xa, 
       0xd3, 0x3, 0xd4, 0x3, 0xd4, 0x3, 0xd4, 0x3, 0xd4, 0x5, 0xd4, 0xa6d, 
       0xa, 0xd4, 0x3, 0xd4, 0x3, 0xd4, 0x3, 0xd4, 0x3, 0xd4, 0x5, 0xd4, 
       0xa73, 0xa, 0xd4, 0x3, 0xd4, 0x3, 0xd4, 0x3, 0xd4, 0x3, 0xd4, 0x3, 
       0xd4, 0x3, 0xd4, 0x3, 0xd4, 0x3, 0xd4, 0x3, 0xd4, 0x3, 0xd4, 0x5, 
       0xd4, 0xa7f, 0xa, 0xd4, 0x3, 0xd5, 0x6, 0xd5, 0xa82, 0xa, 0xd5, 0xd, 
       0xd5, 0xe, 0xd5, 0xa83, 0x3, 0xd6, 0x7, 0xd6, 0xa87, 0xa, 0xd6, 0xc, 
       0xd6, 0xe, 0xd6, 0xa8a, 0xb, 0xd6, 0x3, 0xd6, 0x3, 0xd6, 0x3, 0xd6, 
       0x3, 0xd6, 0x3, 0xd7, 0x3, 0xd7, 0x3, 0xd8, 0x3, 0xd8, 0x5, 0xd8, 
       0xa94, 0xa, 0xd8, 0x3, 0xd9, 0x3, 0xd9, 0x3, 0xd9, 0x3, 0xd9, 0x3, 
       0xda, 0x3, 0xda, 0x3, 0xda, 0x5, 0xda, 0xa9d, 0xa, 0xda, 0x3, 0xda, 
       0x3, 0xda, 0x3, 0xda, 0x3, 0xda, 0x3, 0xda, 0x5, 0xda, 0xaa4, 0xa, 
       0xda, 0x3, 0xdb, 0x3, 0xdb, 0x3, 0xdb, 0x7, 0xdb, 0xaa9, 0xa, 0xdb, 
       0xc, 0xdb, 0xe, 0xdb, 0xaac, 0xb, 0xdb, 0x3, 0xdc, 0x3, 0xdc, 0x5, 
       0xdc, 0xab0, 0xa, 0xdc, 0x3, 0xdd, 0x3, 0xdd, 0x5, 0xdd, 0xab4, 0xa, 
       0xdd, 0x3, 0xde, 0x3, 0xde, 0x3, 0xde, 0x3, 0xde, 0x3, 0xdf, 0x3, 
       0xdf, 0x3, 0xdf, 0x5, 0xdf, 0xabd, 0xa, 0xdf, 0x3, 0xe0, 0x3, 0xe0, 
       0x3, 0xe1, 0x3, 0xe1, 0x3, 0xe1, 0x3, 0xe1, 0x3, 0xe1, 0x3, 0xe1, 
       0x3, 0xe1, 0x5, 0xe1, 0xac8, 0xa, 0xe1, 0x5, 0xe1, 0xaca, 0xa, 0xe1, 
       0x3, 0xe2, 0x3, 0xe2, 0x3, 0xe2, 0x3, 0xe2, 0x3, 0xe2, 0x3, 0xe2, 
       0x7, 0xe2, 0xad2, 0xa, 0xe2, 0xc, 0xe2, 0xe, 0xe2, 0xad5, 0xb, 0xe2, 
       0x3, 0xe3, 0x3, 0xe3, 0x3, 0xe3, 0x3, 0xe3, 0x3, 0xe3, 0x3, 0xe3, 
       0x7, 0xe3, 0xadd, 0xa, 0xe3, 0xc, 0xe3, 0xe, 0xe3, 0xae0, 0xb, 0xe3, 
       0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 
       0x7, 0xe4, 0xae8, 0xa, 0xe4, 0xc, 0xe4, 0xe, 0xe4, 0xaeb, 0xb, 0xe4, 
       0x3, 0xe5, 0x3, 0xe5, 0x3, 0xe5, 0x3, 0xe5, 0x3, 0xe5, 0x3, 0xe5, 
       0x7, 0xe5, 0xaf3, 0xa, 0xe5, 0xc, 0xe5, 0xe, 0xe5, 0xaf6, 0xb, 0xe5, 
       0x3, 0xe6, 0x3, 0xe6, 0x3, 0xe6, 0x3, 0xe6, 0x3, 0xe6, 0x3, 0xe6, 
       0x7, 0xe6, 0xafe, 0xa, 0xe6, 0xc, 0xe6, 0xe, 0xe6, 0xb01, 0xb, 0xe6, 
       0x3, 0xe7, 0x3, 0xe7, 0x3, 0xe7, 0x3, 0xe7, 0x3, 0xe7, 0x3, 0xe7, 
       0x3, 0xe7, 0x3, 0xe7, 0x3, 0xe7, 0x7, 0xe7, 0xb0c, 0xa, 0xe7, 0xc, 
       0xe7, 0xe, 0xe7, 0xb0f, 0xb, 0xe7, 0x3, 0xe8, 0x3, 0xe8, 0x3, 0xe8, 
       0x3, 0xe8, 0x3, 0xe8, 0x3, 0xe8, 0x3, 0xe8, 0x3, 0xe8, 0x3, 0xe8, 
       0x3, 0xe8, 0x3, 0xe8, 0x3, 0xe8, 0x3, 0xe8, 0x3, 0xe8, 0x3, 0xe8, 
       0x3, 0xe8, 0x3, 0xe8, 0x3, 0xe8, 0x7, 0xe8, 0xb23, 0xa, 0xe8, 0xc, 
       0xe8, 0xe, 0xe8, 0xb26, 0xb, 0xe8, 0x3, 0xe9, 0x3, 0xe9, 0x3, 0xe9, 
       0x3, 0xe9, 0x3, 0xe9, 0x3, 0xe9, 0x3, 0xe9, 0x3, 0xe9, 0x3, 0xe9, 
       0x3, 0xe9, 0x3, 0xe9, 0x3, 0xe9, 0x3, 0xe9, 0x3, 0xe9, 0x3, 0xe9, 
       0x3, 0xe9, 0x7, 0xe9, 0xb38, 0xa, 0xe9, 0xc, 0xe9, 0xe, 0xe9, 0xb3b, 
       0xb, 0xe9, 0x3, 0xea, 0x3, 0xea, 0x3, 0xea, 0x3, 0xea, 0x3, 0xea, 
       0x3, 0xea, 0x3, 0xea, 0x3, 0xea, 0x3, 0xea, 0x7, 0xea, 0xb46, 0xa, 
       0xea, 0xc, 0xea, 0xe, 0xea, 0xb49, 0xb, 0xea, 0x3, 0xeb, 0x3, 0xeb, 
       0x3, 0xeb, 0x3, 0xeb, 0x3, 0xeb, 0x3, 0xeb, 0x3, 0xeb, 0x3, 0xeb, 
       0x3, 0xeb, 0x3, 0xeb, 0x3, 0xeb, 0x3, 0xeb, 0x7, 0xeb, 0xb57, 0xa, 
       0xeb, 0xc, 0xeb, 0xe, 0xeb, 0xb5a, 0xb, 0xeb, 0x3, 0xec, 0x3, 0xec, 
       0x3, 0xec, 0x3, 0xec, 0x3, 0xec, 0x3, 0xec, 0x3, 0xec, 0x5, 0xec, 
       0xb63, 0xa, 0xec, 0x3, 0xed, 0x3, 0xed, 0x3, 0xed, 0x3, 0xee, 0x3, 
       0xee, 0x3, 0xee, 0x3, 0xef, 0x3, 0xef, 0x3, 0xef, 0x3, 0xef, 0x3, 
       0xef, 0x3, 0xef, 0x5, 0xef, 0xb71, 0xa, 0xef, 0x3, 0xf0, 0x3, 0xf0, 
       0x5, 0xf0, 0xb75, 0xa, 0xf0, 0x3, 0xf0, 0x3, 0xf0, 0x7, 0xf0, 0xb79, 
       0xa, 0xf0, 0xc, 0xf0, 0xe, 0xf0, 0xb7c, 0xb, 0xf0, 0x3, 0xf1, 0x3, 
       0xf1, 0x3, 0xf1, 0x3, 0xf2, 0x3, 0xf2, 0x3, 0xf3, 0x3, 0xf3, 0x3, 
       0xf3, 0x3, 0xf4, 0x3, 0xf4, 0x3, 0xf5, 0x3, 0xf5, 0x3, 0xf5, 0x3, 
       0xf5, 0x3, 0xf5, 0x3, 0xf5, 0x3, 0xf5, 0x3, 0xf5, 0x7, 0xf5, 0xb90, 
       0xa, 0xf5, 0xc, 0xf5, 0xe, 0xf5, 0xb93, 0xb, 0xf5, 0x3, 0xf5, 0x3, 
       0xf5, 0x3, 0xf5, 0x3, 0xf5, 0x3, 0xf5, 0x3, 0xf5, 0x7, 0xf5, 0xb9b, 
       0xa, 0xf5, 0xc, 0xf5, 0xe, 0xf5, 0xb9e, 0xb, 0xf5, 0x3, 0xf5, 0x3, 
       0xf5, 0x3, 0xf5, 0x5, 0xf5, 0xba3, 0xa, 0xf5, 0x3, 0xf6, 0x3, 0xf6, 
       0x3, 0xf6, 0x2, 0x10, 0x34, 0x36, 0x3a, 0x40, 0x1c2, 0x1c4, 0x1c6, 
       0x1c8, 0x1ca, 0x1cc, 0x1ce, 0x1d0, 0x1d2, 0x1d4, 0xf7, 0x2, 0x4, 
       0x6, 0x8, 0xa, 0xc, 0xe, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 
       0x1e, 0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e, 0x30, 0x32, 
       0x34, 0x36, 0x38, 0x3a, 0x3c, 0x3e, 0x40, 0x42, 0x44, 0x46, 0x48, 
       0x4a, 0x4c, 0x4e, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e, 
       0x60, 0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e, 0x70, 0x72, 0x74, 
       0x76, 0x78, 0x7a, 0x7c, 0x7e, 0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 
       0x8c, 0x8e, 0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e, 0xa0, 
       0xa2, 0xa4, 0xa6, 0xa8, 0xaa, 0xac, 0xae, 0xb0, 0xb2, 0xb4, 0xb6, 
       0xb8, 0xba, 0xbc, 0xbe, 0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 
       0xce, 0xd0, 0xd2, 0xd4, 0xd6, 0xd8, 0xda, 0xdc, 0xde, 0xe0, 0xe2, 
       0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee, 0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 
       0xfa, 0xfc, 0xfe, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10a, 0x10c, 
       0x10e, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11a, 0x11c, 0x11e, 0x120, 
       0x122, 0x124, 0x126, 0x128, 0x12a, 0x12c, 0x12e, 0x130, 0x132, 0x134, 
       0x136, 0x138, 0x13a, 0x13c, 0x13e, 0x140, 0x142, 0x144, 0x146, 0x148, 
       0x14a, 0x14c, 0x14e, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15a, 0x15c, 
       0x15e, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16a, 0x16c, 0x16e, 0x170, 
       0x172, 0x174, 0x176, 0x178, 0x17a, 0x17c, 0x17e, 0x180, 0x182, 0x184, 
       0x186, 0x188, 0x18a, 0x18c, 0x18e, 0x190, 0x192, 0x194, 0x196, 0x198, 
       0x19a, 0x19c, 0x19e, 0x1a0, 0x1a2, 0x1a4, 0x1a6, 0x1a8, 0x1aa, 0x1ac, 
       0x1ae, 0x1b0, 0x1b2, 0x1b4, 0x1b6, 0x1b8, 0x1ba, 0x1bc, 0x1be, 0x1c0, 
       0x1c2, 0x1c4, 0x1c6, 0x1c8, 0x1ca, 0x1cc, 0x1ce, 0x1d0, 0x1d2, 0x1d4, 
       0x1d6, 0x1d8, 0x1da, 0x1dc, 0x1de, 0x1e0, 0x1e2, 0x1e4, 0x1e6, 0x1e8, 
       0x1ea, 0x2, 0x8, 0x3, 0x2, 0x40, 0x45, 0x7, 0x2, 0x11, 0x11, 0x14, 
       0x14, 0x27, 0x27, 0x29, 0x29, 0x31, 0x31, 0x4, 0x2, 0x1a, 0x1a, 0x20, 
       0x20, 0x4, 0x2, 0xc, 0xc, 0x32, 0x32, 0x4, 0x2, 0x52, 0x52, 0x6a, 
       0x74, 0x4, 0x2, 0x3, 0xb, 0x75, 0x75, 0x2, 0xca5, 0x2, 0x1ec, 0x3, 
       0x2, 0x2, 0x2, 0x4, 0x1fc, 0x3, 0x2, 0x2, 0x2, 0x6, 0x200, 0x3, 0x2, 
       0x2, 0x2, 0x8, 0x202, 0x3, 0x2, 0x2, 0x2, 0xa, 0x204, 0x3, 0x2, 0x2, 
       0x2, 0xc, 0x209, 0x3, 0x2, 0x2, 0x2, 0xe, 0x20d, 0x3, 0x2, 0x2, 0x2, 
       0x10, 0x22c, 0x3, 0x2, 0x2, 0x2, 0x12, 0x22e, 0x3, 0x2, 0x2, 0x2, 
       0x14, 0x23c, 0x3, 0x2, 0x2, 0x2, 0x16, 0x243, 0x3, 0x2, 0x2, 0x2, 
       0x18, 0x245, 0x3, 0x2, 0x2, 0x2, 0x1a, 0x247, 0x3, 0x2, 0x2, 0x2, 
       0x1c, 0x24c, 0x3, 0x2, 0x2, 0x2, 0x1e, 0x25a, 0x3, 0x2, 0x2, 0x2, 
       0x20, 0x25f, 0x3, 0x2, 0x2, 0x2, 0x22, 0x274, 0x3, 0x2, 0x2, 0x2, 
       0x24, 0x27b, 0x3, 0x2, 0x2, 0x2, 0x26, 0x287, 0x3, 0x2, 0x2, 0x2, 
       0x28, 0x289, 0x3, 0x2, 0x2, 0x2, 0x2a, 0x28c, 0x3, 0x2, 0x2, 0x2, 
       0x2c, 0x290, 0x3, 0x2, 0x2, 0x2, 0x2e, 0x29a, 0x3, 0x2, 0x2, 0x2, 
       0x30, 0x29f, 0x3, 0x2, 0x2, 0x2, 0x32, 0x2aa, 0x3, 0x2, 0x2, 0x2, 
       0x34, 0x2ac, 0x3, 0x2, 0x2, 0x2, 0x36, 0x2b7, 0x3, 0x2, 0x2, 0x2, 
       0x38, 0x2c7, 0x3, 0x2, 0x2, 0x2, 0x3a, 0x2c9, 0x3, 0x2, 0x2, 0x2, 
       0x3c, 0x2d9, 0x3, 0x2, 0x2, 0x2, 0x3e, 0x2db, 0x3, 0x2, 0x2, 0x2, 
       0x40, 0x2dd, 0x3, 0x2, 0x2, 0x2, 0x42, 0x2ea, 0x3, 0x2, 0x2, 0x2, 
       0x44, 0x2ed, 0x3, 0x2, 0x2, 0x2, 0x46, 0x300, 0x3, 0x2, 0x2, 0x2, 
       0x48, 0x308, 0x3, 0x2, 0x2, 0x2, 0x4a, 0x30f, 0x3, 0x2, 0x2, 0x2, 
       0x4c, 0x315, 0x3, 0x2, 0x2, 0x2, 0x4e, 0x317, 0x3, 0x2, 0x2, 0x2, 
       0x50, 0x31b, 0x3, 0x2, 0x2, 0x2, 0x52, 0x321, 0x3, 0x2, 0x2, 0x2, 
       0x54, 0x328, 0x3, 0x2, 0x2, 0x2, 0x56, 0x332, 0x3, 0x2, 0x2, 0x2, 
       0x58, 0x337, 0x3, 0x2, 0x2, 0x2, 0x5a, 0x381, 0x3, 0x2, 0x2, 0x2, 
       0x5c, 0x383, 0x3, 0x2, 0x2, 0x2, 0x5e, 0x387, 0x3, 0x2, 0x2, 0x2, 
       0x60, 0x38c, 0x3, 0x2, 0x2, 0x2, 0x62, 0x3a4, 0x3, 0x2, 0x2, 0x2, 
       0x64, 0x3a6, 0x3, 0x2, 0x2, 0x2, 0x66, 0x3aa, 0x3, 0x2, 0x2, 0x2, 
       0x68, 0x3b2, 0x3, 0x2, 0x2, 0x2, 0x6a, 0x3b5, 0x3, 0x2, 0x2, 0x2, 
       0x6c, 0x3b8, 0x3, 0x2, 0x2, 0x2, 0x6e, 0x3c0, 0x3, 0x2, 0x2, 0x2, 
       0x70, 0x3cd, 0x3, 0x2, 0x2, 0x2, 0x72, 0x3d4, 0x3, 0x2, 0x2, 0x2, 
       0x74, 0x3d9, 0x3, 0x2, 0x2, 0x2, 0x76, 0x3e8, 0x3, 0x2, 0x2, 0x2, 
       0x78, 0x3ea, 0x3, 0x2, 0x2, 0x2, 0x7a, 0x3f2, 0x3, 0x2, 0x2, 0x2, 
       0x7c, 0x3f7, 0x3, 0x2, 0x2, 0x2, 0x7e, 0x3fd, 0x3, 0x2, 0x2, 0x2, 
       0x80, 0x401, 0x3, 0x2, 0x2, 0x2, 0x82, 0x405, 0x3, 0x2, 0x2, 0x2, 
       0x84, 0x40a, 0x3, 0x2, 0x2, 0x2, 0x86, 0x40e, 0x3, 0x2, 0x2, 0x2, 
       0x88, 0x427, 0x3, 0x2, 0x2, 0x2, 0x8a, 0x429, 0x3, 0x2, 0x2, 0x2, 
       0x8c, 0x434, 0x3, 0x2, 0x2, 0x2, 0x8e, 0x438, 0x3, 0x2, 0x2, 0x2, 
       0x90, 0x43a, 0x3, 0x2, 0x2, 0x2, 0x92, 0x43c, 0x3, 0x2, 0x2, 0x2, 
       0x94, 0x43e, 0x3, 0x2, 0x2, 0x2, 0x96, 0x449, 0x3, 0x2, 0x2, 0x2, 
       0x98, 0x44e, 0x3, 0x2, 0x2, 0x2, 0x9a, 0x45e, 0x3, 0x2, 0x2, 0x2, 
       0x9c, 0x471, 0x3, 0x2, 0x2, 0x2, 0x9e, 0x475, 0x3, 0x2, 0x2, 0x2, 
       0xa0, 0x477, 0x3, 0x2, 0x2, 0x2, 0xa2, 0x486, 0x3, 0x2, 0x2, 0x2, 
       0xa4, 0x498, 0x3, 0x2, 0x2, 0x2, 0xa6, 0x49d, 0x3, 0x2, 0x2, 0x2, 
       0xa8, 0x4a5, 0x3, 0x2, 0x2, 0x2, 0xaa, 0x4b8, 0x3, 0x2, 0x2, 0x2, 
       0xac, 0x4bd, 0x3, 0x2, 0x2, 0x2, 0xae, 0x4c8, 0x3, 0x2, 0x2, 0x2, 
       0xb0, 0x4cb, 0x3, 0x2, 0x2, 0x2, 0xb2, 0x4d5, 0x3, 0x2, 0x2, 0x2, 
       0xb4, 0x4d9, 0x3, 0x2, 0x2, 0x2, 0xb6, 0x4db, 0x3, 0x2, 0x2, 0x2, 
       0xb8, 0x4dd, 0x3, 0x2, 0x2, 0x2, 0xba, 0x4e3, 0x3, 0x2, 0x2, 0x2, 
       0xbc, 0x4f0, 0x3, 0x2, 0x2, 0x2, 0xbe, 0x4f3, 0x3, 0x2, 0x2, 0x2, 
       0xc0, 0x4fc, 0x3, 0x2, 0x2, 0x2, 0xc2, 0x4fe, 0x3, 0x2, 0x2, 0x2, 
       0xc4, 0x535, 0x3, 0x2, 0x2, 0x2, 0xc6, 0x53a, 0x3, 0x2, 0x2, 0x2, 
       0xc8, 0x544, 0x3, 0x2, 0x2, 0x2, 0xca, 0x550, 0x3, 0x2, 0x2, 0x2, 
       0xcc, 0x55b, 0x3, 0x2, 0x2, 0x2, 0xce, 0x569, 0x3, 0x2, 0x2, 0x2, 
       0xd0, 0x56b, 0x3, 0x2, 0x2, 0x2, 0xd2, 0x574, 0x3, 0x2, 0x2, 0x2, 
       0xd4, 0x579, 0x3, 0x2, 0x2, 0x2, 0xd6, 0x58d, 0x3, 0x2, 0x2, 0x2, 
       0xd8, 0x58f, 0x3, 0x2, 0x2, 0x2, 0xda, 0x592, 0x3, 0x2, 0x2, 0x2, 
       0xdc, 0x5a0, 0x3, 0x2, 0x2, 0x2, 0xde, 0x5a5, 0x3, 0x2, 0x2, 0x2, 
       0xe0, 0x5b0, 0x3, 0x2, 0x2, 0x2, 0xe2, 0x5b5, 0x3, 0x2, 0x2, 0x2, 
       0xe4, 0x5c2, 0x3, 0x2, 0x2, 0x2, 0xe6, 0x5c7, 0x3, 0x2, 0x2, 0x2, 
       0xe8, 0x5cf, 0x3, 0x2, 0x2, 0x2, 0xea, 0x5dd, 0x3, 0x2, 0x2, 0x2, 
       0xec, 0x5e2, 0x3, 0x2, 0x2, 0x2, 0xee, 0x5f4, 0x3, 0x2, 0x2, 0x2, 
       0xf0, 0x5f6, 0x3, 0x2, 0x2, 0x2, 0xf2, 0x5fc, 0x3, 0x2, 0x2, 0x2, 
       0xf4, 0x5fe, 0x3, 0x2, 0x2, 0x2, 0xf6, 0x606, 0x3, 0x2, 0x2, 0x2, 
       0xf8, 0x60e, 0x3, 0x2, 0x2, 0x2, 0xfa, 0x615, 0x3, 0x2, 0x2, 0x2, 
       0xfc, 0x617, 0x3, 0x2, 0x2, 0x2, 0xfe, 0x620, 0x3, 0x2, 0x2, 0x2, 
       0x100, 0x628, 0x3, 0x2, 0x2, 0x2, 0x102, 0x62b, 0x3, 0x2, 0x2, 0x2, 
       0x104, 0x631, 0x3, 0x2, 0x2, 0x2, 0x106, 0x63a, 0x3, 0x2, 0x2, 0x2, 
       0x108, 0x642, 0x3, 0x2, 0x2, 0x2, 0x10a, 0x649, 0x3, 0x2, 0x2, 0x2, 
       0x10c, 0x650, 0x3, 0x2, 0x2, 0x2, 0x10e, 0x652, 0x3, 0x2, 0x2, 0x2, 
       0x110, 0x658, 0x3, 0x2, 0x2, 0x2, 0x112, 0x664, 0x3, 0x2, 0x2, 0x2, 
       0x114, 0x66b, 0x3, 0x2, 0x2, 0x2, 0x116, 0x679, 0x3, 0x2, 0x2, 0x2, 
       0x118, 0x67b, 0x3, 0x2, 0x2, 0x2, 0x11a, 0x67d, 0x3, 0x2, 0x2, 0x2, 
       0x11c, 0x681, 0x3, 0x2, 0x2, 0x2, 0x11e, 0x685, 0x3, 0x2, 0x2, 0x2, 
       0x120, 0x68f, 0x3, 0x2, 0x2, 0x2, 0x122, 0x691, 0x3, 0x2, 0x2, 0x2, 
       0x124, 0x697, 0x3, 0x2, 0x2, 0x2, 0x126, 0x69f, 0x3, 0x2, 0x2, 0x2, 
       0x128, 0x6b1, 0x3, 0x2, 0x2, 0x2, 0x12a, 0x6b3, 0x3, 0x2, 0x2, 0x2, 
       0x12c, 0x6b9, 0x3, 0x2, 0x2, 0x2, 0x12e, 0x6c8, 0x3, 0x2, 0x2, 0x2, 
       0x130, 0x6cc, 0x3, 0x2, 0x2, 0x2, 0x132, 0x6da, 0x3, 0x2, 0x2, 0x2, 
       0x134, 0x6dc, 0x3, 0x2, 0x2, 0x2, 0x136, 0x6de, 0x3, 0x2, 0x2, 0x2, 
       0x138, 0x6e4, 0x3, 0x2, 0x2, 0x2, 0x13a, 0x6ea, 0x3, 0x2, 0x2, 0x2, 
       0x13c, 0x6f4, 0x3, 0x2, 0x2, 0x2, 0x13e, 0x6f8, 0x3, 0x2, 0x2, 0x2, 
       0x140, 0x6fa, 0x3, 0x2, 0x2, 0x2, 0x142, 0x70a, 0x3, 0x2, 0x2, 0x2, 
       0x144, 0x71c, 0x3, 0x2, 0x2, 0x2, 0x146, 0x71e, 0x3, 0x2, 0x2, 0x2, 
       0x148, 0x720, 0x3, 0x2, 0x2, 0x2, 0x14a, 0x728, 0x3, 0x2, 0x2, 0x2, 
       0x14c, 0x737, 0x3, 0x2, 0x2, 0x2, 0x14e, 0x746, 0x3, 0x2, 0x2, 0x2, 
       0x150, 0x74c, 0x3, 0x2, 0x2, 0x2, 0x152, 0x752, 0x3, 0x2, 0x2, 0x2, 
       0x154, 0x758, 0x3, 0x2, 0x2, 0x2, 0x156, 0x75c, 0x3, 0x2, 0x2, 0x2, 
       0x158, 0x76e, 0x3, 0x2, 0x2, 0x2, 0x15a, 0x771, 0x3, 0x2, 0x2, 0x2, 
       0x15c, 0x775, 0x3, 0x2, 0x2, 0x2, 0x15e, 0x77e, 0x3, 0x2, 0x2, 0x2, 
       0x160, 0x784, 0x3, 0x2, 0x2, 0x2, 0x162, 0x78c, 0x3, 0x2, 0x2, 0x2, 
       0x164, 0x78f, 0x3, 0x2, 0x2, 0x2, 0x166, 0x798, 0x3, 0x2, 0x2, 0x2, 
       0x168, 0x79f, 0x3, 0x2, 0x2, 0x2, 0x16a, 0x7b3, 0x3, 0x2, 0x2, 0x2, 
       0x16c, 0x7b7, 0x3, 0x2, 0x2, 0x2, 0x16e, 0x7bb, 0x3, 0x2, 0x2, 0x2, 
       0x170, 0x7d3, 0x3, 0x2, 0x2, 0x2, 0x172, 0x7d5, 0x3, 0x2, 0x2, 0x2, 
       0x174, 0x7f3, 0x3, 0x2, 0x2, 0x2, 0x176, 0x7fa, 0x3, 0x2, 0x2, 0x2, 
       0x178, 0x7fc, 0x3, 0x2, 0x2, 0x2, 0x17a, 0x802, 0x3, 0x2, 0x2, 0x2, 
       0x17c, 0x82c, 0x3, 0x2, 0x2, 0x2, 0x17e, 0x82e, 0x3, 0x2, 0x2, 0x2, 
       0x180, 0x857, 0x3, 0x2, 0x2, 0x2, 0x182, 0x86a, 0x3, 0x2, 0x2, 0x2, 
       0x184, 0x8bf, 0x3, 0x2, 0x2, 0x2, 0x186, 0x8c1, 0x3, 0x2, 0x2, 0x2, 
       0x188, 0x913, 0x3, 0x2, 0x2, 0x2, 0x18a, 0x918, 0x3, 0x2, 0x2, 0x2, 
       0x18c, 0x927, 0x3, 0x2, 0x2, 0x2, 0x18e, 0x929, 0x3, 0x2, 0x2, 0x2, 
       0x190, 0x935, 0x3, 0x2, 0x2, 0x2, 0x192, 0x941, 0x3, 0x2, 0x2, 0x2, 
       0x194, 0x94d, 0x3, 0x2, 0x2, 0x2, 0x196, 0x966, 0x3, 0x2, 0x2, 0x2, 
       0x198, 0x9b7, 0x3, 0x2, 0x2, 0x2, 0x19a, 0x9b9, 0x3, 0x2, 0x2, 0x2, 
       0x19c, 0x9fd, 0x3, 0x2, 0x2, 0x2, 0x19e, 0x9ff, 0x3, 0x2, 0x2, 0x2, 
       0x1a0, 0xa36, 0x3, 0x2, 0x2, 0x2, 0x1a2, 0xa38, 0x3, 0x2, 0x2, 0x2, 
       0x1a4, 0xa66, 0x3, 0x2, 0x2, 0x2, 0x1a6, 0xa7e, 0x3, 0x2, 0x2, 0x2, 
       0x1a8, 0xa81, 0x3, 0x2, 0x2, 0x2, 0x1aa, 0xa88, 0x3, 0x2, 0x2, 0x2, 
       0x1ac, 0xa8f, 0x3, 0x2, 0x2, 0x2, 0x1ae, 0xa93, 0x3, 0x2, 0x2, 0x2, 
       0x1b0, 0xa95, 0x3, 0x2, 0x2, 0x2, 0x1b2, 0xaa3, 0x3, 0x2, 0x2, 0x2, 
       0x1b4, 0xaa5, 0x3, 0x2, 0x2, 0x2, 0x1b6, 0xaaf, 0x3, 0x2, 0x2, 0x2, 
       0x1b8, 0xab3, 0x3, 0x2, 0x2, 0x2, 0x1ba, 0xab5, 0x3, 0x2, 0x2, 0x2, 
       0x1bc, 0xabc, 0x3, 0x2, 0x2, 0x2, 0x1be, 0xabe, 0x3, 0x2, 0x2, 0x2, 
       0x1c0, 0xac9, 0x3, 0x2, 0x2, 0x2, 0x1c2, 0xacb, 0x3, 0x2, 0x2, 0x2, 
       0x1c4, 0xad6, 0x3, 0x2, 0x2, 0x2, 0x1c6, 0xae1, 0x3, 0x2, 0x2, 0x2, 
       0x1c8, 0xaec, 0x3, 0x2, 0x2, 0x2, 0x1ca, 0xaf7, 0x3, 0x2, 0x2, 0x2, 
       0x1cc, 0xb02, 0x3, 0x2, 0x2, 0x2, 0x1ce, 0xb10, 0x3, 0x2, 0x2, 0x2, 
       0x1d0, 0xb27, 0x3, 0x2, 0x2, 0x2, 0x1d2, 0xb3c, 0x3, 0x2, 0x2, 0x2, 
       0x1d4, 0xb4a, 0x3, 0x2, 0x2, 0x2, 0x1d6, 0xb62, 0x3, 0x2, 0x2, 0x2, 
       0x1d8, 0xb64, 0x3, 0x2, 0x2, 0x2, 0x1da, 0xb67, 0x3, 0x2, 0x2, 0x2, 
       0x1dc, 0xb70, 0x3, 0x2, 0x2, 0x2, 0x1de, 0xb74, 0x3, 0x2, 0x2, 0x2, 
       0x1e0, 0xb7d, 0x3, 0x2, 0x2, 0x2, 0x1e2, 0xb80, 0x3, 0x2, 0x2, 0x2, 
       0x1e4, 0xb82, 0x3, 0x2, 0x2, 0x2, 0x1e6, 0xb85, 0x3, 0x2, 0x2, 0x2, 
       0x1e8, 0xba2, 0x3, 0x2, 0x2, 0x2, 0x1ea, 0xba4, 0x3, 0x2, 0x2, 0x2, 
       0x1ec, 0x1ed, 0x9, 0x2, 0x2, 0x2, 0x1ed, 0x3, 0x3, 0x2, 0x2, 0x2, 
       0x1ee, 0x1f0, 0x5, 0xf2, 0x7a, 0x2, 0x1ef, 0x1ee, 0x3, 0x2, 0x2, 
       0x2, 0x1f0, 0x1f3, 0x3, 0x2, 0x2, 0x2, 0x1f1, 0x1ef, 0x3, 0x2, 0x2, 
       0x2, 0x1f1, 0x1f2, 0x3, 0x2, 0x2, 0x2, 0x1f2, 0x1f4, 0x3, 0x2, 0x2, 
       0x2, 0x1f3, 0x1f1, 0x3, 0x2, 0x2, 0x2, 0x1f4, 0x1fd, 0x5, 0x6, 0x4, 
       0x2, 0x1f5, 0x1f7, 0x5, 0xf2, 0x7a, 0x2, 0x1f6, 0x1f5, 0x3, 0x2, 
       0x2, 0x2, 0x1f7, 0x1fa, 0x3, 0x2, 0x2, 0x2, 0x1f8, 0x1f6, 0x3, 0x2, 
       0x2, 0x2, 0x1f8, 0x1f9, 0x3, 0x2, 0x2, 0x2, 0x1f9, 0x1fb, 0x3, 0x2, 
       0x2, 0x2, 0x1fa, 0x1f8, 0x3, 0x2, 0x2, 0x2, 0x1fb, 0x1fd, 0x7, 0xf, 
       0x2, 0x2, 0x1fc, 0x1f1, 0x3, 0x2, 0x2, 0x2, 0x1fc, 0x1f8, 0x3, 0x2, 
       0x2, 0x2, 0x1fd, 0x5, 0x3, 0x2, 0x2, 0x2, 0x1fe, 0x201, 0x5, 0x8, 
       0x5, 0x2, 0x1ff, 0x201, 0x5, 0xa, 0x6, 0x2, 0x200, 0x1fe, 0x3, 0x2, 
       0x2, 0x2, 0x200, 0x1ff, 0x3, 0x2, 0x2, 0x2, 0x201, 0x7, 0x3, 0x2, 
       0x2, 0x2, 0x202, 0x203, 0x9, 0x3, 0x2, 0x2, 0x203, 0x9, 0x3, 0x2, 
       0x2, 0x2, 0x204, 0x205, 0x9, 0x4, 0x2, 0x2, 0x205, 0xb, 0x3, 0x2, 
       0x2, 0x2, 0x206, 0x20a, 0x5, 0xe, 0x8, 0x2, 0x207, 0x20a, 0x5, 0x1c, 
       0xf, 0x2, 0x208, 0x20a, 0x5, 0x1e, 0x10, 0x2, 0x209, 0x206, 0x3, 
       0x2, 0x2, 0x2, 0x209, 0x207, 0x3, 0x2, 0x2, 0x2, 0x209, 0x208, 0x3, 
       0x2, 0x2, 0x2, 0x20a, 0xd, 0x3, 0x2, 0x2, 0x2, 0x20b, 0x20e, 0x5, 
       0x14, 0xb, 0x2, 0x20c, 0x20e, 0x5, 0x1a, 0xe, 0x2, 0x20d, 0x20b, 
       0x3, 0x2, 0x2, 0x2, 0x20d, 0x20c, 0x3, 0x2, 0x2, 0x2, 0x20e, 0x213, 
       0x3, 0x2, 0x2, 0x2, 0x20f, 0x212, 0x5, 0x12, 0xa, 0x2, 0x210, 0x212, 
       0x5, 0x18, 0xd, 0x2, 0x211, 0x20f, 0x3, 0x2, 0x2, 0x2, 0x211, 0x210, 
       0x3, 0x2, 0x2, 0x2, 0x212, 0x215, 0x3, 0x2, 0x2, 0x2, 0x213, 0x211, 
       0x3, 0x2, 0x2, 0x2, 0x213, 0x214, 0x3, 0x2, 0x2, 0x2, 0x214, 0xf, 
       0x3, 0x2, 0x2, 0x2, 0x215, 0x213, 0x3, 0x2, 0x2, 0x2, 0x216, 0x218, 
       0x5, 0xf2, 0x7a, 0x2, 0x217, 0x216, 0x3, 0x2, 0x2, 0x2, 0x218, 0x21b, 
       0x3, 0x2, 0x2, 0x2, 0x219, 0x217, 0x3, 0x2, 0x2, 0x2, 0x219, 0x21a, 
       0x3, 0x2, 0x2, 0x2, 0x21a, 0x21c, 0x3, 0x2, 0x2, 0x2, 0x21b, 0x219, 
       0x3, 0x2, 0x2, 0x2, 0x21c, 0x21e, 0x5, 0x1ea, 0xf6, 0x2, 0x21d, 0x21f, 
       0x5, 0x2a, 0x16, 0x2, 0x21e, 0x21d, 0x3, 0x2, 0x2, 0x2, 0x21e, 0x21f, 
       0x3, 0x2, 0x2, 0x2, 0x21f, 0x22d, 0x3, 0x2, 0x2, 0x2, 0x220, 0x221, 
       0x5, 0xe, 0x8, 0x2, 0x221, 0x225, 0x7, 0x4e, 0x2, 0x2, 0x222, 0x224, 
       0x5, 0xf2, 0x7a, 0x2, 0x223, 0x222, 0x3, 0x2, 0x2, 0x2, 0x224, 0x227, 
       0x3, 0x2, 0x2, 0x2, 0x225, 0x223, 0x3, 0x2, 0x2, 0x2, 0x225, 0x226, 
       0x3, 0x2, 0x2, 0x2, 0x226, 0x228, 0x3, 0x2, 0x2, 0x2, 0x227, 0x225, 
       0x3, 0x2, 0x2, 0x2, 0x228, 0x22a, 0x5, 0x1ea, 0xf6, 0x2, 0x229, 0x22b, 
       0x5, 0x2a, 0x16, 0x2, 0x22a, 0x229, 0x3, 0x2, 0x2, 0x2, 0x22a, 0x22b, 
       0x3, 0x2, 0x2, 0x2, 0x22b, 0x22d, 0x3, 0x2, 0x2, 0x2, 0x22c, 0x219, 
       0x3, 0x2, 0x2, 0x2, 0x22c, 0x220, 0x3, 0x2, 0x2, 0x2, 0x22d, 0x11, 
       0x3, 0x2, 0x2, 0x2, 0x22e, 0x232, 0x7, 0x4e, 0x2, 0x2, 0x22f, 0x231, 
       0x5, 0xf2, 0x7a, 0x2, 0x230, 0x22f, 0x3, 0x2, 0x2, 0x2, 0x231, 0x234, 
       0x3, 0x2, 0x2, 0x2, 0x232, 0x230, 0x3, 0x2, 0x2, 0x2, 0x232, 0x233, 
       0x3, 0x2, 0x2, 0x2, 0x233, 0x235, 0x3, 0x2, 0x2, 0x2, 0x234, 0x232, 
       0x3, 0x2, 0x2, 0x2, 0x235, 0x237, 0x5, 0x1ea, 0xf6, 0x2, 0x236, 0x238, 
       0x5, 0x2a, 0x16, 0x2, 0x237, 0x236, 0x3, 0x2, 0x2, 0x2, 0x237, 0x238, 
       0x3, 0x2, 0x2, 0x2, 0x238, 0x13, 0x3, 0x2, 0x2, 0x2, 0x239, 0x23b, 
       0x5, 0xf2, 0x7a, 0x2, 0x23a, 0x239, 0x3, 0x2, 0x2, 0x2, 0x23b, 0x23e, 
       0x3, 0x2, 0x2, 0x2, 0x23c, 0x23a, 0x3, 0x2, 0x2, 0x2, 0x23c, 0x23d, 
       0x3, 0x2, 0x2, 0x2, 0x23d, 0x23f, 0x3, 0x2, 0x2, 0x2, 0x23e, 0x23c, 
       0x3, 0x2, 0x2, 0x2, 0x23f, 0x241, 0x5, 0x1ea, 0xf6, 0x2, 0x240, 0x242, 
       0x5, 0x2a, 0x16, 0x2, 0x241, 0x240, 0x3, 0x2, 0x2, 0x2, 0x241, 0x242, 
       0x3, 0x2, 0x2, 0x2, 0x242, 0x15, 0x3, 0x2, 0x2, 0x2, 0x243, 0x244, 
       0x5, 0x10, 0x9, 0x2, 0x244, 0x17, 0x3, 0x2, 0x2, 0x2, 0x245, 0x246, 
       0x5, 0x12, 0xa, 0x2, 0x246, 0x19, 0x3, 0x2, 0x2, 0x2, 0x247, 0x248, 
       0x5, 0x14, 0xb, 0x2, 0x248, 0x1b, 0x3, 0x2, 0x2, 0x2, 0x249, 0x24b, 
       0x5, 0xf2, 0x7a, 0x2, 0x24a, 0x249, 0x3, 0x2, 0x2, 0x2, 0x24b, 0x24e, 
       0x3, 0x2, 0x2, 0x2, 0x24c, 0x24a, 0x3, 0x2, 0x2, 0x2, 0x24c, 0x24d, 
       0x3, 0x2, 0x2, 0x2, 0x24d, 0x24f, 0x3, 0x2, 0x2, 0x2, 0x24e, 0x24c, 
       0x3, 0x2, 0x2, 0x2, 0x24f, 0x250, 0x5, 0x1ea, 0xf6, 0x2, 0x250, 0x1d, 
       0x3, 0x2, 0x2, 0x2, 0x251, 0x252, 0x5, 0x4, 0x3, 0x2, 0x252, 0x253, 
       0x5, 0x20, 0x11, 0x2, 0x253, 0x25b, 0x3, 0x2, 0x2, 0x2, 0x254, 0x255, 
       0x5, 0xe, 0x8, 0x2, 0x255, 0x256, 0x5, 0x20, 0x11, 0x2, 0x256, 0x25b, 
       0x3, 0x2, 0x2, 0x2, 0x257, 0x258, 0x5, 0x1c, 0xf, 0x2, 0x258, 0x259, 
       0x5, 0x20, 0x11, 0x2, 0x259, 0x25b, 0x3, 0x2, 0x2, 0x2, 0x25a, 0x251, 
       0x3, 0x2, 0x2, 0x2, 0x25a, 0x254, 0x3, 0x2, 0x2, 0x2, 0x25a, 0x257, 
       0x3, 0x2, 0x2, 0x2, 0x25b, 0x1f, 0x3, 0x2, 0x2, 0x2, 0x25c, 0x25e, 
       0x5, 0xf2, 0x7a, 0x2, 0x25d, 0x25c, 0x3, 0x2, 0x2, 0x2, 0x25e, 0x261, 
       0x3, 0x2, 0x2, 0x2, 0x25f, 0x25d, 0x3, 0x2, 0x2, 0x2, 0x25f, 0x260, 
       0x3, 0x2, 0x2, 0x2, 0x260, 0x262, 0x3, 0x2, 0x2, 0x2, 0x261, 0x25f, 
       0x3, 0x2, 0x2, 0x2, 0x262, 0x263, 0x7, 0x4a, 0x2, 0x2, 0x263, 0x26e, 
       0x7, 0x4b, 0x2, 0x2, 0x264, 0x266, 0x5, 0xf2, 0x7a, 0x2, 0x265, 0x264, 
       0x3, 0x2, 0x2, 0x2, 0x266, 0x269, 0x3, 0x2, 0x2, 0x2, 0x267, 0x265, 
       0x3, 0x2, 0x2, 0x2, 0x267, 0x268, 0x3, 0x2, 0x2, 0x2, 0x268, 0x26a, 
       0x3, 0x2, 0x2, 0x2, 0x269, 0x267, 0x3, 0x2, 0x2, 0x2, 0x26a, 0x26b, 
       0x7, 0x4a, 0x2, 0x2, 0x26b, 0x26d, 0x7, 0x4b, 0x2, 0x2, 0x26c, 0x267, 
       0x3, 0x2, 0x2, 0x2, 0x26d, 0x270, 0x3, 0x2, 0x2, 0x2, 0x26e, 0x26c, 
       0x3, 0x2, 0x2, 0x2, 0x26e, 0x26f, 0x3, 0x2, 0x2, 0x2, 0x26f, 0x21, 
       0x3, 0x2, 0x2, 0x2, 0x270, 0x26e, 0x3, 0x2, 0x2, 0x2, 0x271, 0x273, 
       0x5, 0x24, 0x13, 0x2, 0x272, 0x271, 0x3, 0x2, 0x2, 0x2, 0x273, 0x276, 
       0x3, 0x2, 0x2, 0x2, 0x274, 0x272, 0x3, 0x2, 0x2, 0x2, 0x274, 0x275, 
       0x3, 0x2, 0x2, 0x2, 0x275, 0x277, 0x3, 0x2, 0x2, 0x2, 0x276, 0x274, 
       0x3, 0x2, 0x2, 0x2, 0x277, 0x279, 0x5, 0x1ea, 0xf6, 0x2, 0x278, 0x27a, 
       0x5, 0x26, 0x14, 0x2, 0x279, 0x278, 0x3, 0x2, 0x2, 0x2, 0x279, 0x27a, 
       0x3, 0x2, 0x2, 0x2, 0x27a, 0x23, 0x3, 0x2, 0x2, 0x2, 0x27b, 0x27c, 
       0x5, 0xf2, 0x7a, 0x2, 0x27c, 0x25, 0x3, 0x2, 0x2, 0x2, 0x27d, 0x27e, 
       0x7, 0x1d, 0x2, 0x2, 0x27e, 0x288, 0x5, 0x1c, 0xf, 0x2, 0x27f, 0x280, 
       0x7, 0x1d, 0x2, 0x2, 0x280, 0x284, 0x5, 0xe, 0x8, 0x2, 0x281, 0x283, 
       0x5, 0x28, 0x15, 0x2, 0x282, 0x281, 0x3, 0x2, 0x2, 0x2, 0x283, 0x286, 
       0x3, 0x2, 0x2, 0x2, 0x284, 0x282, 0x3, 0x2, 0x2, 0x2, 0x284, 0x285, 
       0x3, 0x2, 0x2, 0x2, 0x285, 0x288, 0x3, 0x2, 0x2, 0x2, 0x286, 0x284, 
       0x3, 0x2, 0x2, 0x2, 0x287, 0x27d, 0x3, 0x2, 0x2, 0x2, 0x287, 0x27f, 
       0x3, 0x2, 0x2, 0x2, 0x288, 0x27, 0x3, 0x2, 0x2, 0x2, 0x289, 0x28a, 
       0x7, 0x66, 0x2, 0x2, 0x28a, 0x28b, 0x5, 0x16, 0xc, 0x2, 0x28b, 0x29, 
       0x3, 0x2, 0x2, 0x2, 0x28c, 0x28d, 0x7, 0x54, 0x2, 0x2, 0x28d, 0x28e, 
       0x5, 0x2c, 0x17, 0x2, 0x28e, 0x28f, 0x7, 0x53, 0x2, 0x2, 0x28f, 0x2b, 
       0x3, 0x2, 0x2, 0x2, 0x290, 0x295, 0x5, 0x2e, 0x18, 0x2, 0x291, 0x292, 
       0x7, 0x4d, 0x2, 0x2, 0x292, 0x294, 0x5, 0x2e, 0x18, 0x2, 0x293, 0x291, 
       0x3, 0x2, 0x2, 0x2, 0x294, 0x297, 0x3, 0x2, 0x2, 0x2, 0x295, 0x293, 
       0x3, 0x2, 0x2, 0x2, 0x295, 0x296, 0x3, 0x2, 0x2, 0x2, 0x296, 0x2d, 
       0x3, 0x2, 0x2, 0x2, 0x297, 0x295, 0x3, 0x2, 0x2, 0x2, 0x298, 0x29b, 
       0x5, 0xc, 0x7, 0x2, 0x299, 0x29b, 0x5, 0x30, 0x19, 0x2, 0x29a, 0x298, 
       0x3, 0x2, 0x2, 0x2, 0x29a, 0x299, 0x3, 0x2, 0x2, 0x2, 0x29b, 0x2f, 
       0x3, 0x2, 0x2, 0x2, 0x29c, 0x29e, 0x5, 0xf2, 0x7a, 0x2, 0x29d, 0x29c, 
       0x3, 0x2, 0x2, 0x2, 0x29e, 0x2a1, 0x3, 0x2, 0x2, 0x2, 0x29f, 0x29d, 
       0x3, 0x2, 0x2, 0x2, 0x29f, 0x2a0, 0x3, 0x2, 0x2, 0x2, 0x2a0, 0x2a2, 
       0x3, 0x2, 0x2, 0x2, 0x2a1, 0x29f, 0x3, 0x2, 0x2, 0x2, 0x2a2, 0x2a4, 
       0x7, 0x57, 0x2, 0x2, 0x2a3, 0x2a5, 0x5, 0x32, 0x1a, 0x2, 0x2a4, 0x2a3, 
       0x3, 0x2, 0x2, 0x2, 0x2a4, 0x2a5, 0x3, 0x2, 0x2, 0x2, 0x2a5, 0x31, 
       0x3, 0x2, 0x2, 0x2, 0x2a6, 0x2a7, 0x7, 0x1d, 0x2, 0x2, 0x2a7, 0x2ab, 
       0x5, 0xc, 0x7, 0x2, 0x2a8, 0x2a9, 0x7, 0x34, 0x2, 0x2, 0x2a9, 0x2ab, 
       0x5, 0xc, 0x7, 0x2, 0x2aa, 0x2a6, 0x3, 0x2, 0x2, 0x2, 0x2aa, 0x2a8, 
       0x3, 0x2, 0x2, 0x2, 0x2ab, 0x33, 0x3, 0x2, 0x2, 0x2, 0x2ac, 0x2ad, 
       0x8, 0x1b, 0x1, 0x2, 0x2ad, 0x2ae, 0x5, 0x1ea, 0xf6, 0x2, 0x2ae, 
       0x2b4, 0x3, 0x2, 0x2, 0x2, 0x2af, 0x2b0, 0xc, 0x3, 0x2, 0x2, 0x2b0, 
       0x2b1, 0x7, 0x4e, 0x2, 0x2, 0x2b1, 0x2b3, 0x5, 0x1ea, 0xf6, 0x2, 
       0x2b2, 0x2af, 0x3, 0x2, 0x2, 0x2, 0x2b3, 0x2b6, 0x3, 0x2, 0x2, 0x2, 
       0x2b4, 0x2b2, 0x3, 0x2, 0x2, 0x2, 0x2b4, 0x2b5, 0x3, 0x2, 0x2, 0x2, 
       0x2b5, 0x35, 0x3, 0x2, 0x2, 0x2, 0x2b6, 0x2b4, 0x3, 0x2, 0x2, 0x2, 
       0x2b7, 0x2b8, 0x8, 0x1c, 0x1, 0x2, 0x2b8, 0x2b9, 0x5, 0x1ea, 0xf6, 
       0x2, 0x2b9, 0x2bf, 0x3, 0x2, 0x2, 0x2, 0x2ba, 0x2bb, 0xc, 0x3, 0x2, 
       0x2, 0x2bb, 0x2bc, 0x7, 0x4e, 0x2, 0x2, 0x2bc, 0x2be, 0x5, 0x1ea, 
       0xf6, 0x2, 0x2bd, 0x2ba, 0x3, 0x2, 0x2, 0x2, 0x2be, 0x2c1, 0x3, 0x2, 
       0x2, 0x2, 0x2bf, 0x2bd, 0x3, 0x2, 0x2, 0x2, 0x2bf, 0x2c0, 0x3, 0x2, 
       0x2, 0x2, 0x2c0, 0x37, 0x3, 0x2, 0x2, 0x2, 0x2c1, 0x2bf, 0x3, 0x2, 
       0x2, 0x2, 0x2c2, 0x2c8, 0x5, 0x1ea, 0xf6, 0x2, 0x2c3, 0x2c4, 0x5, 
       0x3a, 0x1e, 0x2, 0x2c4, 0x2c5, 0x7, 0x4e, 0x2, 0x2, 0x2c5, 0x2c6, 
       0x5, 0x1ea, 0xf6, 0x2, 0x2c6, 0x2c8, 0x3, 0x2, 0x2, 0x2, 0x2c7, 0x2c2, 
       0x3, 0x2, 0x2, 0x2, 0x2c7, 0x2c3, 0x3, 0x2, 0x2, 0x2, 0x2c8, 0x39, 
       0x3, 0x2, 0x2, 0x2, 0x2c9, 0x2ca, 0x8, 0x1e, 0x1, 0x2, 0x2ca, 0x2cb, 
       0x5, 0x1ea, 0xf6, 0x2, 0x2cb, 0x2d1, 0x3, 0x2, 0x2, 0x2, 0x2cc, 0x2cd, 
       0xc, 0x3, 0x2, 0x2, 0x2cd, 0x2ce, 0x7, 0x4e, 0x2, 0x2, 0x2ce, 0x2d0, 
       0x5, 0x1ea, 0xf6, 0x2, 0x2cf, 0x2cc, 0x3, 0x2, 0x2, 0x2, 0x2d0, 0x2d3, 
       0x3, 0x2, 0x2, 0x2, 0x2d1, 0x2cf, 0x3, 0x2, 0x2, 0x2, 0x2d1, 0x2d2, 
       0x3, 0x2, 0x2, 0x2, 0x2d2, 0x3b, 0x3, 0x2, 0x2, 0x2, 0x2d3, 0x2d1, 
       0x3, 0x2, 0x2, 0x2, 0x2d4, 0x2da, 0x5, 0x1ea, 0xf6, 0x2, 0x2d5, 0x2d6, 
       0x5, 0x40, 0x21, 0x2, 0x2d6, 0x2d7, 0x7, 0x4e, 0x2, 0x2, 0x2d7, 0x2d8, 
       0x5, 0x1ea, 0xf6, 0x2, 0x2d8, 0x2da, 0x3, 0x2, 0x2, 0x2, 0x2d9, 0x2d4, 
       0x3, 0x2, 0x2, 0x2, 0x2d9, 0x2d5, 0x3, 0x2, 0x2, 0x2, 0x2da, 0x3d, 
       0x3, 0x2, 0x2, 0x2, 0x2db, 0x2dc, 0x5, 0x1ea, 0xf6, 0x2, 0x2dc, 0x3f, 
       0x3, 0x2, 0x2, 0x2, 0x2dd, 0x2de, 0x8, 0x21, 0x1, 0x2, 0x2de, 0x2df, 
       0x5, 0x1ea, 0xf6, 0x2, 0x2df, 0x2e5, 0x3, 0x2, 0x2, 0x2, 0x2e0, 0x2e1, 
       0xc, 0x3, 0x2, 0x2, 0x2e1, 0x2e2, 0x7, 0x4e, 0x2, 0x2, 0x2e2, 0x2e4, 
       0x5, 0x1ea, 0xf6, 0x2, 0x2e3, 0x2e0, 0x3, 0x2, 0x2, 0x2, 0x2e4, 0x2e7, 
       0x3, 0x2, 0x2, 0x2, 0x2e5, 0x2e3, 0x3, 0x2, 0x2, 0x2, 0x2e5, 0x2e6, 
       0x3, 0x2, 0x2, 0x2, 0x2e6, 0x41, 0x3, 0x2, 0x2, 0x2, 0x2e7, 0x2e5, 
       0x3, 0x2, 0x2, 0x2, 0x2e8, 0x2eb, 0x5, 0x44, 0x23, 0x2, 0x2e9, 0x2eb, 
       0x5, 0x46, 0x24, 0x2, 0x2ea, 0x2e8, 0x3, 0x2, 0x2, 0x2, 0x2ea, 0x2e9, 
       0x3, 0x2, 0x2, 0x2, 0x2eb, 0x43, 0x3, 0x2, 0x2, 0x2, 0x2ec, 0x2ee, 
       0x5, 0x48, 0x25, 0x2, 0x2ed, 0x2ec, 0x3, 0x2, 0x2, 0x2, 0x2ed, 0x2ee, 
       0x3, 0x2, 0x2, 0x2, 0x2ee, 0x2f2, 0x3, 0x2, 0x2, 0x2, 0x2ef, 0x2f1, 
       0x5, 0x4c, 0x27, 0x2, 0x2f0, 0x2ef, 0x3, 0x2, 0x2, 0x2, 0x2f1, 0x2f4, 
       0x3, 0x2, 0x2, 0x2, 0x2f2, 0x2f0, 0x3, 0x2, 0x2, 0x2, 0x2f2, 0x2f3, 
       0x3, 0x2, 0x2, 0x2, 0x2f3, 0x2f8, 0x3, 0x2, 0x2, 0x2, 0x2f4, 0x2f2, 
       0x3, 0x2, 0x2, 0x2, 0x2f5, 0x2f7, 0x5, 0x56, 0x2c, 0x2, 0x2f6, 0x2f5, 
       0x3, 0x2, 0x2, 0x2, 0x2f7, 0x2fa, 0x3, 0x2, 0x2, 0x2, 0x2f8, 0x2f6, 
       0x3, 0x2, 0x2, 0x2, 0x2f8, 0x2f9, 0x3, 0x2, 0x2, 0x2, 0x2f9, 0x2fb, 
       0x3, 0x2, 0x2, 0x2, 0x2fa, 0x2f8, 0x3, 0x2, 0x2, 0x2, 0x2fb, 0x2fc, 
       0x7, 0x2, 0x2, 0x3, 0x2fc, 0x45, 0x3, 0x2, 0x2, 0x2, 0x2fd, 0x2ff, 
       0x5, 0x4c, 0x27, 0x2, 0x2fe, 0x2fd, 0x3, 0x2, 0x2, 0x2, 0x2ff, 0x302, 
       0x3, 0x2, 0x2, 0x2, 0x300, 0x2fe, 0x3, 0x2, 0x2, 0x2, 0x300, 0x301, 
       0x3, 0x2, 0x2, 0x2, 0x301, 0x303, 0x3, 0x2, 0x2, 0x2, 0x302, 0x300, 
       0x3, 0x2, 0x2, 0x2, 0x303, 0x304, 0x5, 0x58, 0x2d, 0x2, 0x304, 0x47, 
       0x3, 0x2, 0x2, 0x2, 0x305, 0x307, 0x5, 0x4a, 0x26, 0x2, 0x306, 0x305, 
       0x3, 0x2, 0x2, 0x2, 0x307, 0x30a, 0x3, 0x2, 0x2, 0x2, 0x308, 0x306, 
       0x3, 0x2, 0x2, 0x2, 0x308, 0x309, 0x3, 0x2, 0x2, 0x2, 0x309, 0x30b, 
       0x3, 0x2, 0x2, 0x2, 0x30a, 0x308, 0x3, 0x2, 0x2, 0x2, 0x30b, 0x30c, 
       0x7, 0x2c, 0x2, 0x2, 0x30c, 0x30d, 0x5, 0x36, 0x1c, 0x2, 0x30d, 0x30e, 
       0x7, 0x4c, 0x2, 0x2, 0x30e, 0x49, 0x3, 0x2, 0x2, 0x2, 0x30f, 0x310, 
       0x5, 0xf2, 0x7a, 0x2, 0x310, 0x4b, 0x3, 0x2, 0x2, 0x2, 0x311, 0x316, 
       0x5, 0x4e, 0x28, 0x2, 0x312, 0x316, 0x5, 0x50, 0x29, 0x2, 0x313, 
       0x316, 0x5, 0x52, 0x2a, 0x2, 0x314, 0x316, 0x5, 0x54, 0x2b, 0x2, 
       0x315, 0x311, 0x3, 0x2, 0x2, 0x2, 0x315, 0x312, 0x3, 0x2, 0x2, 0x2, 
       0x315, 0x313, 0x3, 0x2, 0x2, 0x2, 0x315, 0x314, 0x3, 0x2, 0x2, 0x2, 
       0x316, 0x4d, 0x3, 0x2, 0x2, 0x2, 0x317, 0x318, 0x7, 0x25, 0x2, 0x2, 
       0x318, 0x319, 0x5, 0x38, 0x1d, 0x2, 0x319, 0x31a, 0x7, 0x4c, 0x2, 
       0x2, 0x31a, 0x4f, 0x3, 0x2, 0x2, 0x2, 0x31b, 0x31c, 0x7, 0x25, 0x2, 
       0x2, 0x31c, 0x31d, 0x5, 0x3a, 0x1e, 0x2, 0x31d, 0x31e, 0x7, 0x4e, 
       0x2, 0x2, 0x31e, 0x31f, 0x7, 0x64, 0x2, 0x2, 0x31f, 0x320, 0x7, 0x4c, 
       0x2, 0x2, 0x320, 0x51, 0x3, 0x2, 0x2, 0x2, 0x321, 0x322, 0x7, 0x25, 
       0x2, 0x2, 0x322, 0x323, 0x7, 0x32, 0x2, 0x2, 0x323, 0x324, 0x5, 0x38, 
       0x1d, 0x2, 0x324, 0x325, 0x7, 0x4e, 0x2, 0x2, 0x325, 0x326, 0x5, 
       0x1ea, 0xf6, 0x2, 0x326, 0x327, 0x7, 0x4c, 0x2, 0x2, 0x327, 0x53, 
       0x3, 0x2, 0x2, 0x2, 0x328, 0x329, 0x7, 0x25, 0x2, 0x2, 0x329, 0x32a, 
       0x7, 0x32, 0x2, 0x2, 0x32a, 0x32b, 0x5, 0x38, 0x1d, 0x2, 0x32b, 0x32c, 
       0x7, 0x4e, 0x2, 0x2, 0x32c, 0x32d, 0x7, 0x64, 0x2, 0x2, 0x32d, 0x32e, 
       0x7, 0x4c, 0x2, 0x2, 0x32e, 0x55, 0x3, 0x2, 0x2, 0x2, 0x32f, 0x333, 
       0x5, 0x5e, 0x30, 0x2, 0x330, 0x333, 0x5, 0xd2, 0x6a, 0x2, 0x331, 
       0x333, 0x7, 0x4c, 0x2, 0x2, 0x332, 0x32f, 0x3, 0x2, 0x2, 0x2, 0x332, 
       0x330, 0x3, 0x2, 0x2, 0x2, 0x332, 0x331, 0x3, 0x2, 0x2, 0x2, 0x333, 
       0x57, 0x3, 0x2, 0x2, 0x2, 0x334, 0x336, 0x5, 0xf2, 0x7a, 0x2, 0x335, 
       0x334, 0x3, 0x2, 0x2, 0x2, 0x336, 0x339, 0x3, 0x2, 0x2, 0x2, 0x337, 
       0x335, 0x3, 0x2, 0x2, 0x2, 0x337, 0x338, 0x3, 0x2, 0x2, 0x2, 0x338, 
       0x33b, 0x3, 0x2, 0x2, 0x2, 0x339, 0x337, 0x3, 0x2, 0x2, 0x2, 0x33a, 
       0x33c, 0x7, 0x3, 0x2, 0x2, 0x33b, 0x33a, 0x3, 0x2, 0x2, 0x2, 0x33b, 
       0x33c, 0x3, 0x2, 0x2, 0x2, 0x33c, 0x33d, 0x3, 0x2, 0x2, 0x2, 0x33d, 
       0x33e, 0x7, 0x4, 0x2, 0x2, 0x33e, 0x33f, 0x5, 0x34, 0x1b, 0x2, 0x33f, 
       0x343, 0x7, 0x48, 0x2, 0x2, 0x340, 0x342, 0x5, 0x5a, 0x2e, 0x2, 0x341, 
       0x340, 0x3, 0x2, 0x2, 0x2, 0x342, 0x345, 0x3, 0x2, 0x2, 0x2, 0x343, 
       0x341, 0x3, 0x2, 0x2, 0x2, 0x343, 0x344, 0x3, 0x2, 0x2, 0x2, 0x344, 
       0x346, 0x3, 0x2, 0x2, 0x2, 0x345, 0x343, 0x3, 0x2, 0x2, 0x2, 0x346, 
       0x347, 0x7, 0x49, 0x2, 0x2, 0x347, 0x59, 0x3, 0x2, 0x2, 0x2, 0x348, 
       0x34c, 0x7, 0x5, 0x2, 0x2, 0x349, 0x34b, 0x5, 0x5c, 0x2f, 0x2, 0x34a, 
       0x349, 0x3, 0x2, 0x2, 0x2, 0x34b, 0x34e, 0x3, 0x2, 0x2, 0x2, 0x34c, 
       0x34a, 0x3, 0x2, 0x2, 0x2, 0x34c, 0x34d, 0x3, 0x2, 0x2, 0x2, 0x34d, 
       0x34f, 0x3, 0x2, 0x2, 0x2, 0x34e, 0x34c, 0x3, 0x2, 0x2, 0x2, 0x34f, 
       0x350, 0x5, 0x34, 0x1b, 0x2, 0x350, 0x351, 0x7, 0x4c, 0x2, 0x2, 0x351, 
       0x382, 0x3, 0x2, 0x2, 0x2, 0x352, 0x353, 0x7, 0x6, 0x2, 0x2, 0x353, 
       0x35d, 0x5, 0x36, 0x1c, 0x2, 0x354, 0x355, 0x7, 0x7, 0x2, 0x2, 0x355, 
       0x35a, 0x5, 0x34, 0x1b, 0x2, 0x356, 0x357, 0x7, 0x4d, 0x2, 0x2, 0x357, 
       0x359, 0x5, 0x34, 0x1b, 0x2, 0x358, 0x356, 0x3, 0x2, 0x2, 0x2, 0x359, 
       0x35c, 0x3, 0x2, 0x2, 0x2, 0x35a, 0x358, 0x3, 0x2, 0x2, 0x2, 0x35a, 
       0x35b, 0x3, 0x2, 0x2, 0x2, 0x35b, 0x35e, 0x3, 0x2, 0x2, 0x2, 0x35c, 
       0x35a, 0x3, 0x2, 0x2, 0x2, 0x35d, 0x354, 0x3, 0x2, 0x2, 0x2, 0x35d, 
       0x35e, 0x3, 0x2, 0x2, 0x2, 0x35e, 0x35f, 0x3, 0x2, 0x2, 0x2, 0x35f, 
       0x360, 0x7, 0x4c, 0x2, 0x2, 0x360, 0x382, 0x3, 0x2, 0x2, 0x2, 0x361, 
       0x362, 0x7, 0x8, 0x2, 0x2, 0x362, 0x36c, 0x5, 0x36, 0x1c, 0x2, 0x363, 
       0x364, 0x7, 0x7, 0x2, 0x2, 0x364, 0x369, 0x5, 0x34, 0x1b, 0x2, 0x365, 
       0x366, 0x7, 0x4d, 0x2, 0x2, 0x366, 0x368, 0x5, 0x34, 0x1b, 0x2, 0x367, 
       0x365, 0x3, 0x2, 0x2, 0x2, 0x368, 0x36b, 0x3, 0x2, 0x2, 0x2, 0x369, 
       0x367, 0x3, 0x2, 0x2, 0x2, 0x369, 0x36a, 0x3, 0x2, 0x2, 0x2, 0x36a, 
       0x36d, 0x3, 0x2, 0x2, 0x2, 0x36b, 0x369, 0x3, 0x2, 0x2, 0x2, 0x36c, 
       0x363, 0x3, 0x2, 0x2, 0x2, 0x36c, 0x36d, 0x3, 0x2, 0x2, 0x2, 0x36d, 
       0x36e, 0x3, 0x2, 0x2, 0x2, 0x36e, 0x36f, 0x7, 0x4c, 0x2, 0x2, 0x36f, 
       0x382, 0x3, 0x2, 0x2, 0x2, 0x370, 0x371, 0x7, 0x9, 0x2, 0x2, 0x371, 
       0x372, 0x5, 0x38, 0x1d, 0x2, 0x372, 0x373, 0x7, 0x4c, 0x2, 0x2, 0x373, 
       0x382, 0x3, 0x2, 0x2, 0x2, 0x374, 0x375, 0x7, 0xa, 0x2, 0x2, 0x375, 
       0x376, 0x5, 0x38, 0x1d, 0x2, 0x376, 0x377, 0x7, 0xb, 0x2, 0x2, 0x377, 
       0x37c, 0x5, 0x38, 0x1d, 0x2, 0x378, 0x379, 0x7, 0x4d, 0x2, 0x2, 0x379, 
       0x37b, 0x5, 0x38, 0x1d, 0x2, 0x37a, 0x378, 0x3, 0x2, 0x2, 0x2, 0x37b, 
       0x37e, 0x3, 0x2, 0x2, 0x2, 0x37c, 0x37a, 0x3, 0x2, 0x2, 0x2, 0x37c, 
       0x37d, 0x3, 0x2, 0x2, 0x2, 0x37d, 0x37f, 0x3, 0x2, 0x2, 0x2, 0x37e, 
       0x37c, 0x3, 0x2, 0x2, 0x2, 0x37f, 0x380, 0x7, 0x4c, 0x2, 0x2, 0x380, 
       0x382, 0x3, 0x2, 0x2, 0x2, 0x381, 0x348, 0x3, 0x2, 0x2, 0x2, 0x381, 
       0x352, 0x3, 0x2, 0x2, 0x2, 0x381, 0x361, 0x3, 0x2, 0x2, 0x2, 0x381, 
       0x370, 0x3, 0x2, 0x2, 0x2, 0x381, 0x374, 0x3, 0x2, 0x2, 0x2, 0x382, 
       0x5b, 0x3, 0x2, 0x2, 0x2, 0x383, 0x384, 0x9, 0x5, 0x2, 0x2, 0x384, 
       0x5d, 0x3, 0x2, 0x2, 0x2, 0x385, 0x388, 0x5, 0x60, 0x31, 0x2, 0x386, 
       0x388, 0x5, 0xc6, 0x64, 0x2, 0x387, 0x385, 0x3, 0x2, 0x2, 0x2, 0x387, 
       0x386, 0x3, 0x2, 0x2, 0x2, 0x388, 0x5f, 0x3, 0x2, 0x2, 0x2, 0x389, 
       0x38b, 0x5, 0x62, 0x32, 0x2, 0x38a, 0x389, 0x3, 0x2, 0x2, 0x2, 0x38b, 
       0x38e, 0x3, 0x2, 0x2, 0x2, 0x38c, 0x38a, 0x3, 0x2, 0x2, 0x2, 0x38c, 
       0x38d, 0x3, 0x2, 0x2, 0x2, 0x38d, 0x38f, 0x3, 0x2, 0x2, 0x2, 0x38e, 
       0x38c, 0x3, 0x2, 0x2, 0x2, 0x38f, 0x390, 0x7, 0x15, 0x2, 0x2, 0x390, 
       0x392, 0x5, 0x1ea, 0xf6, 0x2, 0x391, 0x393, 0x5, 0x64, 0x33, 0x2, 
       0x392, 0x391, 0x3, 0x2, 0x2, 0x2, 0x392, 0x393, 0x3, 0x2, 0x2, 0x2, 
       0x393, 0x395, 0x3, 0x2, 0x2, 0x2, 0x394, 0x396, 0x5, 0x68, 0x35, 
       0x2, 0x395, 0x394, 0x3, 0x2, 0x2, 0x2, 0x395, 0x396, 0x3, 0x2, 0x2, 
       0x2, 0x396, 0x398, 0x3, 0x2, 0x2, 0x2, 0x397, 0x399, 0x5, 0x6a, 0x36, 
       0x2, 0x398, 0x397, 0x3, 0x2, 0x2, 0x2, 0x398, 0x399, 0x3, 0x2, 0x2, 
       0x2, 0x399, 0x39a, 0x3, 0x2, 0x2, 0x2, 0x39a, 0x39b, 0x5, 0x6e, 0x38, 
       0x2, 0x39b, 0x61, 0x3, 0x2, 0x2, 0x2, 0x39c, 0x3a5, 0x5, 0xf2, 0x7a, 
       0x2, 0x39d, 0x3a5, 0x7, 0x2f, 0x2, 0x2, 0x39e, 0x3a5, 0x7, 0x2e, 
       0x2, 0x2, 0x39f, 0x3a5, 0x7, 0x2d, 0x2, 0x2, 0x3a0, 0x3a5, 0x7, 0xd, 
       0x2, 0x2, 0x3a1, 0x3a5, 0x7, 0x32, 0x2, 0x2, 0x3a2, 0x3a5, 0x7, 0x1e, 
       0x2, 0x2, 0x3a3, 0x3a5, 0x7, 0x33, 0x2, 0x2, 0x3a4, 0x39c, 0x3, 0x2, 
       0x2, 0x2, 0x3a4, 0x39d, 0x3, 0x2, 0x2, 0x2, 0x3a4, 0x39e, 0x3, 0x2, 
       0x2, 0x2, 0x3a4, 0x39f, 0x3, 0x2, 0x2, 0x2, 0x3a4, 0x3a0, 0x3, 0x2, 
       0x2, 0x2, 0x3a4, 0x3a1, 0x3, 0x2, 0x2, 0x2, 0x3a4, 0x3a2, 0x3, 0x2, 
       0x2, 0x2, 0x3a4, 0x3a3, 0x3, 0x2, 0x2, 0x2, 0x3a5, 0x63, 0x3, 0x2, 
       0x2, 0x2, 0x3a6, 0x3a7, 0x7, 0x54, 0x2, 0x2, 0x3a7, 0x3a8, 0x5, 0x66, 
       0x34, 0x2, 0x3a8, 0x3a9, 0x7, 0x53, 0x2, 0x2, 0x3a9, 0x65, 0x3, 0x2, 
       0x2, 0x2, 0x3aa, 0x3af, 0x5, 0x22, 0x12, 0x2, 0x3ab, 0x3ac, 0x7, 
       0x4d, 0x2, 0x2, 0x3ac, 0x3ae, 0x5, 0x22, 0x12, 0x2, 0x3ad, 0x3ab, 
       0x3, 0x2, 0x2, 0x2, 0x3ae, 0x3b1, 0x3, 0x2, 0x2, 0x2, 0x3af, 0x3ad, 
       0x3, 0x2, 0x2, 0x2, 0x3af, 0x3b0, 0x3, 0x2, 0x2, 0x2, 0x3b0, 0x67, 
       0x3, 0x2, 0x2, 0x2, 0x3b1, 0x3af, 0x3, 0x2, 0x2, 0x2, 0x3b2, 0x3b3, 
       0x7, 0x1d, 0x2, 0x2, 0x3b3, 0x3b4, 0x5, 0x10, 0x9, 0x2, 0x3b4, 0x69, 
       0x3, 0x2, 0x2, 0x2, 0x3b5, 0x3b6, 0x7, 0x24, 0x2, 0x2, 0x3b6, 0x3b7, 
       0x5, 0x6c, 0x37, 0x2, 0x3b7, 0x6b, 0x3, 0x2, 0x2, 0x2, 0x3b8, 0x3bd, 
       0x5, 0x16, 0xc, 0x2, 0x3b9, 0x3ba, 0x7, 0x4d, 0x2, 0x2, 0x3ba, 0x3bc, 
       0x5, 0x16, 0xc, 0x2, 0x3bb, 0x3b9, 0x3, 0x2, 0x2, 0x2, 0x3bc, 0x3bf, 
       0x3, 0x2, 0x2, 0x2, 0x3bd, 0x3bb, 0x3, 0x2, 0x2, 0x2, 0x3bd, 0x3be, 
       0x3, 0x2, 0x2, 0x2, 0x3be, 0x6d, 0x3, 0x2, 0x2, 0x2, 0x3bf, 0x3bd, 
       0x3, 0x2, 0x2, 0x2, 0x3c0, 0x3c4, 0x7, 0x48, 0x2, 0x2, 0x3c1, 0x3c3, 
       0x5, 0x70, 0x39, 0x2, 0x3c2, 0x3c1, 0x3, 0x2, 0x2, 0x2, 0x3c3, 0x3c6, 
       0x3, 0x2, 0x2, 0x2, 0x3c4, 0x3c2, 0x3, 0x2, 0x2, 0x2, 0x3c4, 0x3c5, 
       0x3, 0x2, 0x2, 0x2, 0x3c5, 0x3c7, 0x3, 0x2, 0x2, 0x2, 0x3c6, 0x3c4, 
       0x3, 0x2, 0x2, 0x2, 0x3c7, 0x3c8, 0x7, 0x49, 0x2, 0x2, 0x3c8, 0x6f, 
       0x3, 0x2, 0x2, 0x2, 0x3c9, 0x3ce, 0x5, 0x72, 0x3a, 0x2, 0x3ca, 0x3ce, 
       0x5, 0xb6, 0x5c, 0x2, 0x3cb, 0x3ce, 0x5, 0xb8, 0x5d, 0x2, 0x3cc, 
       0x3ce, 0x5, 0xba, 0x5e, 0x2, 0x3cd, 0x3c9, 0x3, 0x2, 0x2, 0x2, 0x3cd, 
       0x3ca, 0x3, 0x2, 0x2, 0x2, 0x3cd, 0x3cb, 0x3, 0x2, 0x2, 0x2, 0x3cd, 
       0x3cc, 0x3, 0x2, 0x2, 0x2, 0x3ce, 0x71, 0x3, 0x2, 0x2, 0x2, 0x3cf, 
       0x3d5, 0x5, 0x74, 0x3b, 0x2, 0x3d0, 0x3d5, 0x5, 0x98, 0x4d, 0x2, 
       0x3d1, 0x3d5, 0x5, 0x5e, 0x30, 0x2, 0x3d2, 0x3d5, 0x5, 0xd2, 0x6a, 
       0x2, 0x3d3, 0x3d5, 0x7, 0x4c, 0x2, 0x2, 0x3d4, 0x3cf, 0x3, 0x2, 0x2, 
       0x2, 0x3d4, 0x3d0, 0x3, 0x2, 0x2, 0x2, 0x3d4, 0x3d1, 0x3, 0x2, 0x2, 
       0x2, 0x3d4, 0x3d2, 0x3, 0x2, 0x2, 0x2, 0x3d4, 0x3d3, 0x3, 0x2, 0x2, 
       0x2, 0x3d5, 0x73, 0x3, 0x2, 0x2, 0x2, 0x3d6, 0x3d8, 0x5, 0x76, 0x3c, 
       0x2, 0x3d7, 0x3d6, 0x3, 0x2, 0x2, 0x2, 0x3d8, 0x3db, 0x3, 0x2, 0x2, 
       0x2, 0x3d9, 0x3d7, 0x3, 0x2, 0x2, 0x2, 0x3d9, 0x3da, 0x3, 0x2, 0x2, 
       0x2, 0x3da, 0x3dc, 0x3, 0x2, 0x2, 0x2, 0x3db, 0x3d9, 0x3, 0x2, 0x2, 
       0x2, 0x3dc, 0x3dd, 0x5, 0x80, 0x41, 0x2, 0x3dd, 0x3de, 0x5, 0x78, 
       0x3d, 0x2, 0x3de, 0x3df, 0x7, 0x4c, 0x2, 0x2, 0x3df, 0x75, 0x3, 0x2, 
       0x2, 0x2, 0x3e0, 0x3e9, 0x5, 0xf2, 0x7a, 0x2, 0x3e1, 0x3e9, 0x7, 
       0x2f, 0x2, 0x2, 0x3e2, 0x3e9, 0x7, 0x2e, 0x2, 0x2, 0x3e3, 0x3e9, 
       0x7, 0x2d, 0x2, 0x2, 0x3e4, 0x3e9, 0x7, 0x32, 0x2, 0x2, 0x3e5, 0x3e9, 
       0x7, 0x1e, 0x2, 0x2, 0x3e6, 0x3e9, 0x7, 0x3a, 0x2, 0x2, 0x3e7, 0x3e9, 
       0x7, 0x3d, 0x2, 0x2, 0x3e8, 0x3e0, 0x3, 0x2, 0x2, 0x2, 0x3e8, 0x3e1, 
       0x3, 0x2, 0x2, 0x2, 0x3e8, 0x3e2, 0x3, 0x2, 0x2, 0x2, 0x3e8, 0x3e3, 
       0x3, 0x2, 0x2, 0x2, 0x3e8, 0x3e4, 0x3, 0x2, 0x2, 0x2, 0x3e8, 0x3e5, 
       0x3, 0x2, 0x2, 0x2, 0x3e8, 0x3e6, 0x3, 0x2, 0x2, 0x2, 0x3e8, 0x3e7, 
       0x3, 0x2, 0x2, 0x2, 0x3e9, 0x77, 0x3, 0x2, 0x2, 0x2, 0x3ea, 0x3ef, 
       0x5, 0x7a, 0x3e, 0x2, 0x3eb, 0x3ec, 0x7, 0x4d, 0x2, 0x2, 0x3ec, 0x3ee, 
       0x5, 0x7a, 0x3e, 0x2, 0x3ed, 0x3eb, 0x3, 0x2, 0x2, 0x2, 0x3ee, 0x3f1, 
       0x3, 0x2, 0x2, 0x2, 0x3ef, 0x3ed, 0x3, 0x2, 0x2, 0x2, 0x3ef, 0x3f0, 
       0x3, 0x2, 0x2, 0x2, 0x3f0, 0x79, 0x3, 0x2, 0x2, 0x2, 0x3f1, 0x3ef, 
       0x3, 0x2, 0x2, 0x2, 0x3f2, 0x3f5, 0x5, 0x7c, 0x3f, 0x2, 0x3f3, 0x3f4, 
       0x7, 0x52, 0x2, 0x2, 0x3f4, 0x3f6, 0x5, 0x7e, 0x40, 0x2, 0x3f5, 0x3f3, 
       0x3, 0x2, 0x2, 0x2, 0x3f5, 0x3f6, 0x3, 0x2, 0x2, 0x2, 0x3f6, 0x7b, 
       0x3, 0x2, 0x2, 0x2, 0x3f7, 0x3f9, 0x5, 0x1ea, 0xf6, 0x2, 0x3f8, 0x3fa, 
       0x5, 0x20, 0x11, 0x2, 0x3f9, 0x3f8, 0x3, 0x2, 0x2, 0x2, 0x3f9, 0x3fa, 
       0x3, 0x2, 0x2, 0x2, 0x3fa, 0x7d, 0x3, 0x2, 0x2, 0x2, 0x3fb, 0x3fe, 
       0x5, 0x1ae, 0xd8, 0x2, 0x3fc, 0x3fe, 0x5, 0x104, 0x83, 0x2, 0x3fd, 
       0x3fb, 0x3, 0x2, 0x2, 0x2, 0x3fd, 0x3fc, 0x3, 0x2, 0x2, 0x2, 0x3fe, 
       0x7f, 0x3, 0x2, 0x2, 0x2, 0x3ff, 0x402, 0x5, 0x82, 0x42, 0x2, 0x400, 
       0x402, 0x5, 0x84, 0x43, 0x2, 0x401, 0x3ff, 0x3, 0x2, 0x2, 0x2, 0x401, 
       0x400, 0x3, 0x2, 0x2, 0x2, 0x402, 0x81, 0x3, 0x2, 0x2, 0x2, 0x403, 
       0x406, 0x5, 0x6, 0x4, 0x2, 0x404, 0x406, 0x7, 0xf, 0x2, 0x2, 0x405, 
       0x403, 0x3, 0x2, 0x2, 0x2, 0x405, 0x404, 0x3, 0x2, 0x2, 0x2, 0x406, 
       0x83, 0x3, 0x2, 0x2, 0x2, 0x407, 0x40b, 0x5, 0x86, 0x44, 0x2, 0x408, 
       0x40b, 0x5, 0x94, 0x4b, 0x2, 0x409, 0x40b, 0x5, 0x96, 0x4c, 0x2, 
       0x40a, 0x407, 0x3, 0x2, 0x2, 0x2, 0x40a, 0x408, 0x3, 0x2, 0x2, 0x2, 
       0x40a, 0x409, 0x3, 0x2, 0x2, 0x2, 0x40b, 0x85, 0x3, 0x2, 0x2, 0x2, 
       0x40c, 0x40f, 0x5, 0x8c, 0x47, 0x2, 0x40d, 0x40f, 0x5, 0x92, 0x4a, 
       0x2, 0x40e, 0x40c, 0x3, 0x2, 0x2, 0x2, 0x40e, 0x40d, 0x3, 0x2, 0x2, 
       0x2, 0x40f, 0x414, 0x3, 0x2, 0x2, 0x2, 0x410, 0x413, 0x5, 0x8a, 0x46, 
       0x2, 0x411, 0x413, 0x5, 0x90, 0x49, 0x2, 0x412, 0x410, 0x3, 0x2, 
       0x2, 0x2, 0x412, 0x411, 0x3, 0x2, 0x2, 0x2, 0x413, 0x416, 0x3, 0x2, 
       0x2, 0x2, 0x414, 0x412, 0x3, 0x2, 0x2, 0x2, 0x414, 0x415, 0x3, 0x2, 
       0x2, 0x2, 0x415, 0x87, 0x3, 0x2, 0x2, 0x2, 0x416, 0x414, 0x3, 0x2, 
       0x2, 0x2, 0x417, 0x419, 0x5, 0x1ea, 0xf6, 0x2, 0x418, 0x41a, 0x5, 
       0x2a, 0x16, 0x2, 0x419, 0x418, 0x3, 0x2, 0x2, 0x2, 0x419, 0x41a, 
       0x3, 0x2, 0x2, 0x2, 0x41a, 0x428, 0x3, 0x2, 0x2, 0x2, 0x41b, 0x41c, 
       0x5, 0x86, 0x44, 0x2, 0x41c, 0x420, 0x7, 0x4e, 0x2, 0x2, 0x41d, 0x41f, 
       0x5, 0xf2, 0x7a, 0x2, 0x41e, 0x41d, 0x3, 0x2, 0x2, 0x2, 0x41f, 0x422, 
       0x3, 0x2, 0x2, 0x2, 0x420, 0x41e, 0x3, 0x2, 0x2, 0x2, 0x420, 0x421, 
       0x3, 0x2, 0x2, 0x2, 0x421, 0x423, 0x3, 0x2, 0x2, 0x2, 0x422, 0x420, 
       0x3, 0x2, 0x2, 0x2, 0x423, 0x425, 0x5, 0x1ea, 0xf6, 0x2, 0x424, 0x426, 
       0x5, 0x2a, 0x16, 0x2, 0x425, 0x424, 0x3, 0x2, 0x2, 0x2, 0x425, 0x426, 
       0x3, 0x2, 0x2, 0x2, 0x426, 0x428, 0x3, 0x2, 0x2, 0x2, 0x427, 0x417, 
       0x3, 0x2, 0x2, 0x2, 0x427, 0x41b, 0x3, 0x2, 0x2, 0x2, 0x428, 0x89, 
       0x3, 0x2, 0x2, 0x2, 0x429, 0x42d, 0x7, 0x4e, 0x2, 0x2, 0x42a, 0x42c, 
       0x5, 0xf2, 0x7a, 0x2, 0x42b, 0x42a, 0x3, 0x2, 0x2, 0x2, 0x42c, 0x42f, 
       0x3, 0x2, 0x2, 0x2, 0x42d, 0x42b, 0x3, 0x2, 0x2, 0x2, 0x42d, 0x42e, 
       0x3, 0x2, 0x2, 0x2, 0x42e, 0x430, 0x3, 0x2, 0x2, 0x2, 0x42f, 0x42d, 
       0x3, 0x2, 0x2, 0x2, 0x430, 0x432, 0x5, 0x1ea, 0xf6, 0x2, 0x431, 0x433, 
       0x5, 0x2a, 0x16, 0x2, 0x432, 0x431, 0x3, 0x2, 0x2, 0x2, 0x432, 0x433, 
       0x3, 0x2, 0x2, 0x2, 0x433, 0x8b, 0x3, 0x2, 0x2, 0x2, 0x434, 0x436, 
       0x5, 0x1ea, 0xf6, 0x2, 0x435, 0x437, 0x5, 0x2a, 0x16, 0x2, 0x436, 
       0x435, 0x3, 0x2, 0x2, 0x2, 0x436, 0x437, 0x3, 0x2, 0x2, 0x2, 0x437, 
       0x8d, 0x3, 0x2, 0x2, 0x2, 0x438, 0x439, 0x5, 0x88, 0x45, 0x2, 0x439, 
       0x8f, 0x3, 0x2, 0x2, 0x2, 0x43a, 0x43b, 0x5, 0x8a, 0x46, 0x2, 0x43b, 
       0x91, 0x3, 0x2, 0x2, 0x2, 0x43c, 0x43d, 0x5, 0x8c, 0x47, 0x2, 0x43d, 
       0x93, 0x3, 0x2, 0x2, 0x2, 0x43e, 0x43f, 0x5, 0x1ea, 0xf6, 0x2, 0x43f, 
       0x95, 0x3, 0x2, 0x2, 0x2, 0x440, 0x441, 0x5, 0x82, 0x42, 0x2, 0x441, 
       0x442, 0x5, 0x20, 0x11, 0x2, 0x442, 0x44a, 0x3, 0x2, 0x2, 0x2, 0x443, 
       0x444, 0x5, 0x86, 0x44, 0x2, 0x444, 0x445, 0x5, 0x20, 0x11, 0x2, 
       0x445, 0x44a, 0x3, 0x2, 0x2, 0x2, 0x446, 0x447, 0x5, 0x94, 0x4b, 
       0x2, 0x447, 0x448, 0x5, 0x20, 0x11, 0x2, 0x448, 0x44a, 0x3, 0x2, 
       0x2, 0x2, 0x449, 0x440, 0x3, 0x2, 0x2, 0x2, 0x449, 0x443, 0x3, 0x2, 
       0x2, 0x2, 0x449, 0x446, 0x3, 0x2, 0x2, 0x2, 0x44a, 0x97, 0x3, 0x2, 
       0x2, 0x2, 0x44b, 0x44d, 0x5, 0x9a, 0x4e, 0x2, 0x44c, 0x44b, 0x3, 
       0x2, 0x2, 0x2, 0x44d, 0x450, 0x3, 0x2, 0x2, 0x2, 0x44e, 0x44c, 0x3, 
       0x2, 0x2, 0x2, 0x44e, 0x44f, 0x3, 0x2, 0x2, 0x2, 0x44f, 0x451, 0x3, 
       0x2, 0x2, 0x2, 0x450, 0x44e, 0x3, 0x2, 0x2, 0x2, 0x451, 0x452, 0x5, 
       0x9c, 0x4f, 0x2, 0x452, 0x453, 0x5, 0xb4, 0x5b, 0x2, 0x453, 0x99, 
       0x3, 0x2, 0x2, 0x2, 0x454, 0x45f, 0x5, 0xf2, 0x7a, 0x2, 0x455, 0x45f, 
       0x7, 0x2f, 0x2, 0x2, 0x456, 0x45f, 0x7, 0x2e, 0x2, 0x2, 0x457, 0x45f, 
       0x7, 0x2d, 0x2, 0x2, 0x458, 0x45f, 0x7, 0xd, 0x2, 0x2, 0x459, 0x45f, 
       0x7, 0x32, 0x2, 0x2, 0x45a, 0x45f, 0x7, 0x1e, 0x2, 0x2, 0x45b, 0x45f, 
       0x7, 0x36, 0x2, 0x2, 0x45c, 0x45f, 0x7, 0x2a, 0x2, 0x2, 0x45d, 0x45f, 
       0x7, 0x33, 0x2, 0x2, 0x45e, 0x454, 0x3, 0x2, 0x2, 0x2, 0x45e, 0x455, 
       0x3, 0x2, 0x2, 0x2, 0x45e, 0x456, 0x3, 0x2, 0x2, 0x2, 0x45e, 0x457, 
       0x3, 0x2, 0x2, 0x2, 0x45e, 0x458, 0x3, 0x2, 0x2, 0x2, 0x45e, 0x459, 
       0x3, 0x2, 0x2, 0x2, 0x45e, 0x45a, 0x3, 0x2, 0x2, 0x2, 0x45e, 0x45b, 
       0x3, 0x2, 0x2, 0x2, 0x45e, 0x45c, 0x3, 0x2, 0x2, 0x2, 0x45e, 0x45d, 
       0x3, 0x2, 0x2, 0x2, 0x45f, 0x9b, 0x3, 0x2, 0x2, 0x2, 0x460, 0x461, 
       0x5, 0x9e, 0x50, 0x2, 0x461, 0x463, 0x5, 0xa0, 0x51, 0x2, 0x462, 
       0x464, 0x5, 0xae, 0x58, 0x2, 0x463, 0x462, 0x3, 0x2, 0x2, 0x2, 0x463, 
       0x464, 0x3, 0x2, 0x2, 0x2, 0x464, 0x472, 0x3, 0x2, 0x2, 0x2, 0x465, 
       0x469, 0x5, 0x64, 0x33, 0x2, 0x466, 0x468, 0x5, 0xf2, 0x7a, 0x2, 
       0x467, 0x466, 0x3, 0x2, 0x2, 0x2, 0x468, 0x46b, 0x3, 0x2, 0x2, 0x2, 
       0x469, 0x467, 0x3, 0x2, 0x2, 0x2, 0x469, 0x46a, 0x3, 0x2, 0x2, 0x2, 
       0x46a, 0x46c, 0x3, 0x2, 0x2, 0x2, 0x46b, 0x469, 0x3, 0x2, 0x2, 0x2, 
       0x46c, 0x46d, 0x5, 0x9e, 0x50, 0x2, 0x46d, 0x46f, 0x5, 0xa0, 0x51, 
       0x2, 0x46e, 0x470, 0x5, 0xae, 0x58, 0x2, 0x46f, 0x46e, 0x3, 0x2, 
       0x2, 0x2, 0x46f, 0x470, 0x3, 0x2, 0x2, 0x2, 0x470, 0x472, 0x3, 0x2, 
       0x2, 0x2, 0x471, 0x460, 0x3, 0x2, 0x2, 0x2, 0x471, 0x465, 0x3, 0x2, 
       0x2, 0x2, 0x472, 0x9d, 0x3, 0x2, 0x2, 0x2, 0x473, 0x476, 0x5, 0x80, 
       0x41, 0x2, 0x474, 0x476, 0x7, 0x3c, 0x2, 0x2, 0x475, 0x473, 0x3, 
       0x2, 0x2, 0x2, 0x475, 0x474, 0x3, 0x2, 0x2, 0x2, 0x476, 0x9f, 0x3, 
       0x2, 0x2, 0x2, 0x477, 0x478, 0x5, 0x1ea, 0xf6, 0x2, 0x478, 0x47a, 
       0x7, 0x46, 0x2, 0x2, 0x479, 0x47b, 0x5, 0xa2, 0x52, 0x2, 0x47a, 0x479, 
       0x3, 0x2, 0x2, 0x2, 0x47a, 0x47b, 0x3, 0x2, 0x2, 0x2, 0x47b, 0x47c, 
       0x3, 0x2, 0x2, 0x2, 0x47c, 0x47e, 0x7, 0x47, 0x2, 0x2, 0x47d, 0x47f, 
       0x5, 0x20, 0x11, 0x2, 0x47e, 0x47d, 0x3, 0x2, 0x2, 0x2, 0x47e, 0x47f, 
       0x3, 0x2, 0x2, 0x2, 0x47f, 0xa1, 0x3, 0x2, 0x2, 0x2, 0x480, 0x481, 
       0x5, 0xa4, 0x53, 0x2, 0x481, 0x482, 0x7, 0x4d, 0x2, 0x2, 0x482, 0x483, 
       0x5, 0xaa, 0x56, 0x2, 0x483, 0x487, 0x3, 0x2, 0x2, 0x2, 0x484, 0x487, 
       0x5, 0xaa, 0x56, 0x2, 0x485, 0x487, 0x5, 0xac, 0x57, 0x2, 0x486, 
       0x480, 0x3, 0x2, 0x2, 0x2, 0x486, 0x484, 0x3, 0x2, 0x2, 0x2, 0x486, 
       0x485, 0x3, 0x2, 0x2, 0x2, 0x487, 0xa3, 0x3, 0x2, 0x2, 0x2, 0x488, 
       0x48d, 0x5, 0xa6, 0x54, 0x2, 0x489, 0x48a, 0x7, 0x4d, 0x2, 0x2, 0x48a, 
       0x48c, 0x5, 0xa6, 0x54, 0x2, 0x48b, 0x489, 0x3, 0x2, 0x2, 0x2, 0x48c, 
       0x48f, 0x3, 0x2, 0x2, 0x2, 0x48d, 0x48b, 0x3, 0x2, 0x2, 0x2, 0x48d, 
       0x48e, 0x3, 0x2, 0x2, 0x2, 0x48e, 0x499, 0x3, 0x2, 0x2, 0x2, 0x48f, 
       0x48d, 0x3, 0x2, 0x2, 0x2, 0x490, 0x495, 0x5, 0xac, 0x57, 0x2, 0x491, 
       0x492, 0x7, 0x4d, 0x2, 0x2, 0x492, 0x494, 0x5, 0xa6, 0x54, 0x2, 0x493, 
       0x491, 0x3, 0x2, 0x2, 0x2, 0x494, 0x497, 0x3, 0x2, 0x2, 0x2, 0x495, 
       0x493, 0x3, 0x2, 0x2, 0x2, 0x495, 0x496, 0x3, 0x2, 0x2, 0x2, 0x496, 
       0x499, 0x3, 0x2, 0x2, 0x2, 0x497, 0x495, 0x3, 0x2, 0x2, 0x2, 0x498, 
       0x488, 0x3, 0x2, 0x2, 0x2, 0x498, 0x490, 0x3, 0x2, 0x2, 0x2, 0x499, 
       0xa5, 0x3, 0x2, 0x2, 0x2, 0x49a, 0x49c, 0x5, 0xa8, 0x55, 0x2, 0x49b, 
       0x49a, 0x3, 0x2, 0x2, 0x2, 0x49c, 0x49f, 0x3, 0x2, 0x2, 0x2, 0x49d, 
       0x49b, 0x3, 0x2, 0x2, 0x2, 0x49d, 0x49e, 0x3, 0x2, 0x2, 0x2, 0x49e, 
       0x4a0, 0x3, 0x2, 0x2, 0x2, 0x49f, 0x49d, 0x3, 0x2, 0x2, 0x2, 0x4a0, 
       0x4a1, 0x5, 0x80, 0x41, 0x2, 0x4a1, 0x4a2, 0x5, 0x7c, 0x3f, 0x2, 
       0x4a2, 0xa7, 0x3, 0x2, 0x2, 0x2, 0x4a3, 0x4a6, 0x5, 0xf2, 0x7a, 0x2, 
       0x4a4, 0x4a6, 0x7, 0x1e, 0x2, 0x2, 0x4a5, 0x4a3, 0x3, 0x2, 0x2, 0x2, 
       0x4a5, 0x4a4, 0x3, 0x2, 0x2, 0x2, 0x4a6, 0xa9, 0x3, 0x2, 0x2, 0x2, 
       0x4a7, 0x4a9, 0x5, 0xa8, 0x55, 0x2, 0x4a8, 0x4a7, 0x3, 0x2, 0x2, 
       0x2, 0x4a9, 0x4ac, 0x3, 0x2, 0x2, 0x2, 0x4aa, 0x4a8, 0x3, 0x2, 0x2, 
       0x2, 0x4aa, 0x4ab, 0x3, 0x2, 0x2, 0x2, 0x4ab, 0x4ad, 0x3, 0x2, 0x2, 
       0x2, 0x4ac, 0x4aa, 0x3, 0x2, 0x2, 0x2, 0x4ad, 0x4b1, 0x5, 0x80, 0x41, 
       0x2, 0x4ae, 0x4b0, 0x5, 0xf2, 0x7a, 0x2, 0x4af, 0x4ae, 0x3, 0x2, 
       0x2, 0x2, 0x4b0, 0x4b3, 0x3, 0x2, 0x2, 0x2, 0x4b1, 0x4af, 0x3, 0x2, 
       0x2, 0x2, 0x4b1, 0x4b2, 0x3, 0x2, 0x2, 0x2, 0x4b2, 0x4b4, 0x3, 0x2, 
       0x2, 0x2, 0x4b3, 0x4b1, 0x3, 0x2, 0x2, 0x2, 0x4b4, 0x4b5, 0x7, 0x4f, 
       0x2, 0x2, 0x4b5, 0x4b6, 0x5, 0x7c, 0x3f, 0x2, 0x4b6, 0x4b9, 0x3, 
       0x2, 0x2, 0x2, 0x4b7, 0x4b9, 0x5, 0xa6, 0x54, 0x2, 0x4b8, 0x4aa, 
       0x3, 0x2, 0x2, 0x2, 0x4b8, 0x4b7, 0x3, 0x2, 0x2, 0x2, 0x4b9, 0xab, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x4bc, 0x5, 0xf2, 0x7a, 0x2, 0x4bb, 0x4ba, 
       0x3, 0x2, 0x2, 0x2, 0x4bc, 0x4bf, 0x3, 0x2, 0x2, 0x2, 0x4bd, 0x4bb, 
       0x3, 0x2, 0x2, 0x2, 0x4bd, 0x4be, 0x3, 0x2, 0x2, 0x2, 0x4be, 0x4c0, 
       0x3, 0x2, 0x2, 0x2, 0x4bf, 0x4bd, 0x3, 0x2, 0x2, 0x2, 0x4c0, 0x4c4, 
       0x5, 0x80, 0x41, 0x2, 0x4c1, 0x4c2, 0x5, 0x1ea, 0xf6, 0x2, 0x4c2, 
       0x4c3, 0x7, 0x4e, 0x2, 0x2, 0x4c3, 0x4c5, 0x3, 0x2, 0x2, 0x2, 0x4c4, 
       0x4c1, 0x3, 0x2, 0x2, 0x2, 0x4c4, 0x4c5, 0x3, 0x2, 0x2, 0x2, 0x4c5, 
       0x4c6, 0x3, 0x2, 0x2, 0x2, 0x4c6, 0x4c7, 0x7, 0x37, 0x2, 0x2, 0x4c7, 
       0xad, 0x3, 0x2, 0x2, 0x2, 0x4c8, 0x4c9, 0x7, 0x39, 0x2, 0x2, 0x4c9, 
       0x4ca, 0x5, 0xb0, 0x59, 0x2, 0x4ca, 0xaf, 0x3, 0x2, 0x2, 0x2, 0x4cb, 
       0x4d0, 0x5, 0xb2, 0x5a, 0x2, 0x4cc, 0x4cd, 0x7, 0x4d, 0x2, 0x2, 0x4cd, 
       0x4cf, 0x5, 0xb2, 0x5a, 0x2, 0x4ce, 0x4cc, 0x3, 0x2, 0x2, 0x2, 0x4cf, 
       0x4d2, 0x3, 0x2, 0x2, 0x2, 0x4d0, 0x4ce, 0x3, 0x2, 0x2, 0x2, 0x4d0, 
       0x4d1, 0x3, 0x2, 0x2, 0x2, 0x4d1, 0xb1, 0x3, 0x2, 0x2, 0x2, 0x4d2, 
       0x4d0, 0x3, 0x2, 0x2, 0x2, 0x4d3, 0x4d6, 0x5, 0x10, 0x9, 0x2, 0x4d4, 
       0x4d6, 0x5, 0x1c, 0xf, 0x2, 0x4d5, 0x4d3, 0x3, 0x2, 0x2, 0x2, 0x4d5, 
       0x4d4, 0x3, 0x2, 0x2, 0x2, 0x4d6, 0xb3, 0x3, 0x2, 0x2, 0x2, 0x4d7, 
       0x4da, 0x5, 0x108, 0x85, 0x2, 0x4d8, 0x4da, 0x7, 0x4c, 0x2, 0x2, 
       0x4d9, 0x4d7, 0x3, 0x2, 0x2, 0x2, 0x4d9, 0x4d8, 0x3, 0x2, 0x2, 0x2, 
       0x4da, 0xb5, 0x3, 0x2, 0x2, 0x2, 0x4db, 0x4dc, 0x5, 0x108, 0x85, 
       0x2, 0x4dc, 0xb7, 0x3, 0x2, 0x2, 0x2, 0x4dd, 0x4de, 0x7, 0x32, 0x2, 
       0x2, 0x4de, 0x4df, 0x5, 0x108, 0x85, 0x2, 0x4df, 0xb9, 0x3, 0x2, 
       0x2, 0x2, 0x4e0, 0x4e2, 0x5, 0xbc, 0x5f, 0x2, 0x4e1, 0x4e0, 0x3, 
       0x2, 0x2, 0x2, 0x4e2, 0x4e5, 0x3, 0x2, 0x2, 0x2, 0x4e3, 0x4e1, 0x3, 
       0x2, 0x2, 0x2, 0x4e3, 0x4e4, 0x3, 0x2, 0x2, 0x2, 0x4e4, 0x4e6, 0x3, 
       0x2, 0x2, 0x2, 0x4e5, 0x4e3, 0x3, 0x2, 0x2, 0x2, 0x4e6, 0x4e8, 0x5, 
       0xbe, 0x60, 0x2, 0x4e7, 0x4e9, 0x5, 0xae, 0x58, 0x2, 0x4e8, 0x4e7, 
       0x3, 0x2, 0x2, 0x2, 0x4e8, 0x4e9, 0x3, 0x2, 0x2, 0x2, 0x4e9, 0x4ea, 
       0x3, 0x2, 0x2, 0x2, 0x4ea, 0x4eb, 0x5, 0xc2, 0x62, 0x2, 0x4eb, 0xbb, 
       0x3, 0x2, 0x2, 0x2, 0x4ec, 0x4f1, 0x5, 0xf2, 0x7a, 0x2, 0x4ed, 0x4f1, 
       0x7, 0x2f, 0x2, 0x2, 0x4ee, 0x4f1, 0x7, 0x2e, 0x2, 0x2, 0x4ef, 0x4f1, 
       0x7, 0x2d, 0x2, 0x2, 0x4f0, 0x4ec, 0x3, 0x2, 0x2, 0x2, 0x4f0, 0x4ed, 
       0x3, 0x2, 0x2, 0x2, 0x4f0, 0x4ee, 0x3, 0x2, 0x2, 0x2, 0x4f0, 0x4ef, 
       0x3, 0x2, 0x2, 0x2, 0x4f1, 0xbd, 0x3, 0x2, 0x2, 0x2, 0x4f2, 0x4f4, 
       0x5, 0x64, 0x33, 0x2, 0x4f3, 0x4f2, 0x3, 0x2, 0x2, 0x2, 0x4f3, 0x4f4, 
       0x3, 0x2, 0x2, 0x2, 0x4f4, 0x4f5, 0x3, 0x2, 0x2, 0x2, 0x4f5, 0x4f6, 
       0x5, 0xc0, 0x61, 0x2, 0x4f6, 0x4f8, 0x7, 0x46, 0x2, 0x2, 0x4f7, 0x4f9, 
       0x5, 0xa2, 0x52, 0x2, 0x4f8, 0x4f7, 0x3, 0x2, 0x2, 0x2, 0x4f8, 0x4f9, 
       0x3, 0x2, 0x2, 0x2, 0x4f9, 0x4fa, 0x3, 0x2, 0x2, 0x2, 0x4fa, 0x4fb, 
       0x7, 0x47, 0x2, 0x2, 0x4fb, 0xbf, 0x3, 0x2, 0x2, 0x2, 0x4fc, 0x4fd, 
       0x5, 0x1ea, 0xf6, 0x2, 0x4fd, 0xc1, 0x3, 0x2, 0x2, 0x2, 0x4fe, 0x500, 
       0x7, 0x48, 0x2, 0x2, 0x4ff, 0x501, 0x5, 0xc4, 0x63, 0x2, 0x500, 0x4ff, 
       0x3, 0x2, 0x2, 0x2, 0x500, 0x501, 0x3, 0x2, 0x2, 0x2, 0x501, 0x503, 
       0x3, 0x2, 0x2, 0x2, 0x502, 0x504, 0x5, 0x10a, 0x86, 0x2, 0x503, 0x502, 
       0x3, 0x2, 0x2, 0x2, 0x503, 0x504, 0x3, 0x2, 0x2, 0x2, 0x504, 0x505, 
       0x3, 0x2, 0x2, 0x2, 0x505, 0x506, 0x7, 0x49, 0x2, 0x2, 0x506, 0xc3, 
       0x3, 0x2, 0x2, 0x2, 0x507, 0x509, 0x5, 0x2a, 0x16, 0x2, 0x508, 0x507, 
       0x3, 0x2, 0x2, 0x2, 0x508, 0x509, 0x3, 0x2, 0x2, 0x2, 0x509, 0x50a, 
       0x3, 0x2, 0x2, 0x2, 0x50a, 0x50b, 0x7, 0x37, 0x2, 0x2, 0x50b, 0x50d, 
       0x7, 0x46, 0x2, 0x2, 0x50c, 0x50e, 0x5, 0x19e, 0xd0, 0x2, 0x50d, 
       0x50c, 0x3, 0x2, 0x2, 0x2, 0x50d, 0x50e, 0x3, 0x2, 0x2, 0x2, 0x50e, 
       0x50f, 0x3, 0x2, 0x2, 0x2, 0x50f, 0x510, 0x7, 0x47, 0x2, 0x2, 0x510, 
       0x536, 0x7, 0x4c, 0x2, 0x2, 0x511, 0x513, 0x5, 0x2a, 0x16, 0x2, 0x512, 
       0x511, 0x3, 0x2, 0x2, 0x2, 0x512, 0x513, 0x3, 0x2, 0x2, 0x2, 0x513, 
       0x514, 0x3, 0x2, 0x2, 0x2, 0x514, 0x515, 0x7, 0x34, 0x2, 0x2, 0x515, 
       0x517, 0x7, 0x46, 0x2, 0x2, 0x516, 0x518, 0x5, 0x19e, 0xd0, 0x2, 
       0x517, 0x516, 0x3, 0x2, 0x2, 0x2, 0x517, 0x518, 0x3, 0x2, 0x2, 0x2, 
       0x518, 0x519, 0x3, 0x2, 0x2, 0x2, 0x519, 0x51a, 0x7, 0x47, 0x2, 0x2, 
       0x51a, 0x536, 0x7, 0x4c, 0x2, 0x2, 0x51b, 0x51c, 0x5, 0x3c, 0x1f, 
       0x2, 0x51c, 0x51e, 0x7, 0x4e, 0x2, 0x2, 0x51d, 0x51f, 0x5, 0x2a, 
       0x16, 0x2, 0x51e, 0x51d, 0x3, 0x2, 0x2, 0x2, 0x51e, 0x51f, 0x3, 0x2, 
       0x2, 0x2, 0x51f, 0x520, 0x3, 0x2, 0x2, 0x2, 0x520, 0x521, 0x7, 0x34, 
       0x2, 0x2, 0x521, 0x523, 0x7, 0x46, 0x2, 0x2, 0x522, 0x524, 0x5, 0x19e, 
       0xd0, 0x2, 0x523, 0x522, 0x3, 0x2, 0x2, 0x2, 0x523, 0x524, 0x3, 0x2, 
       0x2, 0x2, 0x524, 0x525, 0x3, 0x2, 0x2, 0x2, 0x525, 0x526, 0x7, 0x47, 
       0x2, 0x2, 0x526, 0x527, 0x7, 0x4c, 0x2, 0x2, 0x527, 0x536, 0x3, 0x2, 
       0x2, 0x2, 0x528, 0x529, 0x5, 0x16e, 0xb8, 0x2, 0x529, 0x52b, 0x7, 
       0x4e, 0x2, 0x2, 0x52a, 0x52c, 0x5, 0x2a, 0x16, 0x2, 0x52b, 0x52a, 
       0x3, 0x2, 0x2, 0x2, 0x52b, 0x52c, 0x3, 0x2, 0x2, 0x2, 0x52c, 0x52d, 
       0x3, 0x2, 0x2, 0x2, 0x52d, 0x52e, 0x7, 0x34, 0x2, 0x2, 0x52e, 0x530, 
       0x7, 0x46, 0x2, 0x2, 0x52f, 0x531, 0x5, 0x19e, 0xd0, 0x2, 0x530, 
       0x52f, 0x3, 0x2, 0x2, 0x2, 0x530, 0x531, 0x3, 0x2, 0x2, 0x2, 0x531, 
       0x532, 0x3, 0x2, 0x2, 0x2, 0x532, 0x533, 0x7, 0x47, 0x2, 0x2, 0x533, 
       0x534, 0x7, 0x4c, 0x2, 0x2, 0x534, 0x536, 0x3, 0x2, 0x2, 0x2, 0x535, 
       0x508, 0x3, 0x2, 0x2, 0x2, 0x535, 0x512, 0x3, 0x2, 0x2, 0x2, 0x535, 
       0x51b, 0x3, 0x2, 0x2, 0x2, 0x535, 0x528, 0x3, 0x2, 0x2, 0x2, 0x536, 
       0xc5, 0x3, 0x2, 0x2, 0x2, 0x537, 0x539, 0x5, 0x62, 0x32, 0x2, 0x538, 
       0x537, 0x3, 0x2, 0x2, 0x2, 0x539, 0x53c, 0x3, 0x2, 0x2, 0x2, 0x53a, 
       0x538, 0x3, 0x2, 0x2, 0x2, 0x53a, 0x53b, 0x3, 0x2, 0x2, 0x2, 0x53b, 
       0x53d, 0x3, 0x2, 0x2, 0x2, 0x53c, 0x53a, 0x3, 0x2, 0x2, 0x2, 0x53d, 
       0x53e, 0x7, 0x1c, 0x2, 0x2, 0x53e, 0x540, 0x5, 0x1ea, 0xf6, 0x2, 
       0x53f, 0x541, 0x5, 0x6a, 0x36, 0x2, 0x540, 0x53f, 0x3, 0x2, 0x2, 
       0x2, 0x540, 0x541, 0x3, 0x2, 0x2, 0x2, 0x541, 0x542, 0x3, 0x2, 0x2, 
       0x2, 0x542, 0x543, 0x5, 0xc8, 0x65, 0x2, 0x543, 0xc7, 0x3, 0x2, 0x2, 
       0x2, 0x544, 0x546, 0x7, 0x48, 0x2, 0x2, 0x545, 0x547, 0x5, 0xca, 
       0x66, 0x2, 0x546, 0x545, 0x3, 0x2, 0x2, 0x2, 0x546, 0x547, 0x3, 0x2, 
       0x2, 0x2, 0x547, 0x549, 0x3, 0x2, 0x2, 0x2, 0x548, 0x54a, 0x7, 0x4d, 
       0x2, 0x2, 0x549, 0x548, 0x3, 0x2, 0x2, 0x2, 0x549, 0x54a, 0x3, 0x2, 
       0x2, 0x2, 0x54a, 0x54c, 0x3, 0x2, 0x2, 0x2, 0x54b, 0x54d, 0x5, 0xd0, 
       0x69, 0x2, 0x54c, 0x54b, 0x3, 0x2, 0x2, 0x2, 0x54c, 0x54d, 0x3, 0x2, 
       0x2, 0x2, 0x54d, 0x54e, 0x3, 0x2, 0x2, 0x2, 0x54e, 0x54f, 0x7, 0x49, 
       0x2, 0x2, 0x54f, 0xc9, 0x3, 0x2, 0x2, 0x2, 0x550, 0x555, 0x5, 0xcc, 
       0x67, 0x2, 0x551, 0x552, 0x7, 0x4d, 0x2, 0x2, 0x552, 0x554, 0x5, 
       0xcc, 0x67, 0x2, 0x553, 0x551, 0x3, 0x2, 0x2, 0x2, 0x554, 0x557, 
       0x3, 0x2, 0x2, 0x2, 0x555, 0x553, 0x3, 0x2, 0x2, 0x2, 0x555, 0x556, 
       0x3, 0x2, 0x2, 0x2, 0x556, 0xcb, 0x3, 0x2, 0x2, 0x2, 0x557, 0x555, 
       0x3, 0x2, 0x2, 0x2, 0x558, 0x55a, 0x5, 0xce, 0x68, 0x2, 0x559, 0x558, 
       0x3, 0x2, 0x2, 0x2, 0x55a, 0x55d, 0x3, 0x2, 0x2, 0x2, 0x55b, 0x559, 
       0x3, 0x2, 0x2, 0x2, 0x55b, 0x55c, 0x3, 0x2, 0x2, 0x2, 0x55c, 0x55e, 
       0x3, 0x2, 0x2, 0x2, 0x55d, 0x55b, 0x3, 0x2, 0x2, 0x2, 0x55e, 0x564, 
       0x5, 0x1ea, 0xf6, 0x2, 0x55f, 0x561, 0x7, 0x46, 0x2, 0x2, 0x560, 
       0x562, 0x5, 0x19e, 0xd0, 0x2, 0x561, 0x560, 0x3, 0x2, 0x2, 0x2, 0x561, 
       0x562, 0x3, 0x2, 0x2, 0x2, 0x562, 0x563, 0x3, 0x2, 0x2, 0x2, 0x563, 
       0x565, 0x7, 0x47, 0x2, 0x2, 0x564, 0x55f, 0x3, 0x2, 0x2, 0x2, 0x564, 
       0x565, 0x3, 0x2, 0x2, 0x2, 0x565, 0x567, 0x3, 0x2, 0x2, 0x2, 0x566, 
       0x568, 0x5, 0x6e, 0x38, 0x2, 0x567, 0x566, 0x3, 0x2, 0x2, 0x2, 0x567, 
       0x568, 0x3, 0x2, 0x2, 0x2, 0x568, 0xcd, 0x3, 0x2, 0x2, 0x2, 0x569, 
       0x56a, 0x5, 0xf2, 0x7a, 0x2, 0x56a, 0xcf, 0x3, 0x2, 0x2, 0x2, 0x56b, 
       0x56f, 0x7, 0x4c, 0x2, 0x2, 0x56c, 0x56e, 0x5, 0x70, 0x39, 0x2, 0x56d, 
       0x56c, 0x3, 0x2, 0x2, 0x2, 0x56e, 0x571, 0x3, 0x2, 0x2, 0x2, 0x56f, 
       0x56d, 0x3, 0x2, 0x2, 0x2, 0x56f, 0x570, 0x3, 0x2, 0x2, 0x2, 0x570, 
       0xd1, 0x3, 0x2, 0x2, 0x2, 0x571, 0x56f, 0x3, 0x2, 0x2, 0x2, 0x572, 
       0x575, 0x5, 0xd4, 0x6b, 0x2, 0x573, 0x575, 0x5, 0xe6, 0x74, 0x2, 
       0x574, 0x572, 0x3, 0x2, 0x2, 0x2, 0x574, 0x573, 0x3, 0x2, 0x2, 0x2, 
       0x575, 0xd3, 0x3, 0x2, 0x2, 0x2, 0x576, 0x578, 0x5, 0xd6, 0x6c, 0x2, 
       0x577, 0x576, 0x3, 0x2, 0x2, 0x2, 0x578, 0x57b, 0x3, 0x2, 0x2, 0x2, 
       0x579, 0x577, 0x3, 0x2, 0x2, 0x2, 0x579, 0x57a, 0x3, 0x2, 0x2, 0x2, 
       0x57a, 0x57c, 0x3, 0x2, 0x2, 0x2, 0x57b, 0x579, 0x3, 0x2, 0x2, 0x2, 
       0x57c, 0x57d, 0x7, 0x28, 0x2, 0x2, 0x57d, 0x57f, 0x5, 0x1ea, 0xf6, 
       0x2, 0x57e, 0x580, 0x5, 0x64, 0x33, 0x2, 0x57f, 0x57e, 0x3, 0x2, 
       0x2, 0x2, 0x57f, 0x580, 0x3, 0x2, 0x2, 0x2, 0x580, 0x582, 0x3, 0x2, 
       0x2, 0x2, 0x581, 0x583, 0x5, 0xd8, 0x6d, 0x2, 0x582, 0x581, 0x3, 
       0x2, 0x2, 0x2, 0x582, 0x583, 0x3, 0x2, 0x2, 0x2, 0x583, 0x584, 0x3, 
       0x2, 0x2, 0x2, 0x584, 0x585, 0x5, 0xda, 0x6e, 0x2, 0x585, 0xd5, 0x3, 
       0x2, 0x2, 0x2, 0x586, 0x58e, 0x5, 0xf2, 0x7a, 0x2, 0x587, 0x58e, 
       0x7, 0x2f, 0x2, 0x2, 0x588, 0x58e, 0x7, 0x2e, 0x2, 0x2, 0x589, 0x58e, 
       0x7, 0x2d, 0x2, 0x2, 0x58a, 0x58e, 0x7, 0xd, 0x2, 0x2, 0x58b, 0x58e, 
       0x7, 0x32, 0x2, 0x2, 0x58c, 0x58e, 0x7, 0x33, 0x2, 0x2, 0x58d, 0x586, 
       0x3, 0x2, 0x2, 0x2, 0x58d, 0x587, 0x3, 0x2, 0x2, 0x2, 0x58d, 0x588, 
       0x3, 0x2, 0x2, 0x2, 0x58d, 0x589, 0x3, 0x2, 0x2, 0x2, 0x58d, 0x58a, 
       0x3, 0x2, 0x2, 0x2, 0x58d, 0x58b, 0x3, 0x2, 0x2, 0x2, 0x58d, 0x58c, 
       0x3, 0x2, 0x2, 0x2, 0x58e, 0xd7, 0x3, 0x2, 0x2, 0x2, 0x58f, 0x590, 
       0x7, 0x1d, 0x2, 0x2, 0x590, 0x591, 0x5, 0x6c, 0x37, 0x2, 0x591, 0xd9, 
       0x3, 0x2, 0x2, 0x2, 0x592, 0x596, 0x7, 0x48, 0x2, 0x2, 0x593, 0x595, 
       0x5, 0xdc, 0x6f, 0x2, 0x594, 0x593, 0x3, 0x2, 0x2, 0x2, 0x595, 0x598, 
       0x3, 0x2, 0x2, 0x2, 0x596, 0x594, 0x3, 0x2, 0x2, 0x2, 0x596, 0x597, 
       0x3, 0x2, 0x2, 0x2, 0x597, 0x599, 0x3, 0x2, 0x2, 0x2, 0x598, 0x596, 
       0x3, 0x2, 0x2, 0x2, 0x599, 0x59a, 0x7, 0x49, 0x2, 0x2, 0x59a, 0xdb, 
       0x3, 0x2, 0x2, 0x2, 0x59b, 0x5a1, 0x5, 0xde, 0x70, 0x2, 0x59c, 0x5a1, 
       0x5, 0xe2, 0x72, 0x2, 0x59d, 0x5a1, 0x5, 0x5e, 0x30, 0x2, 0x59e, 
       0x5a1, 0x5, 0xd2, 0x6a, 0x2, 0x59f, 0x5a1, 0x7, 0x4c, 0x2, 0x2, 0x5a0, 
       0x59b, 0x3, 0x2, 0x2, 0x2, 0x5a0, 0x59c, 0x3, 0x2, 0x2, 0x2, 0x5a0, 
       0x59d, 0x3, 0x2, 0x2, 0x2, 0x5a0, 0x59e, 0x3, 0x2, 0x2, 0x2, 0x5a0, 
       0x59f, 0x3, 0x2, 0x2, 0x2, 0x5a1, 0xdd, 0x3, 0x2, 0x2, 0x2, 0x5a2, 
       0x5a4, 0x5, 0xe0, 0x71, 0x2, 0x5a3, 0x5a2, 0x3, 0x2, 0x2, 0x2, 0x5a4, 
       0x5a7, 0x3, 0x2, 0x2, 0x2, 0x5a5, 0x5a3, 0x3, 0x2, 0x2, 0x2, 0x5a5, 
       0x5a6, 0x3, 0x2, 0x2, 0x2, 0x5a6, 0x5a8, 0x3, 0x2, 0x2, 0x2, 0x5a7, 
       0x5a5, 0x3, 0x2, 0x2, 0x2, 0x5a8, 0x5a9, 0x5, 0x80, 0x41, 0x2, 0x5a9, 
       0x5aa, 0x5, 0x78, 0x3d, 0x2, 0x5aa, 0x5ab, 0x7, 0x4c, 0x2, 0x2, 0x5ab, 
       0xdf, 0x3, 0x2, 0x2, 0x2, 0x5ac, 0x5b1, 0x5, 0xf2, 0x7a, 0x2, 0x5ad, 
       0x5b1, 0x7, 0x2f, 0x2, 0x2, 0x5ae, 0x5b1, 0x7, 0x32, 0x2, 0x2, 0x5af, 
       0x5b1, 0x7, 0x1e, 0x2, 0x2, 0x5b0, 0x5ac, 0x3, 0x2, 0x2, 0x2, 0x5b0, 
       0x5ad, 0x3, 0x2, 0x2, 0x2, 0x5b0, 0x5ae, 0x3, 0x2, 0x2, 0x2, 0x5b0, 
       0x5af, 0x3, 0x2, 0x2, 0x2, 0x5b1, 0xe1, 0x3, 0x2, 0x2, 0x2, 0x5b2, 
       0x5b4, 0x5, 0xe4, 0x73, 0x2, 0x5b3, 0x5b2, 0x3, 0x2, 0x2, 0x2, 0x5b4, 
       0x5b7, 0x3, 0x2, 0x2, 0x2, 0x5b5, 0x5b3, 0x3, 0x2, 0x2, 0x2, 0x5b5, 
       0x5b6, 0x3, 0x2, 0x2, 0x2, 0x5b6, 0x5b8, 0x3, 0x2, 0x2, 0x2, 0x5b7, 
       0x5b5, 0x3, 0x2, 0x2, 0x2, 0x5b8, 0x5b9, 0x5, 0x9c, 0x4f, 0x2, 0x5b9, 
       0x5ba, 0x5, 0xb4, 0x5b, 0x2, 0x5ba, 0xe3, 0x3, 0x2, 0x2, 0x2, 0x5bb, 
       0x5c3, 0x5, 0xf2, 0x7a, 0x2, 0x5bc, 0x5c3, 0x7, 0x2f, 0x2, 0x2, 0x5bd, 
       0x5c3, 0x7, 0x2d, 0x2, 0x2, 0x5be, 0x5c3, 0x7, 0xd, 0x2, 0x2, 0x5bf, 
       0x5c3, 0x7, 0x18, 0x2, 0x2, 0x5c0, 0x5c3, 0x7, 0x32, 0x2, 0x2, 0x5c1, 
       0x5c3, 0x7, 0x33, 0x2, 0x2, 0x5c2, 0x5bb, 0x3, 0x2, 0x2, 0x2, 0x5c2, 
       0x5bc, 0x3, 0x2, 0x2, 0x2, 0x5c2, 0x5bd, 0x3, 0x2, 0x2, 0x2, 0x5c2, 
       0x5be, 0x3, 0x2, 0x2, 0x2, 0x5c2, 0x5bf, 0x3, 0x2, 0x2, 0x2, 0x5c2, 
       0x5c0, 0x3, 0x2, 0x2, 0x2, 0x5c2, 0x5c1, 0x3, 0x2, 0x2, 0x2, 0x5c3, 
       0xe5, 0x3, 0x2, 0x2, 0x2, 0x5c4, 0x5c6, 0x5, 0xd6, 0x6c, 0x2, 0x5c5, 
       0x5c4, 0x3, 0x2, 0x2, 0x2, 0x5c6, 0x5c9, 0x3, 0x2, 0x2, 0x2, 0x5c7, 
       0x5c5, 0x3, 0x2, 0x2, 0x2, 0x5c7, 0x5c8, 0x3, 0x2, 0x2, 0x2, 0x5c8, 
       0x5ca, 0x3, 0x2, 0x2, 0x2, 0x5c9, 0x5c7, 0x3, 0x2, 0x2, 0x2, 0x5ca, 
       0x5cb, 0x7, 0x50, 0x2, 0x2, 0x5cb, 0x5cc, 0x7, 0x28, 0x2, 0x2, 0x5cc, 
       0x5cd, 0x5, 0x1ea, 0xf6, 0x2, 0x5cd, 0x5ce, 0x5, 0xe8, 0x75, 0x2, 
       0x5ce, 0xe7, 0x3, 0x2, 0x2, 0x2, 0x5cf, 0x5d3, 0x7, 0x48, 0x2, 0x2, 
       0x5d0, 0x5d2, 0x5, 0xea, 0x76, 0x2, 0x5d1, 0x5d0, 0x3, 0x2, 0x2, 
       0x2, 0x5d2, 0x5d5, 0x3, 0x2, 0x2, 0x2, 0x5d3, 0x5d1, 0x3, 0x2, 0x2, 
       0x2, 0x5d3, 0x5d4, 0x3, 0x2, 0x2, 0x2, 0x5d4, 0x5d6, 0x3, 0x2, 0x2, 
       0x2, 0x5d5, 0x5d3, 0x3, 0x2, 0x2, 0x2, 0x5d6, 0x5d7, 0x7, 0x49, 0x2, 
       0x2, 0x5d7, 0xe9, 0x3, 0x2, 0x2, 0x2, 0x5d8, 0x5de, 0x5, 0xec, 0x77, 
       0x2, 0x5d9, 0x5de, 0x5, 0xde, 0x70, 0x2, 0x5da, 0x5de, 0x5, 0x5e, 
       0x30, 0x2, 0x5db, 0x5de, 0x5, 0xd2, 0x6a, 0x2, 0x5dc, 0x5de, 0x7, 
       0x4c, 0x2, 0x2, 0x5dd, 0x5d8, 0x3, 0x2, 0x2, 0x2, 0x5dd, 0x5d9, 0x3, 
       0x2, 0x2, 0x2, 0x5dd, 0x5da, 0x3, 0x2, 0x2, 0x2, 0x5dd, 0x5db, 0x3, 
       0x2, 0x2, 0x2, 0x5dd, 0x5dc, 0x3, 0x2, 0x2, 0x2, 0x5de, 0xeb, 0x3, 
       0x2, 0x2, 0x2, 0x5df, 0x5e1, 0x5, 0xee, 0x78, 0x2, 0x5e0, 0x5df, 
       0x3, 0x2, 0x2, 0x2, 0x5e1, 0x5e4, 0x3, 0x2, 0x2, 0x2, 0x5e2, 0x5e0, 
       0x3, 0x2, 0x2, 0x2, 0x5e2, 0x5e3, 0x3, 0x2, 0x2, 0x2, 0x5e3, 0x5e5, 
       0x3, 0x2, 0x2, 0x2, 0x5e4, 0x5e2, 0x3, 0x2, 0x2, 0x2, 0x5e5, 0x5e6, 
       0x5, 0x80, 0x41, 0x2, 0x5e6, 0x5e7, 0x5, 0x1ea, 0xf6, 0x2, 0x5e7, 
       0x5e8, 0x7, 0x46, 0x2, 0x2, 0x5e8, 0x5ea, 0x7, 0x47, 0x2, 0x2, 0x5e9, 
       0x5eb, 0x5, 0x20, 0x11, 0x2, 0x5ea, 0x5e9, 0x3, 0x2, 0x2, 0x2, 0x5ea, 
       0x5eb, 0x3, 0x2, 0x2, 0x2, 0x5eb, 0x5ed, 0x3, 0x2, 0x2, 0x2, 0x5ec, 
       0x5ee, 0x5, 0xf0, 0x79, 0x2, 0x5ed, 0x5ec, 0x3, 0x2, 0x2, 0x2, 0x5ed, 
       0x5ee, 0x3, 0x2, 0x2, 0x2, 0x5ee, 0x5ef, 0x3, 0x2, 0x2, 0x2, 0x5ef, 
       0x5f0, 0x7, 0x4c, 0x2, 0x2, 0x5f0, 0xed, 0x3, 0x2, 0x2, 0x2, 0x5f1, 
       0x5f5, 0x5, 0xf2, 0x7a, 0x2, 0x5f2, 0x5f5, 0x7, 0x2f, 0x2, 0x2, 0x5f3, 
       0x5f5, 0x7, 0xd, 0x2, 0x2, 0x5f4, 0x5f1, 0x3, 0x2, 0x2, 0x2, 0x5f4, 
       0x5f2, 0x3, 0x2, 0x2, 0x2, 0x5f4, 0x5f3, 0x3, 0x2, 0x2, 0x2, 0x5f5, 
       0xef, 0x3, 0x2, 0x2, 0x2, 0x5f6, 0x5f7, 0x7, 0x18, 0x2, 0x2, 0x5f7, 
       0x5f8, 0x5, 0xfa, 0x7e, 0x2, 0x5f8, 0xf1, 0x3, 0x2, 0x2, 0x2, 0x5f9, 
       0x5fd, 0x5, 0xf4, 0x7b, 0x2, 0x5fa, 0x5fd, 0x5, 0x100, 0x81, 0x2, 
       0x5fb, 0x5fd, 0x5, 0x102, 0x82, 0x2, 0x5fc, 0x5f9, 0x3, 0x2, 0x2, 
       0x2, 0x5fc, 0x5fa, 0x3, 0x2, 0x2, 0x2, 0x5fc, 0x5fb, 0x3, 0x2, 0x2, 
       0x2, 0x5fd, 0xf3, 0x3, 0x2, 0x2, 0x2, 0x5fe, 0x5ff, 0x7, 0x50, 0x2, 
       0x2, 0x5ff, 0x600, 0x5, 0x38, 0x1d, 0x2, 0x600, 0x602, 0x7, 0x46, 
       0x2, 0x2, 0x601, 0x603, 0x5, 0xf6, 0x7c, 0x2, 0x602, 0x601, 0x3, 
       0x2, 0x2, 0x2, 0x602, 0x603, 0x3, 0x2, 0x2, 0x2, 0x603, 0x604, 0x3, 
       0x2, 0x2, 0x2, 0x604, 0x605, 0x7, 0x47, 0x2, 0x2, 0x605, 0xf5, 0x3, 
       0x2, 0x2, 0x2, 0x606, 0x60b, 0x5, 0xf8, 0x7d, 0x2, 0x607, 0x608, 
       0x7, 0x4d, 0x2, 0x2, 0x608, 0x60a, 0x5, 0xf8, 0x7d, 0x2, 0x609, 0x607, 
       0x3, 0x2, 0x2, 0x2, 0x60a, 0x60d, 0x3, 0x2, 0x2, 0x2, 0x60b, 0x609, 
       0x3, 0x2, 0x2, 0x2, 0x60b, 0x60c, 0x3, 0x2, 0x2, 0x2, 0x60c, 0xf7, 
       0x3, 0x2, 0x2, 0x2, 0x60d, 0x60b, 0x3, 0x2, 0x2, 0x2, 0x60e, 0x60f, 
       0x5, 0x1ea, 0xf6, 0x2, 0x60f, 0x610, 0x7, 0x52, 0x2, 0x2, 0x610, 
       0x611, 0x5, 0xfa, 0x7e, 0x2, 0x611, 0xf9, 0x3, 0x2, 0x2, 0x2, 0x612, 
       0x616, 0x5, 0x1c0, 0xe1, 0x2, 0x613, 0x616, 0x5, 0xfc, 0x7f, 0x2, 
       0x614, 0x616, 0x5, 0xf2, 0x7a, 0x2, 0x615, 0x612, 0x3, 0x2, 0x2, 
       0x2, 0x615, 0x613, 0x3, 0x2, 0x2, 0x2, 0x615, 0x614, 0x3, 0x2, 0x2, 
       0x2, 0x616, 0xfb, 0x3, 0x2, 0x2, 0x2, 0x617, 0x619, 0x7, 0x48, 0x2, 
       0x2, 0x618, 0x61a, 0x5, 0xfe, 0x80, 0x2, 0x619, 0x618, 0x3, 0x2, 
       0x2, 0x2, 0x619, 0x61a, 0x3, 0x2, 0x2, 0x2, 0x61a, 0x61c, 0x3, 0x2, 
       0x2, 0x2, 0x61b, 0x61d, 0x7, 0x4d, 0x2, 0x2, 0x61c, 0x61b, 0x3, 0x2, 
       0x2, 0x2, 0x61c, 0x61d, 0x3, 0x2, 0x2, 0x2, 0x61d, 0x61e, 0x3, 0x2, 
       0x2, 0x2, 0x61e, 0x61f, 0x7, 0x49, 0x2, 0x2, 0x61f, 0xfd, 0x3, 0x2, 
       0x2, 0x2, 0x620, 0x625, 0x5, 0xfa, 0x7e, 0x2, 0x621, 0x622, 0x7, 
       0x4d, 0x2, 0x2, 0x622, 0x624, 0x5, 0xfa, 0x7e, 0x2, 0x623, 0x621, 
       0x3, 0x2, 0x2, 0x2, 0x624, 0x627, 0x3, 0x2, 0x2, 0x2, 0x625, 0x623, 
       0x3, 0x2, 0x2, 0x2, 0x625, 0x626, 0x3, 0x2, 0x2, 0x2, 0x626, 0xff, 
       0x3, 0x2, 0x2, 0x2, 0x627, 0x625, 0x3, 0x2, 0x2, 0x2, 0x628, 0x629, 
       0x7, 0x50, 0x2, 0x2, 0x629, 0x62a, 0x5, 0x38, 0x1d, 0x2, 0x62a, 0x101, 
       0x3, 0x2, 0x2, 0x2, 0x62b, 0x62c, 0x7, 0x50, 0x2, 0x2, 0x62c, 0x62d, 
       0x5, 0x38, 0x1d, 0x2, 0x62d, 0x62e, 0x7, 0x46, 0x2, 0x2, 0x62e, 0x62f, 
       0x5, 0xfa, 0x7e, 0x2, 0x62f, 0x630, 0x7, 0x47, 0x2, 0x2, 0x630, 0x103, 
       0x3, 0x2, 0x2, 0x2, 0x631, 0x633, 0x7, 0x48, 0x2, 0x2, 0x632, 0x634, 
       0x5, 0x106, 0x84, 0x2, 0x633, 0x632, 0x3, 0x2, 0x2, 0x2, 0x633, 0x634, 
       0x3, 0x2, 0x2, 0x2, 0x634, 0x636, 0x3, 0x2, 0x2, 0x2, 0x635, 0x637, 
       0x7, 0x4d, 0x2, 0x2, 0x636, 0x635, 0x3, 0x2, 0x2, 0x2, 0x636, 0x637, 
       0x3, 0x2, 0x2, 0x2, 0x637, 0x638, 0x3, 0x2, 0x2, 0x2, 0x638, 0x639, 
       0x7, 0x49, 0x2, 0x2, 0x639, 0x105, 0x3, 0x2, 0x2, 0x2, 0x63a, 0x63f, 
       0x5, 0x7e, 0x40, 0x2, 0x63b, 0x63c, 0x7, 0x4d, 0x2, 0x2, 0x63c, 0x63e, 
       0x5, 0x7e, 0x40, 0x2, 0x63d, 0x63b, 0x3, 0x2, 0x2, 0x2, 0x63e, 0x641, 
       0x3, 0x2, 0x2, 0x2, 0x63f, 0x63d, 0x3, 0x2, 0x2, 0x2, 0x63f, 0x640, 
       0x3, 0x2, 0x2, 0x2, 0x640, 0x107, 0x3, 0x2, 0x2, 0x2, 0x641, 0x63f, 
       0x3, 0x2, 0x2, 0x2, 0x642, 0x644, 0x7, 0x48, 0x2, 0x2, 0x643, 0x645, 
       0x5, 0x10a, 0x86, 0x2, 0x644, 0x643, 0x3, 0x2, 0x2, 0x2, 0x644, 0x645, 
       0x3, 0x2, 0x2, 0x2, 0x645, 0x646, 0x3, 0x2, 0x2, 0x2, 0x646, 0x647, 
       0x7, 0x49, 0x2, 0x2, 0x647, 0x109, 0x3, 0x2, 0x2, 0x2, 0x648, 0x64a, 
       0x5, 0x10c, 0x87, 0x2, 0x649, 0x648, 0x3, 0x2, 0x2, 0x2, 0x64a, 0x64b, 
       0x3, 0x2, 0x2, 0x2, 0x64b, 0x649, 0x3, 0x2, 0x2, 0x2, 0x64b, 0x64c, 
       0x3, 0x2, 0x2, 0x2, 0x64c, 0x10b, 0x3, 0x2, 0x2, 0x2, 0x64d, 0x651, 
       0x5, 0x10e, 0x88, 0x2, 0x64e, 0x651, 0x5, 0x5e, 0x30, 0x2, 0x64f, 
       0x651, 0x5, 0x112, 0x8a, 0x2, 0x650, 0x64d, 0x3, 0x2, 0x2, 0x2, 0x650, 
       0x64e, 0x3, 0x2, 0x2, 0x2, 0x650, 0x64f, 0x3, 0x2, 0x2, 0x2, 0x651, 
       0x10d, 0x3, 0x2, 0x2, 0x2, 0x652, 0x653, 0x5, 0x110, 0x89, 0x2, 0x653, 
       0x654, 0x7, 0x4c, 0x2, 0x2, 0x654, 0x10f, 0x3, 0x2, 0x2, 0x2, 0x655, 
       0x657, 0x5, 0xa8, 0x55, 0x2, 0x656, 0x655, 0x3, 0x2, 0x2, 0x2, 0x657, 
       0x65a, 0x3, 0x2, 0x2, 0x2, 0x658, 0x656, 0x3, 0x2, 0x2, 0x2, 0x658, 
       0x659, 0x3, 0x2, 0x2, 0x2, 0x659, 0x65b, 0x3, 0x2, 0x2, 0x2, 0x65a, 
       0x658, 0x3, 0x2, 0x2, 0x2, 0x65b, 0x65c, 0x5, 0x80, 0x41, 0x2, 0x65c, 
       0x65d, 0x5, 0x78, 0x3d, 0x2, 0x65d, 0x111, 0x3, 0x2, 0x2, 0x2, 0x65e, 
       0x665, 0x5, 0x116, 0x8c, 0x2, 0x65f, 0x665, 0x5, 0x11a, 0x8e, 0x2, 
       0x660, 0x665, 0x5, 0x122, 0x92, 0x2, 0x661, 0x665, 0x5, 0x124, 0x93, 
       0x2, 0x662, 0x665, 0x5, 0x136, 0x9c, 0x2, 0x663, 0x665, 0x5, 0x13c, 
       0x9f, 0x2, 0x664, 0x65e, 0x3, 0x2, 0x2, 0x2, 0x664, 0x65f, 0x3, 0x2, 
       0x2, 0x2, 0x664, 0x660, 0x3, 0x2, 0x2, 0x2, 0x664, 0x661, 0x3, 0x2, 
       0x2, 0x2, 0x664, 0x662, 0x3, 0x2, 0x2, 0x2, 0x664, 0x663, 0x3, 0x2, 
       0x2, 0x2, 0x665, 0x113, 0x3, 0x2, 0x2, 0x2, 0x666, 0x66c, 0x5, 0x116, 
       0x8c, 0x2, 0x667, 0x66c, 0x5, 0x11c, 0x8f, 0x2, 0x668, 0x66c, 0x5, 
       0x126, 0x94, 0x2, 0x669, 0x66c, 0x5, 0x138, 0x9d, 0x2, 0x66a, 0x66c, 
       0x5, 0x13e, 0xa0, 0x2, 0x66b, 0x666, 0x3, 0x2, 0x2, 0x2, 0x66b, 0x667, 
       0x3, 0x2, 0x2, 0x2, 0x66b, 0x668, 0x3, 0x2, 0x2, 0x2, 0x66b, 0x669, 
       0x3, 0x2, 0x2, 0x2, 0x66b, 0x66a, 0x3, 0x2, 0x2, 0x2, 0x66c, 0x115, 
       0x3, 0x2, 0x2, 0x2, 0x66d, 0x67a, 0x5, 0x108, 0x85, 0x2, 0x66e, 0x67a, 
       0x5, 0x118, 0x8d, 0x2, 0x66f, 0x67a, 0x5, 0x11e, 0x90, 0x2, 0x670, 
       0x67a, 0x5, 0x128, 0x95, 0x2, 0x671, 0x67a, 0x5, 0x12a, 0x96, 0x2, 
       0x672, 0x67a, 0x5, 0x13a, 0x9e, 0x2, 0x673, 0x67a, 0x5, 0x14e, 0xa8, 
       0x2, 0x674, 0x67a, 0x5, 0x150, 0xa9, 0x2, 0x675, 0x67a, 0x5, 0x152, 
       0xaa, 0x2, 0x676, 0x67a, 0x5, 0x156, 0xac, 0x2, 0x677, 0x67a, 0x5, 
       0x154, 0xab, 0x2, 0x678, 0x67a, 0x5, 0x158, 0xad, 0x2, 0x679, 0x66d, 
       0x3, 0x2, 0x2, 0x2, 0x679, 0x66e, 0x3, 0x2, 0x2, 0x2, 0x679, 0x66f, 
       0x3, 0x2, 0x2, 0x2, 0x679, 0x670, 0x3, 0x2, 0x2, 0x2, 0x679, 0x671, 
       0x3, 0x2, 0x2, 0x2, 0x679, 0x672, 0x3, 0x2, 0x2, 0x2, 0x679, 0x673, 
       0x3, 0x2, 0x2, 0x2, 0x679, 0x674, 0x3, 0x2, 0x2, 0x2, 0x679, 0x675, 
       0x3, 0x2, 0x2, 0x2, 0x679, 0x676, 0x3, 0x2, 0x2, 0x2, 0x679, 0x677, 
       0x3, 0x2, 0x2, 0x2, 0x679, 0x678, 0x3, 0x2, 0x2, 0x2, 0x67a, 0x117, 
       0x3, 0x2, 0x2, 0x2, 0x67b, 0x67c, 0x7, 0x4c, 0x2, 0x2, 0x67c, 0x119, 
       0x3, 0x2, 0x2, 0x2, 0x67d, 0x67e, 0x5, 0x1ea, 0xf6, 0x2, 0x67e, 0x67f, 
       0x7, 0x58, 0x2, 0x2, 0x67f, 0x680, 0x5, 0x112, 0x8a, 0x2, 0x680, 
       0x11b, 0x3, 0x2, 0x2, 0x2, 0x681, 0x682, 0x5, 0x1ea, 0xf6, 0x2, 0x682, 
       0x683, 0x7, 0x58, 0x2, 0x2, 0x683, 0x684, 0x5, 0x114, 0x8b, 0x2, 
       0x684, 0x11d, 0x3, 0x2, 0x2, 0x2, 0x685, 0x686, 0x5, 0x120, 0x91, 
       0x2, 0x686, 0x687, 0x7, 0x4c, 0x2, 0x2, 0x687, 0x11f, 0x3, 0x2, 0x2, 
       0x2, 0x688, 0x690, 0x5, 0x1ba, 0xde, 0x2, 0x689, 0x690, 0x5, 0x1d8, 
       0xed, 0x2, 0x68a, 0x690, 0x5, 0x1da, 0xee, 0x2, 0x68b, 0x690, 0x5, 
       0x1e0, 0xf1, 0x2, 0x68c, 0x690, 0x5, 0x1e4, 0xf3, 0x2, 0x68d, 0x690, 
       0x5, 0x198, 0xcd, 0x2, 0x68e, 0x690, 0x5, 0x184, 0xc3, 0x2, 0x68f, 
       0x688, 0x3, 0x2, 0x2, 0x2, 0x68f, 0x689, 0x3, 0x2, 0x2, 0x2, 0x68f, 
       0x68a, 0x3, 0x2, 0x2, 0x2, 0x68f, 0x68b, 0x3, 0x2, 0x2, 0x2, 0x68f, 
       0x68c, 0x3, 0x2, 0x2, 0x2, 0x68f, 0x68d, 0x3, 0x2, 0x2, 0x2, 0x68f, 
       0x68e, 0x3, 0x2, 0x2, 0x2, 0x690, 0x121, 0x3, 0x2, 0x2, 0x2, 0x691, 
       0x692, 0x7, 0x22, 0x2, 0x2, 0x692, 0x693, 0x7, 0x46, 0x2, 0x2, 0x693, 
       0x694, 0x5, 0x1ae, 0xd8, 0x2, 0x694, 0x695, 0x7, 0x47, 0x2, 0x2, 
       0x695, 0x696, 0x5, 0x112, 0x8a, 0x2, 0x696, 0x123, 0x3, 0x2, 0x2, 
       0x2, 0x697, 0x698, 0x7, 0x22, 0x2, 0x2, 0x698, 0x699, 0x7, 0x46, 
       0x2, 0x2, 0x699, 0x69a, 0x5, 0x1ae, 0xd8, 0x2, 0x69a, 0x69b, 0x7, 
       0x47, 0x2, 0x2, 0x69b, 0x69c, 0x5, 0x114, 0x8b, 0x2, 0x69c, 0x69d, 
       0x7, 0x1b, 0x2, 0x2, 0x69d, 0x69e, 0x5, 0x112, 0x8a, 0x2, 0x69e, 
       0x125, 0x3, 0x2, 0x2, 0x2, 0x69f, 0x6a0, 0x7, 0x22, 0x2, 0x2, 0x6a0, 
       0x6a1, 0x7, 0x46, 0x2, 0x2, 0x6a1, 0x6a2, 0x5, 0x1ae, 0xd8, 0x2, 
       0x6a2, 0x6a3, 0x7, 0x47, 0x2, 0x2, 0x6a3, 0x6a4, 0x5, 0x114, 0x8b, 
       0x2, 0x6a4, 0x6a5, 0x7, 0x1b, 0x2, 0x2, 0x6a5, 0x6a6, 0x5, 0x114, 
       0x8b, 0x2, 0x6a6, 0x127, 0x3, 0x2, 0x2, 0x2, 0x6a7, 0x6a8, 0x7, 0xe, 
       0x2, 0x2, 0x6a8, 0x6a9, 0x5, 0x1ae, 0xd8, 0x2, 0x6a9, 0x6aa, 0x7, 
       0x4c, 0x2, 0x2, 0x6aa, 0x6b2, 0x3, 0x2, 0x2, 0x2, 0x6ab, 0x6ac, 0x7, 
       0xe, 0x2, 0x2, 0x6ac, 0x6ad, 0x5, 0x1ae, 0xd8, 0x2, 0x6ad, 0x6ae, 
       0x7, 0x58, 0x2, 0x2, 0x6ae, 0x6af, 0x5, 0x1ae, 0xd8, 0x2, 0x6af, 
       0x6b0, 0x7, 0x4c, 0x2, 0x2, 0x6b0, 0x6b2, 0x3, 0x2, 0x2, 0x2, 0x6b1, 
       0x6a7, 0x3, 0x2, 0x2, 0x2, 0x6b1, 0x6ab, 0x3, 0x2, 0x2, 0x2, 0x6b2, 
       0x129, 0x3, 0x2, 0x2, 0x2, 0x6b3, 0x6b4, 0x7, 0x35, 0x2, 0x2, 0x6b4, 
       0x6b5, 0x7, 0x46, 0x2, 0x2, 0x6b5, 0x6b6, 0x5, 0x1ae, 0xd8, 0x2, 
       0x6b6, 0x6b7, 0x7, 0x47, 0x2, 0x2, 0x6b7, 0x6b8, 0x5, 0x12c, 0x97, 
       0x2, 0x6b8, 0x12b, 0x3, 0x2, 0x2, 0x2, 0x6b9, 0x6bd, 0x7, 0x48, 0x2, 
       0x2, 0x6ba, 0x6bc, 0x5, 0x12e, 0x98, 0x2, 0x6bb, 0x6ba, 0x3, 0x2, 
       0x2, 0x2, 0x6bc, 0x6bf, 0x3, 0x2, 0x2, 0x2, 0x6bd, 0x6bb, 0x3, 0x2, 
       0x2, 0x2, 0x6bd, 0x6be, 0x3, 0x2, 0x2, 0x2, 0x6be, 0x6c3, 0x3, 0x2, 
       0x2, 0x2, 0x6bf, 0x6bd, 0x3, 0x2, 0x2, 0x2, 0x6c0, 0x6c2, 0x5, 0x132, 
       0x9a, 0x2, 0x6c1, 0x6c0, 0x3, 0x2, 0x2, 0x2, 0x6c2, 0x6c5, 0x3, 0x2, 
       0x2, 0x2, 0x6c3, 0x6c1, 0x3, 0x2, 0x2, 0x2, 0x6c3, 0x6c4, 0x3, 0x2, 
       0x2, 0x2, 0x6c4, 0x6c6, 0x3, 0x2, 0x2, 0x2, 0x6c5, 0x6c3, 0x3, 0x2, 
       0x2, 0x2, 0x6c6, 0x6c7, 0x7, 0x49, 0x2, 0x2, 0x6c7, 0x12d, 0x3, 0x2, 
       0x2, 0x2, 0x6c8, 0x6c9, 0x5, 0x130, 0x99, 0x2, 0x6c9, 0x6ca, 0x5, 
       0x10a, 0x86, 0x2, 0x6ca, 0x12f, 0x3, 0x2, 0x2, 0x2, 0x6cb, 0x6cd, 
       0x5, 0x132, 0x9a, 0x2, 0x6cc, 0x6cb, 0x3, 0x2, 0x2, 0x2, 0x6cd, 0x6ce, 
       0x3, 0x2, 0x2, 0x2, 0x6ce, 0x6cc, 0x3, 0x2, 0x2, 0x2, 0x6ce, 0x6cf, 
       0x3, 0x2, 0x2, 0x2, 0x6cf, 0x131, 0x3, 0x2, 0x2, 0x2, 0x6d0, 0x6d1, 
       0x7, 0x12, 0x2, 0x2, 0x6d1, 0x6d2, 0x5, 0x1ac, 0xd7, 0x2, 0x6d2, 
       0x6d3, 0x7, 0x58, 0x2, 0x2, 0x6d3, 0x6db, 0x3, 0x2, 0x2, 0x2, 0x6d4, 
       0x6d5, 0x7, 0x12, 0x2, 0x2, 0x6d5, 0x6d6, 0x5, 0x134, 0x9b, 0x2, 
       0x6d6, 0x6d7, 0x7, 0x58, 0x2, 0x2, 0x6d7, 0x6db, 0x3, 0x2, 0x2, 0x2, 
       0x6d8, 0x6d9, 0x7, 0x18, 0x2, 0x2, 0x6d9, 0x6db, 0x7, 0x58, 0x2, 
       0x2, 0x6da, 0x6d0, 0x3, 0x2, 0x2, 0x2, 0x6da, 0x6d4, 0x3, 0x2, 0x2, 
       0x2, 0x6da, 0x6d8, 0x3, 0x2, 0x2, 0x2, 0x6db, 0x133, 0x3, 0x2, 0x2, 
       0x2, 0x6dc, 0x6dd, 0x5, 0x1ea, 0xf6, 0x2, 0x6dd, 0x135, 0x3, 0x2, 
       0x2, 0x2, 0x6de, 0x6df, 0x7, 0x3e, 0x2, 0x2, 0x6df, 0x6e0, 0x7, 0x46, 
       0x2, 0x2, 0x6e0, 0x6e1, 0x5, 0x1ae, 0xd8, 0x2, 0x6e1, 0x6e2, 0x7, 
       0x47, 0x2, 0x2, 0x6e2, 0x6e3, 0x5, 0x112, 0x8a, 0x2, 0x6e3, 0x137, 
       0x3, 0x2, 0x2, 0x2, 0x6e4, 0x6e5, 0x7, 0x3e, 0x2, 0x2, 0x6e5, 0x6e6, 
       0x7, 0x46, 0x2, 0x2, 0x6e6, 0x6e7, 0x5, 0x1ae, 0xd8, 0x2, 0x6e7, 
       0x6e8, 0x7, 0x47, 0x2, 0x2, 0x6e8, 0x6e9, 0x5, 0x114, 0x8b, 0x2, 
       0x6e9, 0x139, 0x3, 0x2, 0x2, 0x2, 0x6ea, 0x6eb, 0x7, 0x19, 0x2, 0x2, 
       0x6eb, 0x6ec, 0x5, 0x112, 0x8a, 0x2, 0x6ec, 0x6ed, 0x7, 0x3e, 0x2, 
       0x2, 0x6ed, 0x6ee, 0x7, 0x46, 0x2, 0x2, 0x6ee, 0x6ef, 0x5, 0x1ae, 
       0xd8, 0x2, 0x6ef, 0x6f0, 0x7, 0x47, 0x2, 0x2, 0x6f0, 0x6f1, 0x7, 
       0x4c, 0x2, 0x2, 0x6f1, 0x13b, 0x3, 0x2, 0x2, 0x2, 0x6f2, 0x6f5, 0x5, 
       0x140, 0xa1, 0x2, 0x6f3, 0x6f5, 0x5, 0x14a, 0xa6, 0x2, 0x6f4, 0x6f2, 
       0x3, 0x2, 0x2, 0x2, 0x6f4, 0x6f3, 0x3, 0x2, 0x2, 0x2, 0x6f5, 0x13d, 
       0x3, 0x2, 0x2, 0x2, 0x6f6, 0x6f9, 0x5, 0x142, 0xa2, 0x2, 0x6f7, 0x6f9, 
       0x5, 0x14c, 0xa7, 0x2, 0x6f8, 0x6f6, 0x3, 0x2, 0x2, 0x2, 0x6f8, 0x6f7, 
       0x3, 0x2, 0x2, 0x2, 0x6f9, 0x13f, 0x3, 0x2, 0x2, 0x2, 0x6fa, 0x6fb, 
       0x7, 0x21, 0x2, 0x2, 0x6fb, 0x6fd, 0x7, 0x46, 0x2, 0x2, 0x6fc, 0x6fe, 
       0x5, 0x144, 0xa3, 0x2, 0x6fd, 0x6fc, 0x3, 0x2, 0x2, 0x2, 0x6fd, 0x6fe, 
       0x3, 0x2, 0x2, 0x2, 0x6fe, 0x6ff, 0x3, 0x2, 0x2, 0x2, 0x6ff, 0x701, 
       0x7, 0x4c, 0x2, 0x2, 0x700, 0x702, 0x5, 0x1ae, 0xd8, 0x2, 0x701, 
       0x700, 0x3, 0x2, 0x2, 0x2, 0x701, 0x702, 0x3, 0x2, 0x2, 0x2, 0x702, 
       0x703, 0x3, 0x2, 0x2, 0x2, 0x703, 0x705, 0x7, 0x4c, 0x2, 0x2, 0x704, 
       0x706, 0x5, 0x146, 0xa4, 0x2, 0x705, 0x704, 0x3, 0x2, 0x2, 0x2, 0x705, 
       0x706, 0x3, 0x2, 0x2, 0x2, 0x706, 0x707, 0x3, 0x2, 0x2, 0x2, 0x707, 
       0x708, 0x7, 0x47, 0x2, 0x2, 0x708, 0x709, 0x5, 0x112, 0x8a, 0x2, 
       0x709, 0x141, 0x3, 0x2, 0x2, 0x2, 0x70a, 0x70b, 0x7, 0x21, 0x2, 0x2, 
       0x70b, 0x70d, 0x7, 0x46, 0x2, 0x2, 0x70c, 0x70e, 0x5, 0x144, 0xa3, 
       0x2, 0x70d, 0x70c, 0x3, 0x2, 0x2, 0x2, 0x70d, 0x70e, 0x3, 0x2, 0x2, 
       0x2, 0x70e, 0x70f, 0x3, 0x2, 0x2, 0x2, 0x70f, 0x711, 0x7, 0x4c, 0x2, 
       0x2, 0x710, 0x712, 0x5, 0x1ae, 0xd8, 0x2, 0x711, 0x710, 0x3, 0x2, 
       0x2, 0x2, 0x711, 0x712, 0x3, 0x2, 0x2, 0x2, 0x712, 0x713, 0x3, 0x2, 
       0x2, 0x2, 0x713, 0x715, 0x7, 0x4c, 0x2, 0x2, 0x714, 0x716, 0x5, 0x146, 
       0xa4, 0x2, 0x715, 0x714, 0x3, 0x2, 0x2, 0x2, 0x715, 0x716, 0x3, 0x2, 
       0x2, 0x2, 0x716, 0x717, 0x3, 0x2, 0x2, 0x2, 0x717, 0x718, 0x7, 0x47, 
       0x2, 0x2, 0x718, 0x719, 0x5, 0x114, 0x8b, 0x2, 0x719, 0x143, 0x3, 
       0x2, 0x2, 0x2, 0x71a, 0x71d, 0x5, 0x148, 0xa5, 0x2, 0x71b, 0x71d, 
       0x5, 0x110, 0x89, 0x2, 0x71c, 0x71a, 0x3, 0x2, 0x2, 0x2, 0x71c, 0x71b, 
       0x3, 0x2, 0x2, 0x2, 0x71d, 0x145, 0x3, 0x2, 0x2, 0x2, 0x71e, 0x71f, 
       0x5, 0x148, 0xa5, 0x2, 0x71f, 0x147, 0x3, 0x2, 0x2, 0x2, 0x720, 0x725, 
       0x5, 0x120, 0x91, 0x2, 0x721, 0x722, 0x7, 0x4d, 0x2, 0x2, 0x722, 
       0x724, 0x5, 0x120, 0x91, 0x2, 0x723, 0x721, 0x3, 0x2, 0x2, 0x2, 0x724, 
       0x727, 0x3, 0x2, 0x2, 0x2, 0x725, 0x723, 0x3, 0x2, 0x2, 0x2, 0x725, 
       0x726, 0x3, 0x2, 0x2, 0x2, 0x726, 0x149, 0x3, 0x2, 0x2, 0x2, 0x727, 
       0x725, 0x3, 0x2, 0x2, 0x2, 0x728, 0x729, 0x7, 0x21, 0x2, 0x2, 0x729, 
       0x72d, 0x7, 0x46, 0x2, 0x2, 0x72a, 0x72c, 0x5, 0xa8, 0x55, 0x2, 0x72b, 
       0x72a, 0x3, 0x2, 0x2, 0x2, 0x72c, 0x72f, 0x3, 0x2, 0x2, 0x2, 0x72d, 
       0x72b, 0x3, 0x2, 0x2, 0x2, 0x72d, 0x72e, 0x3, 0x2, 0x2, 0x2, 0x72e, 
       0x730, 0x3, 0x2, 0x2, 0x2, 0x72f, 0x72d, 0x3, 0x2, 0x2, 0x2, 0x730, 
       0x731, 0x5, 0x80, 0x41, 0x2, 0x731, 0x732, 0x5, 0x7c, 0x3f, 0x2, 
       0x732, 0x733, 0x7, 0x58, 0x2, 0x2, 0x733, 0x734, 0x5, 0x1ae, 0xd8, 
       0x2, 0x734, 0x735, 0x7, 0x47, 0x2, 0x2, 0x735, 0x736, 0x5, 0x112, 
       0x8a, 0x2, 0x736, 0x14b, 0x3, 0x2, 0x2, 0x2, 0x737, 0x738, 0x7, 0x21, 
       0x2, 0x2, 0x738, 0x73c, 0x7, 0x46, 0x2, 0x2, 0x739, 0x73b, 0x5, 0xa8, 
       0x55, 0x2, 0x73a, 0x739, 0x3, 0x2, 0x2, 0x2, 0x73b, 0x73e, 0x3, 0x2, 
       0x2, 0x2, 0x73c, 0x73a, 0x3, 0x2, 0x2, 0x2, 0x73c, 0x73d, 0x3, 0x2, 
       0x2, 0x2, 0x73d, 0x73f, 0x3, 0x2, 0x2, 0x2, 0x73e, 0x73c, 0x3, 0x2, 
       0x2, 0x2, 0x73f, 0x740, 0x5, 0x80, 0x41, 0x2, 0x740, 0x741, 0x5, 
       0x7c, 0x3f, 0x2, 0x741, 0x742, 0x7, 0x58, 0x2, 0x2, 0x742, 0x743, 
       0x5, 0x1ae, 0xd8, 0x2, 0x743, 0x744, 0x7, 0x47, 0x2, 0x2, 0x744, 
       0x745, 0x5, 0x114, 0x8b, 0x2, 0x745, 0x14d, 0x3, 0x2, 0x2, 0x2, 0x746, 
       0x748, 0x7, 0x10, 0x2, 0x2, 0x747, 0x749, 0x5, 0x1ea, 0xf6, 0x2, 
       0x748, 0x747, 0x3, 0x2, 0x2, 0x2, 0x748, 0x749, 0x3, 0x2, 0x2, 0x2, 
       0x749, 0x74a, 0x3, 0x2, 0x2, 0x2, 0x74a, 0x74b, 0x7, 0x4c, 0x2, 0x2, 
       0x74b, 0x14f, 0x3, 0x2, 0x2, 0x2, 0x74c, 0x74e, 0x7, 0x17, 0x2, 0x2, 
       0x74d, 0x74f, 0x5, 0x1ea, 0xf6, 0x2, 0x74e, 0x74d, 0x3, 0x2, 0x2, 
       0x2, 0x74e, 0x74f, 0x3, 0x2, 0x2, 0x2, 0x74f, 0x750, 0x3, 0x2, 0x2, 
       0x2, 0x750, 0x751, 0x7, 0x4c, 0x2, 0x2, 0x751, 0x151, 0x3, 0x2, 0x2, 
       0x2, 0x752, 0x754, 0x7, 0x30, 0x2, 0x2, 0x753, 0x755, 0x5, 0x1ae, 
       0xd8, 0x2, 0x754, 0x753, 0x3, 0x2, 0x2, 0x2, 0x754, 0x755, 0x3, 0x2, 
       0x2, 0x2, 0x755, 0x756, 0x3, 0x2, 0x2, 0x2, 0x756, 0x757, 0x7, 0x4c, 
       0x2, 0x2, 0x757, 0x153, 0x3, 0x2, 0x2, 0x2, 0x758, 0x759, 0x7, 0x38, 
       0x2, 0x2, 0x759, 0x75a, 0x5, 0x1ae, 0xd8, 0x2, 0x75a, 0x75b, 0x7, 
       0x4c, 0x2, 0x2, 0x75b, 0x155, 0x3, 0x2, 0x2, 0x2, 0x75c, 0x75d, 0x7, 
       0x36, 0x2, 0x2, 0x75d, 0x75e, 0x7, 0x46, 0x2, 0x2, 0x75e, 0x75f, 
       0x5, 0x1ae, 0xd8, 0x2, 0x75f, 0x760, 0x7, 0x47, 0x2, 0x2, 0x760, 
       0x761, 0x5, 0x108, 0x85, 0x2, 0x761, 0x157, 0x3, 0x2, 0x2, 0x2, 0x762, 
       0x763, 0x7, 0x3b, 0x2, 0x2, 0x763, 0x764, 0x5, 0x108, 0x85, 0x2, 
       0x764, 0x765, 0x5, 0x15a, 0xae, 0x2, 0x765, 0x76f, 0x3, 0x2, 0x2, 
       0x2, 0x766, 0x767, 0x7, 0x3b, 0x2, 0x2, 0x767, 0x769, 0x5, 0x108, 
       0x85, 0x2, 0x768, 0x76a, 0x5, 0x15a, 0xae, 0x2, 0x769, 0x768, 0x3, 
       0x2, 0x2, 0x2, 0x769, 0x76a, 0x3, 0x2, 0x2, 0x2, 0x76a, 0x76b, 0x3, 
       0x2, 0x2, 0x2, 0x76b, 0x76c, 0x5, 0x162, 0xb2, 0x2, 0x76c, 0x76f, 
       0x3, 0x2, 0x2, 0x2, 0x76d, 0x76f, 0x5, 0x164, 0xb3, 0x2, 0x76e, 0x762, 
       0x3, 0x2, 0x2, 0x2, 0x76e, 0x766, 0x3, 0x2, 0x2, 0x2, 0x76e, 0x76d, 
       0x3, 0x2, 0x2, 0x2, 0x76f, 0x159, 0x3, 0x2, 0x2, 0x2, 0x770, 0x772, 
       0x5, 0x15c, 0xaf, 0x2, 0x771, 0x770, 0x3, 0x2, 0x2, 0x2, 0x772, 0x773, 
       0x3, 0x2, 0x2, 0x2, 0x773, 0x771, 0x3, 0x2, 0x2, 0x2, 0x773, 0x774, 
       0x3, 0x2, 0x2, 0x2, 0x774, 0x15b, 0x3, 0x2, 0x2, 0x2, 0x775, 0x776, 
       0x7, 0x13, 0x2, 0x2, 0x776, 0x777, 0x7, 0x46, 0x2, 0x2, 0x777, 0x778, 
       0x5, 0x15e, 0xb0, 0x2, 0x778, 0x779, 0x7, 0x47, 0x2, 0x2, 0x779, 
       0x77a, 0x5, 0x108, 0x85, 0x2, 0x77a, 0x15d, 0x3, 0x2, 0x2, 0x2, 0x77b, 
       0x77d, 0x5, 0xa8, 0x55, 0x2, 0x77c, 0x77b, 0x3, 0x2, 0x2, 0x2, 0x77d, 
       0x780, 0x3, 0x2, 0x2, 0x2, 0x77e, 0x77c, 0x3, 0x2, 0x2, 0x2, 0x77e, 
       0x77f, 0x3, 0x2, 0x2, 0x2, 0x77f, 0x781, 0x3, 0x2, 0x2, 0x2, 0x780, 
       0x77e, 0x3, 0x2, 0x2, 0x2, 0x781, 0x782, 0x5, 0x160, 0xb1, 0x2, 0x782, 
       0x783, 0x5, 0x7c, 0x3f, 0x2, 0x783, 0x15f, 0x3, 0x2, 0x2, 0x2, 0x784, 
       0x789, 0x5, 0x88, 0x45, 0x2, 0x785, 0x786, 0x7, 0x67, 0x2, 0x2, 0x786, 
       0x788, 0x5, 0x10, 0x9, 0x2, 0x787, 0x785, 0x3, 0x2, 0x2, 0x2, 0x788, 
       0x78b, 0x3, 0x2, 0x2, 0x2, 0x789, 0x787, 0x3, 0x2, 0x2, 0x2, 0x789, 
       0x78a, 0x3, 0x2, 0x2, 0x2, 0x78a, 0x161, 0x3, 0x2, 0x2, 0x2, 0x78b, 
       0x789, 0x3, 0x2, 0x2, 0x2, 0x78c, 0x78d, 0x7, 0x1f, 0x2, 0x2, 0x78d, 
       0x78e, 0x5, 0x108, 0x85, 0x2, 0x78e, 0x163, 0x3, 0x2, 0x2, 0x2, 0x78f, 
       0x790, 0x7, 0x3b, 0x2, 0x2, 0x790, 0x791, 0x5, 0x166, 0xb4, 0x2, 
       0x791, 0x793, 0x5, 0x108, 0x85, 0x2, 0x792, 0x794, 0x5, 0x15a, 0xae, 
       0x2, 0x793, 0x792, 0x3, 0x2, 0x2, 0x2, 0x793, 0x794, 0x3, 0x2, 0x2, 
       0x2, 0x794, 0x796, 0x3, 0x2, 0x2, 0x2, 0x795, 0x797, 0x5, 0x162, 
       0xb2, 0x2, 0x796, 0x795, 0x3, 0x2, 0x2, 0x2, 0x796, 0x797, 0x3, 0x2, 
       0x2, 0x2, 0x797, 0x165, 0x3, 0x2, 0x2, 0x2, 0x798, 0x799, 0x7, 0x46, 
       0x2, 0x2, 0x799, 0x79b, 0x5, 0x168, 0xb5, 0x2, 0x79a, 0x79c, 0x7, 
       0x4c, 0x2, 0x2, 0x79b, 0x79a, 0x3, 0x2, 0x2, 0x2, 0x79b, 0x79c, 0x3, 
       0x2, 0x2, 0x2, 0x79c, 0x79d, 0x3, 0x2, 0x2, 0x2, 0x79d, 0x79e, 0x7, 
       0x47, 0x2, 0x2, 0x79e, 0x167, 0x3, 0x2, 0x2, 0x2, 0x79f, 0x7a4, 0x5, 
       0x16a, 0xb6, 0x2, 0x7a0, 0x7a1, 0x7, 0x4c, 0x2, 0x2, 0x7a1, 0x7a3, 
       0x5, 0x16a, 0xb6, 0x2, 0x7a2, 0x7a0, 0x3, 0x2, 0x2, 0x2, 0x7a3, 0x7a6, 
       0x3, 0x2, 0x2, 0x2, 0x7a4, 0x7a2, 0x3, 0x2, 0x2, 0x2, 0x7a4, 0x7a5, 
       0x3, 0x2, 0x2, 0x2, 0x7a5, 0x169, 0x3, 0x2, 0x2, 0x2, 0x7a6, 0x7a4, 
       0x3, 0x2, 0x2, 0x2, 0x7a7, 0x7a9, 0x5, 0xa8, 0x55, 0x2, 0x7a8, 0x7a7, 
       0x3, 0x2, 0x2, 0x2, 0x7a9, 0x7ac, 0x3, 0x2, 0x2, 0x2, 0x7aa, 0x7a8, 
       0x3, 0x2, 0x2, 0x2, 0x7aa, 0x7ab, 0x3, 0x2, 0x2, 0x2, 0x7ab, 0x7ad, 
       0x3, 0x2, 0x2, 0x2, 0x7ac, 0x7aa, 0x3, 0x2, 0x2, 0x2, 0x7ad, 0x7ae, 
       0x5, 0x80, 0x41, 0x2, 0x7ae, 0x7af, 0x5, 0x7c, 0x3f, 0x2, 0x7af, 
       0x7b0, 0x7, 0x52, 0x2, 0x2, 0x7b0, 0x7b1, 0x5, 0x1ae, 0xd8, 0x2, 
       0x7b1, 0x7b4, 0x3, 0x2, 0x2, 0x2, 0x7b2, 0x7b4, 0x5, 0x16c, 0xb7, 
       0x2, 0x7b3, 0x7aa, 0x3, 0x2, 0x2, 0x2, 0x7b3, 0x7b2, 0x3, 0x2, 0x2, 
       0x2, 0x7b4, 0x16b, 0x3, 0x2, 0x2, 0x2, 0x7b5, 0x7b8, 0x5, 0x3c, 0x1f, 
       0x2, 0x7b6, 0x7b8, 0x5, 0x18c, 0xc7, 0x2, 0x7b7, 0x7b5, 0x3, 0x2, 
       0x2, 0x2, 0x7b7, 0x7b6, 0x3, 0x2, 0x2, 0x2, 0x7b8, 0x16d, 0x3, 0x2, 
       0x2, 0x2, 0x7b9, 0x7bc, 0x5, 0x17c, 0xbf, 0x2, 0x7ba, 0x7bc, 0x5, 
       0x1a6, 0xd4, 0x2, 0x7bb, 0x7b9, 0x3, 0x2, 0x2, 0x2, 0x7bb, 0x7ba, 
       0x3, 0x2, 0x2, 0x2, 0x7bc, 0x7c0, 0x3, 0x2, 0x2, 0x2, 0x7bd, 0x7bf, 
       0x5, 0x176, 0xbc, 0x2, 0x7be, 0x7bd, 0x3, 0x2, 0x2, 0x2, 0x7bf, 0x7c2, 
       0x3, 0x2, 0x2, 0x2, 0x7c0, 0x7be, 0x3, 0x2, 0x2, 0x2, 0x7c0, 0x7c1, 
       0x3, 0x2, 0x2, 0x2, 0x7c1, 0x16f, 0x3, 0x2, 0x2, 0x2, 0x7c2, 0x7c0, 
       0x3, 0x2, 0x2, 0x2, 0x7c3, 0x7d4, 0x5, 0x2, 0x2, 0x2, 0x7c4, 0x7d4, 
       0x5, 0x182, 0xc2, 0x2, 0x7c5, 0x7d4, 0x7, 0x37, 0x2, 0x2, 0x7c6, 
       0x7c7, 0x5, 0x38, 0x1d, 0x2, 0x7c7, 0x7c8, 0x7, 0x4e, 0x2, 0x2, 0x7c8, 
       0x7c9, 0x7, 0x37, 0x2, 0x2, 0x7c9, 0x7d4, 0x3, 0x2, 0x2, 0x2, 0x7ca, 
       0x7cb, 0x7, 0x46, 0x2, 0x2, 0x7cb, 0x7cc, 0x5, 0x1ae, 0xd8, 0x2, 
       0x7cc, 0x7cd, 0x7, 0x47, 0x2, 0x2, 0x7cd, 0x7d4, 0x3, 0x2, 0x2, 0x2, 
       0x7ce, 0x7d4, 0x5, 0x184, 0xc3, 0x2, 0x7cf, 0x7d4, 0x5, 0x18c, 0xc7, 
       0x2, 0x7d0, 0x7d4, 0x5, 0x192, 0xca, 0x2, 0x7d1, 0x7d4, 0x5, 0x198, 
       0xcd, 0x2, 0x7d2, 0x7d4, 0x5, 0x1a0, 0xd1, 0x2, 0x7d3, 0x7c3, 0x3, 
       0x2, 0x2, 0x2, 0x7d3, 0x7c4, 0x3, 0x2, 0x2, 0x2, 0x7d3, 0x7c5, 0x3, 
       0x2, 0x2, 0x2, 0x7d3, 0x7c6, 0x3, 0x2, 0x2, 0x2, 0x7d3, 0x7ca, 0x3, 
       0x2, 0x2, 0x2, 0x7d3, 0x7ce, 0x3, 0x2, 0x2, 0x2, 0x7d3, 0x7cf, 0x3, 
       0x2, 0x2, 0x2, 0x7d3, 0x7d0, 0x3, 0x2, 0x2, 0x2, 0x7d3, 0x7d1, 0x3, 
       0x2, 0x2, 0x2, 0x7d3, 0x7d2, 0x3, 0x2, 0x2, 0x2, 0x7d4, 0x171, 0x3, 
       0x2, 0x2, 0x2, 0x7d5, 0x7d6, 0x3, 0x2, 0x2, 0x2, 0x7d6, 0x173, 0x3, 
       0x2, 0x2, 0x2, 0x7d7, 0x7f4, 0x5, 0x2, 0x2, 0x2, 0x7d8, 0x7dd, 0x5, 
       0x38, 0x1d, 0x2, 0x7d9, 0x7da, 0x7, 0x4a, 0x2, 0x2, 0x7da, 0x7dc, 
       0x7, 0x4b, 0x2, 0x2, 0x7db, 0x7d9, 0x3, 0x2, 0x2, 0x2, 0x7dc, 0x7df, 
       0x3, 0x2, 0x2, 0x2, 0x7dd, 0x7db, 0x3, 0x2, 0x2, 0x2, 0x7dd, 0x7de, 
       0x3, 0x2, 0x2, 0x2, 0x7de, 0x7e0, 0x3, 0x2, 0x2, 0x2, 0x7df, 0x7dd, 
       0x3, 0x2, 0x2, 0x2, 0x7e0, 0x7e1, 0x7, 0x4e, 0x2, 0x2, 0x7e1, 0x7e2, 
       0x7, 0x15, 0x2, 0x2, 0x7e2, 0x7f4, 0x3, 0x2, 0x2, 0x2, 0x7e3, 0x7e4, 
       0x7, 0x3c, 0x2, 0x2, 0x7e4, 0x7e5, 0x7, 0x4e, 0x2, 0x2, 0x7e5, 0x7f4, 
       0x7, 0x15, 0x2, 0x2, 0x7e6, 0x7f4, 0x7, 0x37, 0x2, 0x2, 0x7e7, 0x7e8, 
       0x5, 0x38, 0x1d, 0x2, 0x7e8, 0x7e9, 0x7, 0x4e, 0x2, 0x2, 0x7e9, 0x7ea, 
       0x7, 0x37, 0x2, 0x2, 0x7ea, 0x7f4, 0x3, 0x2, 0x2, 0x2, 0x7eb, 0x7ec, 
       0x7, 0x46, 0x2, 0x2, 0x7ec, 0x7ed, 0x5, 0x1ae, 0xd8, 0x2, 0x7ed, 
       0x7ee, 0x7, 0x47, 0x2, 0x2, 0x7ee, 0x7f4, 0x3, 0x2, 0x2, 0x2, 0x7ef, 
       0x7f4, 0x5, 0x184, 0xc3, 0x2, 0x7f0, 0x7f4, 0x5, 0x18c, 0xc7, 0x2, 
       0x7f1, 0x7f4, 0x5, 0x198, 0xcd, 0x2, 0x7f2, 0x7f4, 0x5, 0x1a0, 0xd1, 
       0x2, 0x7f3, 0x7d7, 0x3, 0x2, 0x2, 0x2, 0x7f3, 0x7d8, 0x3, 0x2, 0x2, 
       0x2, 0x7f3, 0x7e3, 0x3, 0x2, 0x2, 0x2, 0x7f3, 0x7e6, 0x3, 0x2, 0x2, 
       0x2, 0x7f3, 0x7e7, 0x3, 0x2, 0x2, 0x2, 0x7f3, 0x7eb, 0x3, 0x2, 0x2, 
       0x2, 0x7f3, 0x7ef, 0x3, 0x2, 0x2, 0x2, 0x7f3, 0x7f0, 0x3, 0x2, 0x2, 
       0x2, 0x7f3, 0x7f1, 0x3, 0x2, 0x2, 0x2, 0x7f3, 0x7f2, 0x3, 0x2, 0x2, 
       0x2, 0x7f4, 0x175, 0x3, 0x2, 0x2, 0x2, 0x7f5, 0x7fb, 0x5, 0x186, 
       0xc4, 0x2, 0x7f6, 0x7fb, 0x5, 0x18e, 0xc8, 0x2, 0x7f7, 0x7fb, 0x5, 
       0x194, 0xcb, 0x2, 0x7f8, 0x7fb, 0x5, 0x19a, 0xce, 0x2, 0x7f9, 0x7fb, 
       0x5, 0x1a2, 0xd2, 0x2, 0x7fa, 0x7f5, 0x3, 0x2, 0x2, 0x2, 0x7fa, 0x7f6, 
       0x3, 0x2, 0x2, 0x2, 0x7fa, 0x7f7, 0x3, 0x2, 0x2, 0x2, 0x7fa, 0x7f8, 
       0x3, 0x2, 0x2, 0x2, 0x7fa, 0x7f9, 0x3, 0x2, 0x2, 0x2, 0x7fb, 0x177, 
       0x3, 0x2, 0x2, 0x2, 0x7fc, 0x7fd, 0x3, 0x2, 0x2, 0x2, 0x7fd, 0x179, 
       0x3, 0x2, 0x2, 0x2, 0x7fe, 0x803, 0x5, 0x186, 0xc4, 0x2, 0x7ff, 0x803, 
       0x5, 0x18e, 0xc8, 0x2, 0x800, 0x803, 0x5, 0x19a, 0xce, 0x2, 0x801, 
       0x803, 0x5, 0x1a2, 0xd2, 0x2, 0x802, 0x7fe, 0x3, 0x2, 0x2, 0x2, 0x802, 
       0x7ff, 0x3, 0x2, 0x2, 0x2, 0x802, 0x800, 0x3, 0x2, 0x2, 0x2, 0x802, 
       0x801, 0x3, 0x2, 0x2, 0x2, 0x803, 0x17b, 0x3, 0x2, 0x2, 0x2, 0x804, 
       0x82d, 0x5, 0x2, 0x2, 0x2, 0x805, 0x80a, 0x5, 0x38, 0x1d, 0x2, 0x806, 
       0x807, 0x7, 0x4a, 0x2, 0x2, 0x807, 0x809, 0x7, 0x4b, 0x2, 0x2, 0x808, 
       0x806, 0x3, 0x2, 0x2, 0x2, 0x809, 0x80c, 0x3, 0x2, 0x2, 0x2, 0x80a, 
       0x808, 0x3, 0x2, 0x2, 0x2, 0x80a, 0x80b, 0x3, 0x2, 0x2, 0x2, 0x80b, 
       0x80d, 0x3, 0x2, 0x2, 0x2, 0x80c, 0x80a, 0x3, 0x2, 0x2, 0x2, 0x80d, 
       0x80e, 0x7, 0x4e, 0x2, 0x2, 0x80e, 0x80f, 0x7, 0x15, 0x2, 0x2, 0x80f, 
       0x82d, 0x3, 0x2, 0x2, 0x2, 0x810, 0x815, 0x5, 0x82, 0x42, 0x2, 0x811, 
       0x812, 0x7, 0x4a, 0x2, 0x2, 0x812, 0x814, 0x7, 0x4b, 0x2, 0x2, 0x813, 
       0x811, 0x3, 0x2, 0x2, 0x2, 0x814, 0x817, 0x3, 0x2, 0x2, 0x2, 0x815, 
       0x813, 0x3, 0x2, 0x2, 0x2, 0x815, 0x816, 0x3, 0x2, 0x2, 0x2, 0x816, 
       0x818, 0x3, 0x2, 0x2, 0x2, 0x817, 0x815, 0x3, 0x2, 0x2, 0x2, 0x818, 
       0x819, 0x7, 0x4e, 0x2, 0x2, 0x819, 0x81a, 0x7, 0x15, 0x2, 0x2, 0x81a, 
       0x82d, 0x3, 0x2, 0x2, 0x2, 0x81b, 0x81c, 0x7, 0x3c, 0x2, 0x2, 0x81c, 
       0x81d, 0x7, 0x4e, 0x2, 0x2, 0x81d, 0x82d, 0x7, 0x15, 0x2, 0x2, 0x81e, 
       0x82d, 0x7, 0x37, 0x2, 0x2, 0x81f, 0x820, 0x5, 0x38, 0x1d, 0x2, 0x820, 
       0x821, 0x7, 0x4e, 0x2, 0x2, 0x821, 0x822, 0x7, 0x37, 0x2, 0x2, 0x822, 
       0x82d, 0x3, 0x2, 0x2, 0x2, 0x823, 0x824, 0x7, 0x46, 0x2, 0x2, 0x824, 
       0x825, 0x5, 0x1ae, 0xd8, 0x2, 0x825, 0x826, 0x7, 0x47, 0x2, 0x2, 
       0x826, 0x82d, 0x3, 0x2, 0x2, 0x2, 0x827, 0x82d, 0x5, 0x188, 0xc5, 
       0x2, 0x828, 0x82d, 0x5, 0x190, 0xc9, 0x2, 0x829, 0x82d, 0x5, 0x196, 
       0xcc, 0x2, 0x82a, 0x82d, 0x5, 0x19c, 0xcf, 0x2, 0x82b, 0x82d, 0x5, 
       0x1a4, 0xd3, 0x2, 0x82c, 0x804, 0x3, 0x2, 0x2, 0x2, 0x82c, 0x805, 
       0x3, 0x2, 0x2, 0x2, 0x82c, 0x810, 0x3, 0x2, 0x2, 0x2, 0x82c, 0x81b, 
       0x3, 0x2, 0x2, 0x2, 0x82c, 0x81e, 0x3, 0x2, 0x2, 0x2, 0x82c, 0x81f, 
       0x3, 0x2, 0x2, 0x2, 0x82c, 0x823, 0x3, 0x2, 0x2, 0x2, 0x82c, 0x827, 
       0x3, 0x2, 0x2, 0x2, 0x82c, 0x828, 0x3, 0x2, 0x2, 0x2, 0x82c, 0x829, 
       0x3, 0x2, 0x2, 0x2, 0x82c, 0x82a, 0x3, 0x2, 0x2, 0x2, 0x82c, 0x82b, 
       0x3, 0x2, 0x2, 0x2, 0x82d, 0x17d, 0x3, 0x2, 0x2, 0x2, 0x82e, 0x82f, 
       0x3, 0x2, 0x2, 0x2, 0x82f, 0x17f, 0x3, 0x2, 0x2, 0x2, 0x830, 0x858, 
       0x5, 0x2, 0x2, 0x2, 0x831, 0x836, 0x5, 0x38, 0x1d, 0x2, 0x832, 0x833, 
       0x7, 0x4a, 0x2, 0x2, 0x833, 0x835, 0x7, 0x4b, 0x2, 0x2, 0x834, 0x832, 
       0x3, 0x2, 0x2, 0x2, 0x835, 0x838, 0x3, 0x2, 0x2, 0x2, 0x836, 0x834, 
       0x3, 0x2, 0x2, 0x2, 0x836, 0x837, 0x3, 0x2, 0x2, 0x2, 0x837, 0x839, 
       0x3, 0x2, 0x2, 0x2, 0x838, 0x836, 0x3, 0x2, 0x2, 0x2, 0x839, 0x83a, 
       0x7, 0x4e, 0x2, 0x2, 0x83a, 0x83b, 0x7, 0x15, 0x2, 0x2, 0x83b, 0x858, 
       0x3, 0x2, 0x2, 0x2, 0x83c, 0x841, 0x5, 0x82, 0x42, 0x2, 0x83d, 0x83e, 
       0x7, 0x4a, 0x2, 0x2, 0x83e, 0x840, 0x7, 0x4b, 0x2, 0x2, 0x83f, 0x83d, 
       0x3, 0x2, 0x2, 0x2, 0x840, 0x843, 0x3, 0x2, 0x2, 0x2, 0x841, 0x83f, 
       0x3, 0x2, 0x2, 0x2, 0x841, 0x842, 0x3, 0x2, 0x2, 0x2, 0x842, 0x844, 
       0x3, 0x2, 0x2, 0x2, 0x843, 0x841, 0x3, 0x2, 0x2, 0x2, 0x844, 0x845, 
       0x7, 0x4e, 0x2, 0x2, 0x845, 0x846, 0x7, 0x15, 0x2, 0x2, 0x846, 0x858, 
       0x3, 0x2, 0x2, 0x2, 0x847, 0x848, 0x7, 0x3c, 0x2, 0x2, 0x848, 0x849, 
       0x7, 0x4e, 0x2, 0x2, 0x849, 0x858, 0x7, 0x15, 0x2, 0x2, 0x84a, 0x858, 
       0x7, 0x37, 0x2, 0x2, 0x84b, 0x84c, 0x5, 0x38, 0x1d, 0x2, 0x84c, 0x84d, 
       0x7, 0x4e, 0x2, 0x2, 0x84d, 0x84e, 0x7, 0x37, 0x2, 0x2, 0x84e, 0x858, 
       0x3, 0x2, 0x2, 0x2, 0x84f, 0x850, 0x7, 0x46, 0x2, 0x2, 0x850, 0x851, 
       0x5, 0x1ae, 0xd8, 0x2, 0x851, 0x852, 0x7, 0x47, 0x2, 0x2, 0x852, 
       0x858, 0x3, 0x2, 0x2, 0x2, 0x853, 0x858, 0x5, 0x188, 0xc5, 0x2, 0x854, 
       0x858, 0x5, 0x190, 0xc9, 0x2, 0x855, 0x858, 0x5, 0x19c, 0xcf, 0x2, 
       0x856, 0x858, 0x5, 0x1a4, 0xd3, 0x2, 0x857, 0x830, 0x3, 0x2, 0x2, 
       0x2, 0x857, 0x831, 0x3, 0x2, 0x2, 0x2, 0x857, 0x83c, 0x3, 0x2, 0x2, 
       0x2, 0x857, 0x847, 0x3, 0x2, 0x2, 0x2, 0x857, 0x84a, 0x3, 0x2, 0x2, 
       0x2, 0x857, 0x84b, 0x3, 0x2, 0x2, 0x2, 0x857, 0x84f, 0x3, 0x2, 0x2, 
       0x2, 0x857, 0x853, 0x3, 0x2, 0x2, 0x2, 0x857, 0x854, 0x3, 0x2, 0x2, 
       0x2, 0x857, 0x855, 0x3, 0x2, 0x2, 0x2, 0x857, 0x856, 0x3, 0x2, 0x2, 
       0x2, 0x858, 0x181, 0x3, 0x2, 0x2, 0x2, 0x859, 0x85d, 0x5, 0x38, 0x1d, 
       0x2, 0x85a, 0x85d, 0x5, 0x6, 0x4, 0x2, 0x85b, 0x85d, 0x7, 0xf, 0x2, 
       0x2, 0x85c, 0x859, 0x3, 0x2, 0x2, 0x2, 0x85c, 0x85a, 0x3, 0x2, 0x2, 
       0x2, 0x85c, 0x85b, 0x3, 0x2, 0x2, 0x2, 0x85d, 0x862, 0x3, 0x2, 0x2, 
       0x2, 0x85e, 0x85f, 0x7, 0x4a, 0x2, 0x2, 0x85f, 0x861, 0x7, 0x4b, 
       0x2, 0x2, 0x860, 0x85e, 0x3, 0x2, 0x2, 0x2, 0x861, 0x864, 0x3, 0x2, 
       0x2, 0x2, 0x862, 0x860, 0x3, 0x2, 0x2, 0x2, 0x862, 0x863, 0x3, 0x2, 
       0x2, 0x2, 0x863, 0x865, 0x3, 0x2, 0x2, 0x2, 0x864, 0x862, 0x3, 0x2, 
       0x2, 0x2, 0x865, 0x866, 0x7, 0x4e, 0x2, 0x2, 0x866, 0x86b, 0x7, 0x15, 
       0x2, 0x2, 0x867, 0x868, 0x7, 0x3c, 0x2, 0x2, 0x868, 0x869, 0x7, 0x4e, 
       0x2, 0x2, 0x869, 0x86b, 0x7, 0x15, 0x2, 0x2, 0x86a, 0x85c, 0x3, 0x2, 
       0x2, 0x2, 0x86a, 0x867, 0x3, 0x2, 0x2, 0x2, 0x86b, 0x183, 0x3, 0x2, 
       0x2, 0x2, 0x86c, 0x86e, 0x7, 0x2b, 0x2, 0x2, 0x86d, 0x86f, 0x5, 0x2a, 
       0x16, 0x2, 0x86e, 0x86d, 0x3, 0x2, 0x2, 0x2, 0x86e, 0x86f, 0x3, 0x2, 
       0x2, 0x2, 0x86f, 0x873, 0x3, 0x2, 0x2, 0x2, 0x870, 0x872, 0x5, 0xf2, 
       0x7a, 0x2, 0x871, 0x870, 0x3, 0x2, 0x2, 0x2, 0x872, 0x875, 0x3, 0x2, 
       0x2, 0x2, 0x873, 0x871, 0x3, 0x2, 0x2, 0x2, 0x873, 0x874, 0x3, 0x2, 
       0x2, 0x2, 0x874, 0x876, 0x3, 0x2, 0x2, 0x2, 0x875, 0x873, 0x3, 0x2, 
       0x2, 0x2, 0x876, 0x881, 0x5, 0x1ea, 0xf6, 0x2, 0x877, 0x87b, 0x7, 
       0x4e, 0x2, 0x2, 0x878, 0x87a, 0x5, 0xf2, 0x7a, 0x2, 0x879, 0x878, 
       0x3, 0x2, 0x2, 0x2, 0x87a, 0x87d, 0x3, 0x2, 0x2, 0x2, 0x87b, 0x879, 
       0x3, 0x2, 0x2, 0x2, 0x87b, 0x87c, 0x3, 0x2, 0x2, 0x2, 0x87c, 0x87e, 
       0x3, 0x2, 0x2, 0x2, 0x87d, 0x87b, 0x3, 0x2, 0x2, 0x2, 0x87e, 0x880, 
       0x5, 0x1ea, 0xf6, 0x2, 0x87f, 0x877, 0x3, 0x2, 0x2, 0x2, 0x880, 0x883, 
       0x3, 0x2, 0x2, 0x2, 0x881, 0x87f, 0x3, 0x2, 0x2, 0x2, 0x881, 0x882, 
       0x3, 0x2, 0x2, 0x2, 0x882, 0x885, 0x3, 0x2, 0x2, 0x2, 0x883, 0x881, 
       0x3, 0x2, 0x2, 0x2, 0x884, 0x886, 0x5, 0x18a, 0xc6, 0x2, 0x885, 0x884, 
       0x3, 0x2, 0x2, 0x2, 0x885, 0x886, 0x3, 0x2, 0x2, 0x2, 0x886, 0x887, 
       0x3, 0x2, 0x2, 0x2, 0x887, 0x889, 0x7, 0x46, 0x2, 0x2, 0x888, 0x88a, 
       0x5, 0x19e, 0xd0, 0x2, 0x889, 0x888, 0x3, 0x2, 0x2, 0x2, 0x889, 0x88a, 
       0x3, 0x2, 0x2, 0x2, 0x88a, 0x88b, 0x3, 0x2, 0x2, 0x2, 0x88b, 0x88d, 
       0x7, 0x47, 0x2, 0x2, 0x88c, 0x88e, 0x5, 0x6e, 0x38, 0x2, 0x88d, 0x88c, 
       0x3, 0x2, 0x2, 0x2, 0x88d, 0x88e, 0x3, 0x2, 0x2, 0x2, 0x88e, 0x8c0, 
       0x3, 0x2, 0x2, 0x2, 0x88f, 0x890, 0x5, 0x3c, 0x1f, 0x2, 0x890, 0x891, 
       0x7, 0x4e, 0x2, 0x2, 0x891, 0x893, 0x7, 0x2b, 0x2, 0x2, 0x892, 0x894, 
       0x5, 0x2a, 0x16, 0x2, 0x893, 0x892, 0x3, 0x2, 0x2, 0x2, 0x893, 0x894, 
       0x3, 0x2, 0x2, 0x2, 0x894, 0x898, 0x3, 0x2, 0x2, 0x2, 0x895, 0x897, 
       0x5, 0xf2, 0x7a, 0x2, 0x896, 0x895, 0x3, 0x2, 0x2, 0x2, 0x897, 0x89a, 
       0x3, 0x2, 0x2, 0x2, 0x898, 0x896, 0x3, 0x2, 0x2, 0x2, 0x898, 0x899, 
       0x3, 0x2, 0x2, 0x2, 0x899, 0x89b, 0x3, 0x2, 0x2, 0x2, 0x89a, 0x898, 
       0x3, 0x2, 0x2, 0x2, 0x89b, 0x89d, 0x5, 0x1ea, 0xf6, 0x2, 0x89c, 0x89e, 
       0x5, 0x18a, 0xc6, 0x2, 0x89d, 0x89c, 0x3, 0x2, 0x2, 0x2, 0x89d, 0x89e, 
       0x3, 0x2, 0x2, 0x2, 0x89e, 0x89f, 0x3, 0x2, 0x2, 0x2, 0x89f, 0x8a1, 
       0x7, 0x46, 0x2, 0x2, 0x8a0, 0x8a2, 0x5, 0x19e, 0xd0, 0x2, 0x8a1, 
       0x8a0, 0x3, 0x2, 0x2, 0x2, 0x8a1, 0x8a2, 0x3, 0x2, 0x2, 0x2, 0x8a2, 
       0x8a3, 0x3, 0x2, 0x2, 0x2, 0x8a3, 0x8a5, 0x7, 0x47, 0x2, 0x2, 0x8a4, 
       0x8a6, 0x5, 0x6e, 0x38, 0x2, 0x8a5, 0x8a4, 0x3, 0x2, 0x2, 0x2, 0x8a5, 
       0x8a6, 0x3, 0x2, 0x2, 0x2, 0x8a6, 0x8c0, 0x3, 0x2, 0x2, 0x2, 0x8a7, 
       0x8a8, 0x5, 0x16e, 0xb8, 0x2, 0x8a8, 0x8a9, 0x7, 0x4e, 0x2, 0x2, 
       0x8a9, 0x8ab, 0x7, 0x2b, 0x2, 0x2, 0x8aa, 0x8ac, 0x5, 0x2a, 0x16, 
       0x2, 0x8ab, 0x8aa, 0x3, 0x2, 0x2, 0x2, 0x8ab, 0x8ac, 0x3, 0x2, 0x2, 
       0x2, 0x8ac, 0x8b0, 0x3, 0x2, 0x2, 0x2, 0x8ad, 0x8af, 0x5, 0xf2, 0x7a, 
       0x2, 0x8ae, 0x8ad, 0x3, 0x2, 0x2, 0x2, 0x8af, 0x8b2, 0x3, 0x2, 0x2, 
       0x2, 0x8b0, 0x8ae, 0x3, 0x2, 0x2, 0x2, 0x8b0, 0x8b1, 0x3, 0x2, 0x2, 
       0x2, 0x8b1, 0x8b3, 0x3, 0x2, 0x2, 0x2, 0x8b2, 0x8b0, 0x3, 0x2, 0x2, 
       0x2, 0x8b3, 0x8b5, 0x5, 0x1ea, 0xf6, 0x2, 0x8b4, 0x8b6, 0x5, 0x18a, 
       0xc6, 0x2, 0x8b5, 0x8b4, 0x3, 0x2, 0x2, 0x2, 0x8b5, 0x8b6, 0x3, 0x2, 
       0x2, 0x2, 0x8b6, 0x8b7, 0x3, 0x2, 0x2, 0x2, 0x8b7, 0x8b9, 0x7, 0x46, 
       0x2, 0x2, 0x8b8, 0x8ba, 0x5, 0x19e, 0xd0, 0x2, 0x8b9, 0x8b8, 0x3, 
       0x2, 0x2, 0x2, 0x8b9, 0x8ba, 0x3, 0x2, 0x2, 0x2, 0x8ba, 0x8bb, 0x3, 
       0x2, 0x2, 0x2, 0x8bb, 0x8bd, 0x7, 0x47, 0x2, 0x2, 0x8bc, 0x8be, 0x5, 
       0x6e, 0x38, 0x2, 0x8bd, 0x8bc, 0x3, 0x2, 0x2, 0x2, 0x8bd, 0x8be, 
       0x3, 0x2, 0x2, 0x2, 0x8be, 0x8c0, 0x3, 0x2, 0x2, 0x2, 0x8bf, 0x86c, 
       0x3, 0x2, 0x2, 0x2, 0x8bf, 0x88f, 0x3, 0x2, 0x2, 0x2, 0x8bf, 0x8a7, 
       0x3, 0x2, 0x2, 0x2, 0x8c0, 0x185, 0x3, 0x2, 0x2, 0x2, 0x8c1, 0x8c2, 
       0x7, 0x4e, 0x2, 0x2, 0x8c2, 0x8c4, 0x7, 0x2b, 0x2, 0x2, 0x8c3, 0x8c5, 
       0x5, 0x2a, 0x16, 0x2, 0x8c4, 0x8c3, 0x3, 0x2, 0x2, 0x2, 0x8c4, 0x8c5, 
       0x3, 0x2, 0x2, 0x2, 0x8c5, 0x8c9, 0x3, 0x2, 0x2, 0x2, 0x8c6, 0x8c8, 
       0x5, 0xf2, 0x7a, 0x2, 0x8c7, 0x8c6, 0x3, 0x2, 0x2, 0x2, 0x8c8, 0x8cb, 
       0x3, 0x2, 0x2, 0x2, 0x8c9, 0x8c7, 0x3, 0x2, 0x2, 0x2, 0x8c9, 0x8ca, 
       0x3, 0x2, 0x2, 0x2, 0x8ca, 0x8cc, 0x3, 0x2, 0x2, 0x2, 0x8cb, 0x8c9, 
       0x3, 0x2, 0x2, 0x2, 0x8cc, 0x8ce, 0x5, 0x1ea, 0xf6, 0x2, 0x8cd, 0x8cf, 
       0x5, 0x18a, 0xc6, 0x2, 0x8ce, 0x8cd, 0x3, 0x2, 0x2, 0x2, 0x8ce, 0x8cf, 
       0x3, 0x2, 0x2, 0x2, 0x8cf, 0x8d0, 0x3, 0x2, 0x2, 0x2, 0x8d0, 0x8d2, 
       0x7, 0x46, 0x2, 0x2, 0x8d1, 0x8d3, 0x5, 0x19e, 0xd0, 0x2, 0x8d2, 
       0x8d1, 0x3, 0x2, 0x2, 0x2, 0x8d2, 0x8d3, 0x3, 0x2, 0x2, 0x2, 0x8d3, 
       0x8d4, 0x3, 0x2, 0x2, 0x2, 0x8d4, 0x8d6, 0x7, 0x47, 0x2, 0x2, 0x8d5, 
       0x8d7, 0x5, 0x6e, 0x38, 0x2, 0x8d6, 0x8d5, 0x3, 0x2, 0x2, 0x2, 0x8d6, 
       0x8d7, 0x3, 0x2, 0x2, 0x2, 0x8d7, 0x187, 0x3, 0x2, 0x2, 0x2, 0x8d8, 
       0x8da, 0x7, 0x2b, 0x2, 0x2, 0x8d9, 0x8db, 0x5, 0x2a, 0x16, 0x2, 0x8da, 
       0x8d9, 0x3, 0x2, 0x2, 0x2, 0x8da, 0x8db, 0x3, 0x2, 0x2, 0x2, 0x8db, 
       0x8df, 0x3, 0x2, 0x2, 0x2, 0x8dc, 0x8de, 0x5, 0xf2, 0x7a, 0x2, 0x8dd, 
       0x8dc, 0x3, 0x2, 0x2, 0x2, 0x8de, 0x8e1, 0x3, 0x2, 0x2, 0x2, 0x8df, 
       0x8dd, 0x3, 0x2, 0x2, 0x2, 0x8df, 0x8e0, 0x3, 0x2, 0x2, 0x2, 0x8e0, 
       0x8e2, 0x3, 0x2, 0x2, 0x2, 0x8e1, 0x8df, 0x3, 0x2, 0x2, 0x2, 0x8e2, 
       0x8ed, 0x5, 0x1ea, 0xf6, 0x2, 0x8e3, 0x8e7, 0x7, 0x4e, 0x2, 0x2, 
       0x8e4, 0x8e6, 0x5, 0xf2, 0x7a, 0x2, 0x8e5, 0x8e4, 0x3, 0x2, 0x2, 
       0x2, 0x8e6, 0x8e9, 0x3, 0x2, 0x2, 0x2, 0x8e7, 0x8e5, 0x3, 0x2, 0x2, 
       0x2, 0x8e7, 0x8e8, 0x3, 0x2, 0x2, 0x2, 0x8e8, 0x8ea, 0x3, 0x2, 0x2, 
       0x2, 0x8e9, 0x8e7, 0x3, 0x2, 0x2, 0x2, 0x8ea, 0x8ec, 0x5, 0x1ea, 
       0xf6, 0x2, 0x8eb, 0x8e3, 0x3, 0x2, 0x2, 0x2, 0x8ec, 0x8ef, 0x3, 0x2, 
       0x2, 0x2, 0x8ed, 0x8eb, 0x3, 0x2, 0x2, 0x2, 0x8ed, 0x8ee, 0x3, 0x2, 
       0x2, 0x2, 0x8ee, 0x8f1, 0x3, 0x2, 0x2, 0x2, 0x8ef, 0x8ed, 0x3, 0x2, 
       0x2, 0x2, 0x8f0, 0x8f2, 0x5, 0x18a, 0xc6, 0x2, 0x8f1, 0x8f0, 0x3, 
       0x2, 0x2, 0x2, 0x8f1, 0x8f2, 0x3, 0x2, 0x2, 0x2, 0x8f2, 0x8f3, 0x3, 
       0x2, 0x2, 0x2, 0x8f3, 0x8f5, 0x7, 0x46, 0x2, 0x2, 0x8f4, 0x8f6, 0x5, 
       0x19e, 0xd0, 0x2, 0x8f5, 0x8f4, 0x3, 0x2, 0x2, 0x2, 0x8f5, 0x8f6, 
       0x3, 0x2, 0x2, 0x2, 0x8f6, 0x8f7, 0x3, 0x2, 0x2, 0x2, 0x8f7, 0x8f9, 
       0x7, 0x47, 0x2, 0x2, 0x8f8, 0x8fa, 0x5, 0x6e, 0x38, 0x2, 0x8f9, 0x8f8, 
       0x3, 0x2, 0x2, 0x2, 0x8f9, 0x8fa, 0x3, 0x2, 0x2, 0x2, 0x8fa, 0x914, 
       0x3, 0x2, 0x2, 0x2, 0x8fb, 0x8fc, 0x5, 0x3c, 0x1f, 0x2, 0x8fc, 0x8fd, 
       0x7, 0x4e, 0x2, 0x2, 0x8fd, 0x8ff, 0x7, 0x2b, 0x2, 0x2, 0x8fe, 0x900, 
       0x5, 0x2a, 0x16, 0x2, 0x8ff, 0x8fe, 0x3, 0x2, 0x2, 0x2, 0x8ff, 0x900, 
       0x3, 0x2, 0x2, 0x2, 0x900, 0x904, 0x3, 0x2, 0x2, 0x2, 0x901, 0x903, 
       0x5, 0xf2, 0x7a, 0x2, 0x902, 0x901, 0x3, 0x2, 0x2, 0x2, 0x903, 0x906, 
       0x3, 0x2, 0x2, 0x2, 0x904, 0x902, 0x3, 0x2, 0x2, 0x2, 0x904, 0x905, 
       0x3, 0x2, 0x2, 0x2, 0x905, 0x907, 0x3, 0x2, 0x2, 0x2, 0x906, 0x904, 
       0x3, 0x2, 0x2, 0x2, 0x907, 0x909, 0x5, 0x1ea, 0xf6, 0x2, 0x908, 0x90a, 
       0x5, 0x18a, 0xc6, 0x2, 0x909, 0x908, 0x3, 0x2, 0x2, 0x2, 0x909, 0x90a, 
       0x3, 0x2, 0x2, 0x2, 0x90a, 0x90b, 0x3, 0x2, 0x2, 0x2, 0x90b, 0x90d, 
       0x7, 0x46, 0x2, 0x2, 0x90c, 0x90e, 0x5, 0x19e, 0xd0, 0x2, 0x90d, 
       0x90c, 0x3, 0x2, 0x2, 0x2, 0x90d, 0x90e, 0x3, 0x2, 0x2, 0x2, 0x90e, 
       0x90f, 0x3, 0x2, 0x2, 0x2, 0x90f, 0x911, 0x7, 0x47, 0x2, 0x2, 0x910, 
       0x912, 0x5, 0x6e, 0x38, 0x2, 0x911, 0x910, 0x3, 0x2, 0x2, 0x2, 0x911, 
       0x912, 0x3, 0x2, 0x2, 0x2, 0x912, 0x914, 0x3, 0x2, 0x2, 0x2, 0x913, 
       0x8d8, 0x3, 0x2, 0x2, 0x2, 0x913, 0x8fb, 0x3, 0x2, 0x2, 0x2, 0x914, 
       0x189, 0x3, 0x2, 0x2, 0x2, 0x915, 0x919, 0x5, 0x2a, 0x16, 0x2, 0x916, 
       0x917, 0x7, 0x54, 0x2, 0x2, 0x917, 0x919, 0x7, 0x53, 0x2, 0x2, 0x918, 
       0x915, 0x3, 0x2, 0x2, 0x2, 0x918, 0x916, 0x3, 0x2, 0x2, 0x2, 0x919, 
       0x18b, 0x3, 0x2, 0x2, 0x2, 0x91a, 0x91b, 0x5, 0x16e, 0xb8, 0x2, 0x91b, 
       0x91c, 0x7, 0x4e, 0x2, 0x2, 0x91c, 0x91d, 0x5, 0x1ea, 0xf6, 0x2, 
       0x91d, 0x928, 0x3, 0x2, 0x2, 0x2, 0x91e, 0x91f, 0x7, 0x34, 0x2, 0x2, 
       0x91f, 0x920, 0x7, 0x4e, 0x2, 0x2, 0x920, 0x928, 0x5, 0x1ea, 0xf6, 
       0x2, 0x921, 0x922, 0x5, 0x38, 0x1d, 0x2, 0x922, 0x923, 0x7, 0x4e, 
       0x2, 0x2, 0x923, 0x924, 0x7, 0x34, 0x2, 0x2, 0x924, 0x925, 0x7, 0x4e, 
       0x2, 0x2, 0x925, 0x926, 0x5, 0x1ea, 0xf6, 0x2, 0x926, 0x928, 0x3, 
       0x2, 0x2, 0x2, 0x927, 0x91a, 0x3, 0x2, 0x2, 0x2, 0x927, 0x91e, 0x3, 
       0x2, 0x2, 0x2, 0x927, 0x921, 0x3, 0x2, 0x2, 0x2, 0x928, 0x18d, 0x3, 
       0x2, 0x2, 0x2, 0x929, 0x92a, 0x7, 0x4e, 0x2, 0x2, 0x92a, 0x92b, 0x5, 
       0x1ea, 0xf6, 0x2, 0x92b, 0x18f, 0x3, 0x2, 0x2, 0x2, 0x92c, 0x92d, 
       0x7, 0x34, 0x2, 0x2, 0x92d, 0x92e, 0x7, 0x4e, 0x2, 0x2, 0x92e, 0x936, 
       0x5, 0x1ea, 0xf6, 0x2, 0x92f, 0x930, 0x5, 0x38, 0x1d, 0x2, 0x930, 
       0x931, 0x7, 0x4e, 0x2, 0x2, 0x931, 0x932, 0x7, 0x34, 0x2, 0x2, 0x932, 
       0x933, 0x7, 0x4e, 0x2, 0x2, 0x933, 0x934, 0x5, 0x1ea, 0xf6, 0x2, 
       0x934, 0x936, 0x3, 0x2, 0x2, 0x2, 0x935, 0x92c, 0x3, 0x2, 0x2, 0x2, 
       0x935, 0x92f, 0x3, 0x2, 0x2, 0x2, 0x936, 0x191, 0x3, 0x2, 0x2, 0x2, 
       0x937, 0x938, 0x5, 0x3c, 0x1f, 0x2, 0x938, 0x939, 0x7, 0x4a, 0x2, 
       0x2, 0x939, 0x93a, 0x5, 0x1ae, 0xd8, 0x2, 0x93a, 0x93b, 0x7, 0x4b, 
       0x2, 0x2, 0x93b, 0x942, 0x3, 0x2, 0x2, 0x2, 0x93c, 0x93d, 0x5, 0x174, 
       0xbb, 0x2, 0x93d, 0x93e, 0x7, 0x4a, 0x2, 0x2, 0x93e, 0x93f, 0x5, 
       0x1ae, 0xd8, 0x2, 0x93f, 0x940, 0x7, 0x4b, 0x2, 0x2, 0x940, 0x942, 
       0x3, 0x2, 0x2, 0x2, 0x941, 0x937, 0x3, 0x2, 0x2, 0x2, 0x941, 0x93c, 
       0x3, 0x2, 0x2, 0x2, 0x942, 0x94a, 0x3, 0x2, 0x2, 0x2, 0x943, 0x944, 
       0x5, 0x172, 0xba, 0x2, 0x944, 0x945, 0x7, 0x4a, 0x2, 0x2, 0x945, 
       0x946, 0x5, 0x1ae, 0xd8, 0x2, 0x946, 0x947, 0x7, 0x4b, 0x2, 0x2, 
       0x947, 0x949, 0x3, 0x2, 0x2, 0x2, 0x948, 0x943, 0x3, 0x2, 0x2, 0x2, 
       0x949, 0x94c, 0x3, 0x2, 0x2, 0x2, 0x94a, 
  };
  static uint16_t serializedATNSegment1[] = {
    0x948, 0x3, 0x2, 0x2, 0x2, 0x94a, 0x94b, 0x3, 0x2, 0x2, 0x2, 0x94b, 
       0x193, 0x3, 0x2, 0x2, 0x2, 0x94c, 0x94a, 0x3, 0x2, 0x2, 0x2, 0x94d, 
       0x94e, 0x5, 0x17a, 0xbe, 0x2, 0x94e, 0x94f, 0x7, 0x4a, 0x2, 0x2, 
       0x94f, 0x950, 0x5, 0x1ae, 0xd8, 0x2, 0x950, 0x951, 0x7, 0x4b, 0x2, 
       0x2, 0x951, 0x959, 0x3, 0x2, 0x2, 0x2, 0x952, 0x953, 0x5, 0x178, 
       0xbd, 0x2, 0x953, 0x954, 0x7, 0x4a, 0x2, 0x2, 0x954, 0x955, 0x5, 
       0x1ae, 0xd8, 0x2, 0x955, 0x956, 0x7, 0x4b, 0x2, 0x2, 0x956, 0x958, 
       0x3, 0x2, 0x2, 0x2, 0x957, 0x952, 0x3, 0x2, 0x2, 0x2, 0x958, 0x95b, 
       0x3, 0x2, 0x2, 0x2, 0x959, 0x957, 0x3, 0x2, 0x2, 0x2, 0x959, 0x95a, 
       0x3, 0x2, 0x2, 0x2, 0x95a, 0x195, 0x3, 0x2, 0x2, 0x2, 0x95b, 0x959, 
       0x3, 0x2, 0x2, 0x2, 0x95c, 0x95d, 0x5, 0x3c, 0x1f, 0x2, 0x95d, 0x95e, 
       0x7, 0x4a, 0x2, 0x2, 0x95e, 0x95f, 0x5, 0x1ae, 0xd8, 0x2, 0x95f, 
       0x960, 0x7, 0x4b, 0x2, 0x2, 0x960, 0x967, 0x3, 0x2, 0x2, 0x2, 0x961, 
       0x962, 0x5, 0x180, 0xc1, 0x2, 0x962, 0x963, 0x7, 0x4a, 0x2, 0x2, 
       0x963, 0x964, 0x5, 0x1ae, 0xd8, 0x2, 0x964, 0x965, 0x7, 0x4b, 0x2, 
       0x2, 0x965, 0x967, 0x3, 0x2, 0x2, 0x2, 0x966, 0x95c, 0x3, 0x2, 0x2, 
       0x2, 0x966, 0x961, 0x3, 0x2, 0x2, 0x2, 0x967, 0x96f, 0x3, 0x2, 0x2, 
       0x2, 0x968, 0x969, 0x5, 0x17e, 0xc0, 0x2, 0x969, 0x96a, 0x7, 0x4a, 
       0x2, 0x2, 0x96a, 0x96b, 0x5, 0x1ae, 0xd8, 0x2, 0x96b, 0x96c, 0x7, 
       0x4b, 0x2, 0x2, 0x96c, 0x96e, 0x3, 0x2, 0x2, 0x2, 0x96d, 0x968, 0x3, 
       0x2, 0x2, 0x2, 0x96e, 0x971, 0x3, 0x2, 0x2, 0x2, 0x96f, 0x96d, 0x3, 
       0x2, 0x2, 0x2, 0x96f, 0x970, 0x3, 0x2, 0x2, 0x2, 0x970, 0x197, 0x3, 
       0x2, 0x2, 0x2, 0x971, 0x96f, 0x3, 0x2, 0x2, 0x2, 0x972, 0x973, 0x5, 
       0x3e, 0x20, 0x2, 0x973, 0x975, 0x7, 0x46, 0x2, 0x2, 0x974, 0x976, 
       0x5, 0x19e, 0xd0, 0x2, 0x975, 0x974, 0x3, 0x2, 0x2, 0x2, 0x975, 0x976, 
       0x3, 0x2, 0x2, 0x2, 0x976, 0x977, 0x3, 0x2, 0x2, 0x2, 0x977, 0x978, 
       0x7, 0x47, 0x2, 0x2, 0x978, 0x9b8, 0x3, 0x2, 0x2, 0x2, 0x979, 0x97a, 
       0x5, 0x38, 0x1d, 0x2, 0x97a, 0x97c, 0x7, 0x4e, 0x2, 0x2, 0x97b, 0x97d, 
       0x5, 0x2a, 0x16, 0x2, 0x97c, 0x97b, 0x3, 0x2, 0x2, 0x2, 0x97c, 0x97d, 
       0x3, 0x2, 0x2, 0x2, 0x97d, 0x97e, 0x3, 0x2, 0x2, 0x2, 0x97e, 0x97f, 
       0x5, 0x1ea, 0xf6, 0x2, 0x97f, 0x981, 0x7, 0x46, 0x2, 0x2, 0x980, 
       0x982, 0x5, 0x19e, 0xd0, 0x2, 0x981, 0x980, 0x3, 0x2, 0x2, 0x2, 0x981, 
       0x982, 0x3, 0x2, 0x2, 0x2, 0x982, 0x983, 0x3, 0x2, 0x2, 0x2, 0x983, 
       0x984, 0x7, 0x47, 0x2, 0x2, 0x984, 0x9b8, 0x3, 0x2, 0x2, 0x2, 0x985, 
       0x986, 0x5, 0x3c, 0x1f, 0x2, 0x986, 0x988, 0x7, 0x4e, 0x2, 0x2, 0x987, 
       0x989, 0x5, 0x2a, 0x16, 0x2, 0x988, 0x987, 0x3, 0x2, 0x2, 0x2, 0x988, 
       0x989, 0x3, 0x2, 0x2, 0x2, 0x989, 0x98a, 0x3, 0x2, 0x2, 0x2, 0x98a, 
       0x98b, 0x5, 0x1ea, 0xf6, 0x2, 0x98b, 0x98d, 0x7, 0x46, 0x2, 0x2, 
       0x98c, 0x98e, 0x5, 0x19e, 0xd0, 0x2, 0x98d, 0x98c, 0x3, 0x2, 0x2, 
       0x2, 0x98d, 0x98e, 0x3, 0x2, 0x2, 0x2, 0x98e, 0x98f, 0x3, 0x2, 0x2, 
       0x2, 0x98f, 0x990, 0x7, 0x47, 0x2, 0x2, 0x990, 0x9b8, 0x3, 0x2, 0x2, 
       0x2, 0x991, 0x992, 0x5, 0x16e, 0xb8, 0x2, 0x992, 0x994, 0x7, 0x4e, 
       0x2, 0x2, 0x993, 0x995, 0x5, 0x2a, 0x16, 0x2, 0x994, 0x993, 0x3, 
       0x2, 0x2, 0x2, 0x994, 0x995, 0x3, 0x2, 0x2, 0x2, 0x995, 0x996, 0x3, 
       0x2, 0x2, 0x2, 0x996, 0x997, 0x5, 0x1ea, 0xf6, 0x2, 0x997, 0x999, 
       0x7, 0x46, 0x2, 0x2, 0x998, 0x99a, 0x5, 0x19e, 0xd0, 0x2, 0x999, 
       0x998, 0x3, 0x2, 0x2, 0x2, 0x999, 0x99a, 0x3, 0x2, 0x2, 0x2, 0x99a, 
       0x99b, 0x3, 0x2, 0x2, 0x2, 0x99b, 0x99c, 0x7, 0x47, 0x2, 0x2, 0x99c, 
       0x9b8, 0x3, 0x2, 0x2, 0x2, 0x99d, 0x99e, 0x7, 0x34, 0x2, 0x2, 0x99e, 
       0x9a0, 0x7, 0x4e, 0x2, 0x2, 0x99f, 0x9a1, 0x5, 0x2a, 0x16, 0x2, 0x9a0, 
       0x99f, 0x3, 0x2, 0x2, 0x2, 0x9a0, 0x9a1, 0x3, 0x2, 0x2, 0x2, 0x9a1, 
       0x9a2, 0x3, 0x2, 0x2, 0x2, 0x9a2, 0x9a3, 0x5, 0x1ea, 0xf6, 0x2, 0x9a3, 
       0x9a5, 0x7, 0x46, 0x2, 0x2, 0x9a4, 0x9a6, 0x5, 0x19e, 0xd0, 0x2, 
       0x9a5, 0x9a4, 0x3, 0x2, 0x2, 0x2, 0x9a5, 0x9a6, 0x3, 0x2, 0x2, 0x2, 
       0x9a6, 0x9a7, 0x3, 0x2, 0x2, 0x2, 0x9a7, 0x9a8, 0x7, 0x47, 0x2, 0x2, 
       0x9a8, 0x9b8, 0x3, 0x2, 0x2, 0x2, 0x9a9, 0x9aa, 0x5, 0x38, 0x1d, 
       0x2, 0x9aa, 0x9ab, 0x7, 0x4e, 0x2, 0x2, 0x9ab, 0x9ac, 0x7, 0x34, 
       0x2, 0x2, 0x9ac, 0x9ae, 0x7, 0x4e, 0x2, 0x2, 0x9ad, 0x9af, 0x5, 0x2a, 
       0x16, 0x2, 0x9ae, 0x9ad, 0x3, 0x2, 0x2, 0x2, 0x9ae, 0x9af, 0x3, 0x2, 
       0x2, 0x2, 0x9af, 0x9b0, 0x3, 0x2, 0x2, 0x2, 0x9b0, 0x9b1, 0x5, 0x1ea, 
       0xf6, 0x2, 0x9b1, 0x9b3, 0x7, 0x46, 0x2, 0x2, 0x9b2, 0x9b4, 0x5, 
       0x19e, 0xd0, 0x2, 0x9b3, 0x9b2, 0x3, 0x2, 0x2, 0x2, 0x9b3, 0x9b4, 
       0x3, 0x2, 0x2, 0x2, 0x9b4, 0x9b5, 0x3, 0x2, 0x2, 0x2, 0x9b5, 0x9b6, 
       0x7, 0x47, 0x2, 0x2, 0x9b6, 0x9b8, 0x3, 0x2, 0x2, 0x2, 0x9b7, 0x972, 
       0x3, 0x2, 0x2, 0x2, 0x9b7, 0x979, 0x3, 0x2, 0x2, 0x2, 0x9b7, 0x985, 
       0x3, 0x2, 0x2, 0x2, 0x9b7, 0x991, 0x3, 0x2, 0x2, 0x2, 0x9b7, 0x99d, 
       0x3, 0x2, 0x2, 0x2, 0x9b7, 0x9a9, 0x3, 0x2, 0x2, 0x2, 0x9b8, 0x199, 
       0x3, 0x2, 0x2, 0x2, 0x9b9, 0x9bb, 0x7, 0x4e, 0x2, 0x2, 0x9ba, 0x9bc, 
       0x5, 0x2a, 0x16, 0x2, 0x9bb, 0x9ba, 0x3, 0x2, 0x2, 0x2, 0x9bb, 0x9bc, 
       0x3, 0x2, 0x2, 0x2, 0x9bc, 0x9bd, 0x3, 0x2, 0x2, 0x2, 0x9bd, 0x9be, 
       0x5, 0x1ea, 0xf6, 0x2, 0x9be, 0x9c0, 0x7, 0x46, 0x2, 0x2, 0x9bf, 
       0x9c1, 0x5, 0x19e, 0xd0, 0x2, 0x9c0, 0x9bf, 0x3, 0x2, 0x2, 0x2, 0x9c0, 
       0x9c1, 0x3, 0x2, 0x2, 0x2, 0x9c1, 0x9c2, 0x3, 0x2, 0x2, 0x2, 0x9c2, 
       0x9c3, 0x7, 0x47, 0x2, 0x2, 0x9c3, 0x19b, 0x3, 0x2, 0x2, 0x2, 0x9c4, 
       0x9c5, 0x5, 0x3e, 0x20, 0x2, 0x9c5, 0x9c7, 0x7, 0x46, 0x2, 0x2, 0x9c6, 
       0x9c8, 0x5, 0x19e, 0xd0, 0x2, 0x9c7, 0x9c6, 0x3, 0x2, 0x2, 0x2, 0x9c7, 
       0x9c8, 0x3, 0x2, 0x2, 0x2, 0x9c8, 0x9c9, 0x3, 0x2, 0x2, 0x2, 0x9c9, 
       0x9ca, 0x7, 0x47, 0x2, 0x2, 0x9ca, 0x9fe, 0x3, 0x2, 0x2, 0x2, 0x9cb, 
       0x9cc, 0x5, 0x38, 0x1d, 0x2, 0x9cc, 0x9ce, 0x7, 0x4e, 0x2, 0x2, 0x9cd, 
       0x9cf, 0x5, 0x2a, 0x16, 0x2, 0x9ce, 0x9cd, 0x3, 0x2, 0x2, 0x2, 0x9ce, 
       0x9cf, 0x3, 0x2, 0x2, 0x2, 0x9cf, 0x9d0, 0x3, 0x2, 0x2, 0x2, 0x9d0, 
       0x9d1, 0x5, 0x1ea, 0xf6, 0x2, 0x9d1, 0x9d3, 0x7, 0x46, 0x2, 0x2, 
       0x9d2, 0x9d4, 0x5, 0x19e, 0xd0, 0x2, 0x9d3, 0x9d2, 0x3, 0x2, 0x2, 
       0x2, 0x9d3, 0x9d4, 0x3, 0x2, 0x2, 0x2, 0x9d4, 0x9d5, 0x3, 0x2, 0x2, 
       0x2, 0x9d5, 0x9d6, 0x7, 0x47, 0x2, 0x2, 0x9d6, 0x9fe, 0x3, 0x2, 0x2, 
       0x2, 0x9d7, 0x9d8, 0x5, 0x3c, 0x1f, 0x2, 0x9d8, 0x9da, 0x7, 0x4e, 
       0x2, 0x2, 0x9d9, 0x9db, 0x5, 0x2a, 0x16, 0x2, 0x9da, 0x9d9, 0x3, 
       0x2, 0x2, 0x2, 0x9da, 0x9db, 0x3, 0x2, 0x2, 0x2, 0x9db, 0x9dc, 0x3, 
       0x2, 0x2, 0x2, 0x9dc, 0x9dd, 0x5, 0x1ea, 0xf6, 0x2, 0x9dd, 0x9df, 
       0x7, 0x46, 0x2, 0x2, 0x9de, 0x9e0, 0x5, 0x19e, 0xd0, 0x2, 0x9df, 
       0x9de, 0x3, 0x2, 0x2, 0x2, 0x9df, 0x9e0, 0x3, 0x2, 0x2, 0x2, 0x9e0, 
       0x9e1, 0x3, 0x2, 0x2, 0x2, 0x9e1, 0x9e2, 0x7, 0x47, 0x2, 0x2, 0x9e2, 
       0x9fe, 0x3, 0x2, 0x2, 0x2, 0x9e3, 0x9e4, 0x7, 0x34, 0x2, 0x2, 0x9e4, 
       0x9e6, 0x7, 0x4e, 0x2, 0x2, 0x9e5, 0x9e7, 0x5, 0x2a, 0x16, 0x2, 0x9e6, 
       0x9e5, 0x3, 0x2, 0x2, 0x2, 0x9e6, 0x9e7, 0x3, 0x2, 0x2, 0x2, 0x9e7, 
       0x9e8, 0x3, 0x2, 0x2, 0x2, 0x9e8, 0x9e9, 0x5, 0x1ea, 0xf6, 0x2, 0x9e9, 
       0x9eb, 0x7, 0x46, 0x2, 0x2, 0x9ea, 0x9ec, 0x5, 0x19e, 0xd0, 0x2, 
       0x9eb, 0x9ea, 0x3, 0x2, 0x2, 0x2, 0x9eb, 0x9ec, 0x3, 0x2, 0x2, 0x2, 
       0x9ec, 0x9ed, 0x3, 0x2, 0x2, 0x2, 0x9ed, 0x9ee, 0x7, 0x47, 0x2, 0x2, 
       0x9ee, 0x9fe, 0x3, 0x2, 0x2, 0x2, 0x9ef, 0x9f0, 0x5, 0x38, 0x1d, 
       0x2, 0x9f0, 0x9f1, 0x7, 0x4e, 0x2, 0x2, 0x9f1, 0x9f2, 0x7, 0x34, 
       0x2, 0x2, 0x9f2, 0x9f4, 0x7, 0x4e, 0x2, 0x2, 0x9f3, 0x9f5, 0x5, 0x2a, 
       0x16, 0x2, 0x9f4, 0x9f3, 0x3, 0x2, 0x2, 0x2, 0x9f4, 0x9f5, 0x3, 0x2, 
       0x2, 0x2, 0x9f5, 0x9f6, 0x3, 0x2, 0x2, 0x2, 0x9f6, 0x9f7, 0x5, 0x1ea, 
       0xf6, 0x2, 0x9f7, 0x9f9, 0x7, 0x46, 0x2, 0x2, 0x9f8, 0x9fa, 0x5, 
       0x19e, 0xd0, 0x2, 0x9f9, 0x9f8, 0x3, 0x2, 0x2, 0x2, 0x9f9, 0x9fa, 
       0x3, 0x2, 0x2, 0x2, 0x9fa, 0x9fb, 0x3, 0x2, 0x2, 0x2, 0x9fb, 0x9fc, 
       0x7, 0x47, 0x2, 0x2, 0x9fc, 0x9fe, 0x3, 0x2, 0x2, 0x2, 0x9fd, 0x9c4, 
       0x3, 0x2, 0x2, 0x2, 0x9fd, 0x9cb, 0x3, 0x2, 0x2, 0x2, 0x9fd, 0x9d7, 
       0x3, 0x2, 0x2, 0x2, 0x9fd, 0x9e3, 0x3, 0x2, 0x2, 0x2, 0x9fd, 0x9ef, 
       0x3, 0x2, 0x2, 0x2, 0x9fe, 0x19d, 0x3, 0x2, 0x2, 0x2, 0x9ff, 0xa04, 
       0x5, 0x1ae, 0xd8, 0x2, 0xa00, 0xa01, 0x7, 0x4d, 0x2, 0x2, 0xa01, 
       0xa03, 0x5, 0x1ae, 0xd8, 0x2, 0xa02, 0xa00, 0x3, 0x2, 0x2, 0x2, 0xa03, 
       0xa06, 0x3, 0x2, 0x2, 0x2, 0xa04, 0xa02, 0x3, 0x2, 0x2, 0x2, 0xa04, 
       0xa05, 0x3, 0x2, 0x2, 0x2, 0xa05, 0x19f, 0x3, 0x2, 0x2, 0x2, 0xa06, 
       0xa04, 0x3, 0x2, 0x2, 0x2, 0xa07, 0xa08, 0x5, 0x3c, 0x1f, 0x2, 0xa08, 
       0xa0a, 0x7, 0x51, 0x2, 0x2, 0xa09, 0xa0b, 0x5, 0x2a, 0x16, 0x2, 0xa0a, 
       0xa09, 0x3, 0x2, 0x2, 0x2, 0xa0a, 0xa0b, 0x3, 0x2, 0x2, 0x2, 0xa0b, 
       0xa0c, 0x3, 0x2, 0x2, 0x2, 0xa0c, 0xa0d, 0x5, 0x1ea, 0xf6, 0x2, 0xa0d, 
       0xa37, 0x3, 0x2, 0x2, 0x2, 0xa0e, 0xa0f, 0x5, 0xc, 0x7, 0x2, 0xa0f, 
       0xa11, 0x7, 0x51, 0x2, 0x2, 0xa10, 0xa12, 0x5, 0x2a, 0x16, 0x2, 0xa11, 
       0xa10, 0x3, 0x2, 0x2, 0x2, 0xa11, 0xa12, 0x3, 0x2, 0x2, 0x2, 0xa12, 
       0xa13, 0x3, 0x2, 0x2, 0x2, 0xa13, 0xa14, 0x5, 0x1ea, 0xf6, 0x2, 0xa14, 
       0xa37, 0x3, 0x2, 0x2, 0x2, 0xa15, 0xa16, 0x5, 0x16e, 0xb8, 0x2, 0xa16, 
       0xa18, 0x7, 0x51, 0x2, 0x2, 0xa17, 0xa19, 0x5, 0x2a, 0x16, 0x2, 0xa18, 
       0xa17, 0x3, 0x2, 0x2, 0x2, 0xa18, 0xa19, 0x3, 0x2, 0x2, 0x2, 0xa19, 
       0xa1a, 0x3, 0x2, 0x2, 0x2, 0xa1a, 0xa1b, 0x5, 0x1ea, 0xf6, 0x2, 0xa1b, 
       0xa37, 0x3, 0x2, 0x2, 0x2, 0xa1c, 0xa1d, 0x7, 0x34, 0x2, 0x2, 0xa1d, 
       0xa1f, 0x7, 0x51, 0x2, 0x2, 0xa1e, 0xa20, 0x5, 0x2a, 0x16, 0x2, 0xa1f, 
       0xa1e, 0x3, 0x2, 0x2, 0x2, 0xa1f, 0xa20, 0x3, 0x2, 0x2, 0x2, 0xa20, 
       0xa21, 0x3, 0x2, 0x2, 0x2, 0xa21, 0xa37, 0x5, 0x1ea, 0xf6, 0x2, 0xa22, 
       0xa23, 0x5, 0x38, 0x1d, 0x2, 0xa23, 0xa24, 0x7, 0x4e, 0x2, 0x2, 0xa24, 
       0xa25, 0x7, 0x34, 0x2, 0x2, 0xa25, 0xa27, 0x7, 0x51, 0x2, 0x2, 0xa26, 
       0xa28, 0x5, 0x2a, 0x16, 0x2, 0xa27, 0xa26, 0x3, 0x2, 0x2, 0x2, 0xa27, 
       0xa28, 0x3, 0x2, 0x2, 0x2, 0xa28, 0xa29, 0x3, 0x2, 0x2, 0x2, 0xa29, 
       0xa2a, 0x5, 0x1ea, 0xf6, 0x2, 0xa2a, 0xa37, 0x3, 0x2, 0x2, 0x2, 0xa2b, 
       0xa2c, 0x5, 0x10, 0x9, 0x2, 0xa2c, 0xa2e, 0x7, 0x51, 0x2, 0x2, 0xa2d, 
       0xa2f, 0x5, 0x2a, 0x16, 0x2, 0xa2e, 0xa2d, 0x3, 0x2, 0x2, 0x2, 0xa2e, 
       0xa2f, 0x3, 0x2, 0x2, 0x2, 0xa2f, 0xa30, 0x3, 0x2, 0x2, 0x2, 0xa30, 
       0xa31, 0x7, 0x2b, 0x2, 0x2, 0xa31, 0xa37, 0x3, 0x2, 0x2, 0x2, 0xa32, 
       0xa33, 0x5, 0x1e, 0x10, 0x2, 0xa33, 0xa34, 0x7, 0x51, 0x2, 0x2, 0xa34, 
       0xa35, 0x7, 0x2b, 0x2, 0x2, 0xa35, 0xa37, 0x3, 0x2, 0x2, 0x2, 0xa36, 
       0xa07, 0x3, 0x2, 0x2, 0x2, 0xa36, 0xa0e, 0x3, 0x2, 0x2, 0x2, 0xa36, 
       0xa15, 0x3, 0x2, 0x2, 0x2, 0xa36, 0xa1c, 0x3, 0x2, 0x2, 0x2, 0xa36, 
       0xa22, 0x3, 0x2, 0x2, 0x2, 0xa36, 0xa2b, 0x3, 0x2, 0x2, 0x2, 0xa36, 
       0xa32, 0x3, 0x2, 0x2, 0x2, 0xa37, 0x1a1, 0x3, 0x2, 0x2, 0x2, 0xa38, 
       0xa3a, 0x7, 0x51, 0x2, 0x2, 0xa39, 0xa3b, 0x5, 0x2a, 0x16, 0x2, 0xa3a, 
       0xa39, 0x3, 0x2, 0x2, 0x2, 0xa3a, 0xa3b, 0x3, 0x2, 0x2, 0x2, 0xa3b, 
       0xa3c, 0x3, 0x2, 0x2, 0x2, 0xa3c, 0xa3d, 0x5, 0x1ea, 0xf6, 0x2, 0xa3d, 
       0x1a3, 0x3, 0x2, 0x2, 0x2, 0xa3e, 0xa3f, 0x5, 0x3c, 0x1f, 0x2, 0xa3f, 
       0xa41, 0x7, 0x51, 0x2, 0x2, 0xa40, 0xa42, 0x5, 0x2a, 0x16, 0x2, 0xa41, 
       0xa40, 0x3, 0x2, 0x2, 0x2, 0xa41, 0xa42, 0x3, 0x2, 0x2, 0x2, 0xa42, 
       0xa43, 0x3, 0x2, 0x2, 0x2, 0xa43, 0xa44, 0x5, 0x1ea, 0xf6, 0x2, 0xa44, 
       0xa67, 0x3, 0x2, 0x2, 0x2, 0xa45, 0xa46, 0x5, 0xc, 0x7, 0x2, 0xa46, 
       0xa48, 0x7, 0x51, 0x2, 0x2, 0xa47, 0xa49, 0x5, 0x2a, 0x16, 0x2, 0xa48, 
       0xa47, 0x3, 0x2, 0x2, 0x2, 0xa48, 0xa49, 0x3, 0x2, 0x2, 0x2, 0xa49, 
       0xa4a, 0x3, 0x2, 0x2, 0x2, 0xa4a, 0xa4b, 0x5, 0x1ea, 0xf6, 0x2, 0xa4b, 
       0xa67, 0x3, 0x2, 0x2, 0x2, 0xa4c, 0xa4d, 0x7, 0x34, 0x2, 0x2, 0xa4d, 
       0xa4f, 0x7, 0x51, 0x2, 0x2, 0xa4e, 0xa50, 0x5, 0x2a, 0x16, 0x2, 0xa4f, 
       0xa4e, 0x3, 0x2, 0x2, 0x2, 0xa4f, 0xa50, 0x3, 0x2, 0x2, 0x2, 0xa50, 
       0xa51, 0x3, 0x2, 0x2, 0x2, 0xa51, 0xa67, 0x5, 0x1ea, 0xf6, 0x2, 0xa52, 
       0xa53, 0x5, 0x38, 0x1d, 0x2, 0xa53, 0xa54, 0x7, 0x4e, 0x2, 0x2, 0xa54, 
       0xa55, 0x7, 0x34, 0x2, 0x2, 0xa55, 0xa57, 0x7, 0x51, 0x2, 0x2, 0xa56, 
       0xa58, 0x5, 0x2a, 0x16, 0x2, 0xa57, 0xa56, 0x3, 0x2, 0x2, 0x2, 0xa57, 
       0xa58, 0x3, 0x2, 0x2, 0x2, 0xa58, 0xa59, 0x3, 0x2, 0x2, 0x2, 0xa59, 
       0xa5a, 0x5, 0x1ea, 0xf6, 0x2, 0xa5a, 0xa67, 0x3, 0x2, 0x2, 0x2, 0xa5b, 
       0xa5c, 0x5, 0x10, 0x9, 0x2, 0xa5c, 0xa5e, 0x7, 0x51, 0x2, 0x2, 0xa5d, 
       0xa5f, 0x5, 0x2a, 0x16, 0x2, 0xa5e, 0xa5d, 0x3, 0x2, 0x2, 0x2, 0xa5e, 
       0xa5f, 0x3, 0x2, 0x2, 0x2, 0xa5f, 0xa60, 0x3, 0x2, 0x2, 0x2, 0xa60, 
       0xa61, 0x7, 0x2b, 0x2, 0x2, 0xa61, 0xa67, 0x3, 0x2, 0x2, 0x2, 0xa62, 
       0xa63, 0x5, 0x1e, 0x10, 0x2, 0xa63, 0xa64, 0x7, 0x51, 0x2, 0x2, 0xa64, 
       0xa65, 0x7, 0x2b, 0x2, 0x2, 0xa65, 0xa67, 0x3, 0x2, 0x2, 0x2, 0xa66, 
       0xa3e, 0x3, 0x2, 0x2, 0x2, 0xa66, 0xa45, 0x3, 0x2, 0x2, 0x2, 0xa66, 
       0xa4c, 0x3, 0x2, 0x2, 0x2, 0xa66, 0xa52, 0x3, 0x2, 0x2, 0x2, 0xa66, 
       0xa5b, 0x3, 0x2, 0x2, 0x2, 0xa66, 0xa62, 0x3, 0x2, 0x2, 0x2, 0xa67, 
       0x1a5, 0x3, 0x2, 0x2, 0x2, 0xa68, 0xa69, 0x7, 0x2b, 0x2, 0x2, 0xa69, 
       0xa6a, 0x5, 0x4, 0x3, 0x2, 0xa6a, 0xa6c, 0x5, 0x1a8, 0xd5, 0x2, 0xa6b, 
       0xa6d, 0x5, 0x20, 0x11, 0x2, 0xa6c, 0xa6b, 0x3, 0x2, 0x2, 0x2, 0xa6c, 
       0xa6d, 0x3, 0x2, 0x2, 0x2, 0xa6d, 0xa7f, 0x3, 0x2, 0x2, 0x2, 0xa6e, 
       0xa6f, 0x7, 0x2b, 0x2, 0x2, 0xa6f, 0xa70, 0x5, 0xe, 0x8, 0x2, 0xa70, 
       0xa72, 0x5, 0x1a8, 0xd5, 0x2, 0xa71, 0xa73, 0x5, 0x20, 0x11, 0x2, 
       0xa72, 0xa71, 0x3, 0x2, 0x2, 0x2, 0xa72, 0xa73, 0x3, 0x2, 0x2, 0x2, 
       0xa73, 0xa7f, 0x3, 0x2, 0x2, 0x2, 0xa74, 0xa75, 0x7, 0x2b, 0x2, 0x2, 
       0xa75, 0xa76, 0x5, 0x4, 0x3, 0x2, 0xa76, 0xa77, 0x5, 0x20, 0x11, 
       0x2, 0xa77, 0xa78, 0x5, 0x104, 0x83, 0x2, 0xa78, 0xa7f, 0x3, 0x2, 
       0x2, 0x2, 0xa79, 0xa7a, 0x7, 0x2b, 0x2, 0x2, 0xa7a, 0xa7b, 0x5, 0xe, 
       0x8, 0x2, 0xa7b, 0xa7c, 0x5, 0x20, 0x11, 0x2, 0xa7c, 0xa7d, 0x5, 
       0x104, 0x83, 0x2, 0xa7d, 0xa7f, 0x3, 0x2, 0x2, 0x2, 0xa7e, 0xa68, 
       0x3, 0x2, 0x2, 0x2, 0xa7e, 0xa6e, 0x3, 0x2, 0x2, 0x2, 0xa7e, 0xa74, 
       0x3, 0x2, 0x2, 0x2, 0xa7e, 0xa79, 0x3, 0x2, 0x2, 0x2, 0xa7f, 0x1a7, 
       0x3, 0x2, 0x2, 0x2, 0xa80, 0xa82, 0x5, 0x1aa, 0xd6, 0x2, 0xa81, 0xa80, 
       0x3, 0x2, 0x2, 0x2, 0xa82, 0xa83, 0x3, 0x2, 0x2, 0x2, 0xa83, 0xa81, 
       0x3, 0x2, 0x2, 0x2, 0xa83, 0xa84, 0x3, 0x2, 0x2, 0x2, 0xa84, 0x1a9, 
       0x3, 0x2, 0x2, 0x2, 0xa85, 0xa87, 0x5, 0xf2, 0x7a, 0x2, 0xa86, 0xa85, 
       0x3, 0x2, 0x2, 0x2, 0xa87, 0xa8a, 0x3, 0x2, 0x2, 0x2, 0xa88, 0xa86, 
       0x3, 0x2, 0x2, 0x2, 0xa88, 0xa89, 0x3, 0x2, 0x2, 0x2, 0xa89, 0xa8b, 
       0x3, 0x2, 0x2, 0x2, 0xa8a, 0xa88, 0x3, 0x2, 0x2, 0x2, 0xa8b, 0xa8c, 
       0x7, 0x4a, 0x2, 0x2, 0xa8c, 0xa8d, 0x5, 0x1ae, 0xd8, 0x2, 0xa8d, 
       0xa8e, 0x7, 0x4b, 0x2, 0x2, 0xa8e, 0x1ab, 0x3, 0x2, 0x2, 0x2, 0xa8f, 
       0xa90, 0x5, 0x1ae, 0xd8, 0x2, 0xa90, 0x1ad, 0x3, 0x2, 0x2, 0x2, 0xa91, 
       0xa94, 0x5, 0x1b0, 0xd9, 0x2, 0xa92, 0xa94, 0x5, 0x1b8, 0xdd, 0x2, 
       0xa93, 0xa91, 0x3, 0x2, 0x2, 0x2, 0xa93, 0xa92, 0x3, 0x2, 0x2, 0x2, 
       0xa94, 0x1af, 0x3, 0x2, 0x2, 0x2, 0xa95, 0xa96, 0x5, 0x1b2, 0xda, 
       0x2, 0xa96, 0xa97, 0x7, 0x59, 0x2, 0x2, 0xa97, 0xa98, 0x5, 0x1b6, 
       0xdc, 0x2, 0xa98, 0x1b1, 0x3, 0x2, 0x2, 0x2, 0xa99, 0xaa4, 0x5, 0x1ea, 
       0xf6, 0x2, 0xa9a, 0xa9c, 0x7, 0x46, 0x2, 0x2, 0xa9b, 0xa9d, 0x5, 
       0xa2, 0x52, 0x2, 0xa9c, 0xa9b, 0x3, 0x2, 0x2, 0x2, 0xa9c, 0xa9d, 
       0x3, 0x2, 0x2, 0x2, 0xa9d, 0xa9e, 0x3, 0x2, 0x2, 0x2, 0xa9e, 0xaa4, 
       0x7, 0x47, 0x2, 0x2, 0xa9f, 0xaa0, 0x7, 0x46, 0x2, 0x2, 0xaa0, 0xaa1, 
       0x5, 0x1b4, 0xdb, 0x2, 0xaa1, 0xaa2, 0x7, 0x47, 0x2, 0x2, 0xaa2, 
       0xaa4, 0x3, 0x2, 0x2, 0x2, 0xaa3, 0xa99, 0x3, 0x2, 0x2, 0x2, 0xaa3, 
       0xa9a, 0x3, 0x2, 0x2, 0x2, 0xaa3, 0xa9f, 0x3, 0x2, 0x2, 0x2, 0xaa4, 
       0x1b3, 0x3, 0x2, 0x2, 0x2, 0xaa5, 0xaaa, 0x5, 0x1ea, 0xf6, 0x2, 0xaa6, 
       0xaa7, 0x7, 0x4d, 0x2, 0x2, 0xaa7, 0xaa9, 0x5, 0x1ea, 0xf6, 0x2, 
       0xaa8, 0xaa6, 0x3, 0x2, 0x2, 0x2, 0xaa9, 0xaac, 0x3, 0x2, 0x2, 0x2, 
       0xaaa, 0xaa8, 0x3, 0x2, 0x2, 0x2, 0xaaa, 0xaab, 0x3, 0x2, 0x2, 0x2, 
       0xaab, 0x1b5, 0x3, 0x2, 0x2, 0x2, 0xaac, 0xaaa, 0x3, 0x2, 0x2, 0x2, 
       0xaad, 0xab0, 0x5, 0x1ae, 0xd8, 0x2, 0xaae, 0xab0, 0x5, 0x108, 0x85, 
       0x2, 0xaaf, 0xaad, 0x3, 0x2, 0x2, 0x2, 0xaaf, 0xaae, 0x3, 0x2, 0x2, 
       0x2, 0xab0, 0x1b7, 0x3, 0x2, 0x2, 0x2, 0xab1, 0xab4, 0x5, 0x1c0, 
       0xe1, 0x2, 0xab2, 0xab4, 0x5, 0x1ba, 0xde, 0x2, 0xab3, 0xab1, 0x3, 
       0x2, 0x2, 0x2, 0xab3, 0xab2, 0x3, 0x2, 0x2, 0x2, 0xab4, 0x1b9, 0x3, 
       0x2, 0x2, 0x2, 0xab5, 0xab6, 0x5, 0x1bc, 0xdf, 0x2, 0xab6, 0xab7, 
       0x5, 0x1be, 0xe0, 0x2, 0xab7, 0xab8, 0x5, 0x1ae, 0xd8, 0x2, 0xab8, 
       0x1bb, 0x3, 0x2, 0x2, 0x2, 0xab9, 0xabd, 0x5, 0x3c, 0x1f, 0x2, 0xaba, 
       0xabd, 0x5, 0x18c, 0xc7, 0x2, 0xabb, 0xabd, 0x5, 0x192, 0xca, 0x2, 
       0xabc, 0xab9, 0x3, 0x2, 0x2, 0x2, 0xabc, 0xaba, 0x3, 0x2, 0x2, 0x2, 
       0xabc, 0xabb, 0x3, 0x2, 0x2, 0x2, 0xabd, 0x1bd, 0x3, 0x2, 0x2, 0x2, 
       0xabe, 0xabf, 0x9, 0x6, 0x2, 0x2, 0xabf, 0x1bf, 0x3, 0x2, 0x2, 0x2, 
       0xac0, 0xaca, 0x5, 0x1c2, 0xe2, 0x2, 0xac1, 0xac2, 0x5, 0x1c2, 0xe2, 
       0x2, 0xac2, 0xac3, 0x7, 0x57, 0x2, 0x2, 0xac3, 0xac4, 0x5, 0x1ae, 
       0xd8, 0x2, 0xac4, 0xac7, 0x7, 0x58, 0x2, 0x2, 0xac5, 0xac8, 0x5, 
       0x1c0, 0xe1, 0x2, 0xac6, 0xac8, 0x5, 0x1b0, 0xd9, 0x2, 0xac7, 0xac5, 
       0x3, 0x2, 0x2, 0x2, 0xac7, 0xac6, 0x3, 0x2, 0x2, 0x2, 0xac8, 0xaca, 
       0x3, 0x2, 0x2, 0x2, 0xac9, 0xac0, 0x3, 0x2, 0x2, 0x2, 0xac9, 0xac1, 
       0x3, 0x2, 0x2, 0x2, 0xaca, 0x1c1, 0x3, 0x2, 0x2, 0x2, 0xacb, 0xacc, 
       0x8, 0xe2, 0x1, 0x2, 0xacc, 0xacd, 0x5, 0x1c4, 0xe3, 0x2, 0xacd, 
       0xad3, 0x3, 0x2, 0x2, 0x2, 0xace, 0xacf, 0xc, 0x3, 0x2, 0x2, 0xacf, 
       0xad0, 0x7, 0x5f, 0x2, 0x2, 0xad0, 0xad2, 0x5, 0x1c4, 0xe3, 0x2, 
       0xad1, 0xace, 0x3, 0x2, 0x2, 0x2, 0xad2, 0xad5, 0x3, 0x2, 0x2, 0x2, 
       0xad3, 0xad1, 0x3, 0x2, 0x2, 0x2, 0xad3, 0xad4, 0x3, 0x2, 0x2, 0x2, 
       0xad4, 0x1c3, 0x3, 0x2, 0x2, 0x2, 0xad5, 0xad3, 0x3, 0x2, 0x2, 0x2, 
       0xad6, 0xad7, 0x8, 0xe3, 0x1, 0x2, 0xad7, 0xad8, 0x5, 0x1c6, 0xe4, 
       0x2, 0xad8, 0xade, 0x3, 0x2, 0x2, 0x2, 0xad9, 0xada, 0xc, 0x3, 0x2, 
       0x2, 0xada, 0xadb, 0x7, 0x5e, 0x2, 0x2, 0xadb, 0xadd, 0x5, 0x1c6, 
       0xe4, 0x2, 0xadc, 0xad9, 0x3, 0x2, 0x2, 0x2, 0xadd, 0xae0, 0x3, 0x2, 
       0x2, 0x2, 0xade, 0xadc, 0x3, 0x2, 0x2, 0x2, 0xade, 0xadf, 0x3, 0x2, 
       0x2, 0x2, 0xadf, 0x1c5, 0x3, 0x2, 0x2, 0x2, 0xae0, 0xade, 0x3, 0x2, 
       0x2, 0x2, 0xae1, 0xae2, 0x8, 0xe4, 0x1, 0x2, 0xae2, 0xae3, 0x5, 0x1c8, 
       0xe5, 0x2, 0xae3, 0xae9, 0x3, 0x2, 0x2, 0x2, 0xae4, 0xae5, 0xc, 0x3, 
       0x2, 0x2, 0xae5, 0xae6, 0x7, 0x67, 0x2, 0x2, 0xae6, 0xae8, 0x5, 0x1c8, 
       0xe5, 0x2, 0xae7, 0xae4, 0x3, 0x2, 0x2, 0x2, 0xae8, 0xaeb, 0x3, 0x2, 
       0x2, 0x2, 0xae9, 0xae7, 0x3, 0x2, 0x2, 0x2, 0xae9, 0xaea, 0x3, 0x2, 
       0x2, 0x2, 0xaea, 0x1c7, 0x3, 0x2, 0x2, 0x2, 0xaeb, 0xae9, 0x3, 0x2, 
       0x2, 0x2, 0xaec, 0xaed, 0x8, 0xe5, 0x1, 0x2, 0xaed, 0xaee, 0x5, 0x1ca, 
       0xe6, 0x2, 0xaee, 0xaf4, 0x3, 0x2, 0x2, 0x2, 0xaef, 0xaf0, 0xc, 0x3, 
       0x2, 0x2, 0xaf0, 0xaf1, 0x7, 0x68, 0x2, 0x2, 0xaf1, 0xaf3, 0x5, 0x1ca, 
       0xe6, 0x2, 0xaf2, 0xaef, 0x3, 0x2, 0x2, 0x2, 0xaf3, 0xaf6, 0x3, 0x2, 
       0x2, 0x2, 0xaf4, 0xaf2, 0x3, 0x2, 0x2, 0x2, 0xaf4, 0xaf5, 0x3, 0x2, 
       0x2, 0x2, 0xaf5, 0x1c9, 0x3, 0x2, 0x2, 0x2, 0xaf6, 0xaf4, 0x3, 0x2, 
       0x2, 0x2, 0xaf7, 0xaf8, 0x8, 0xe6, 0x1, 0x2, 0xaf8, 0xaf9, 0x5, 0x1cc, 
       0xe7, 0x2, 0xaf9, 0xaff, 0x3, 0x2, 0x2, 0x2, 0xafa, 0xafb, 0xc, 0x3, 
       0x2, 0x2, 0xafb, 0xafc, 0x7, 0x66, 0x2, 0x2, 0xafc, 0xafe, 0x5, 0x1cc, 
       0xe7, 0x2, 0xafd, 0xafa, 0x3, 0x2, 0x2, 0x2, 0xafe, 0xb01, 0x3, 0x2, 
       0x2, 0x2, 0xaff, 0xafd, 0x3, 0x2, 0x2, 0x2, 0xaff, 0xb00, 0x3, 0x2, 
       0x2, 0x2, 0xb00, 0x1cb, 0x3, 0x2, 0x2, 0x2, 0xb01, 0xaff, 0x3, 0x2, 
       0x2, 0x2, 0xb02, 0xb03, 0x8, 0xe7, 0x1, 0x2, 0xb03, 0xb04, 0x5, 0x1ce, 
       0xe8, 0x2, 0xb04, 0xb0d, 0x3, 0x2, 0x2, 0x2, 0xb05, 0xb06, 0xc, 0x4, 
       0x2, 0x2, 0xb06, 0xb07, 0x7, 0x5a, 0x2, 0x2, 0xb07, 0xb0c, 0x5, 0x1ce, 
       0xe8, 0x2, 0xb08, 0xb09, 0xc, 0x3, 0x2, 0x2, 0xb09, 0xb0a, 0x7, 0x5d, 
       0x2, 0x2, 0xb0a, 0xb0c, 0x5, 0x1ce, 0xe8, 0x2, 0xb0b, 0xb05, 0x3, 
       0x2, 0x2, 0x2, 0xb0b, 0xb08, 0x3, 0x2, 0x2, 0x2, 0xb0c, 0xb0f, 0x3, 
       0x2, 0x2, 0x2, 0xb0d, 0xb0b, 0x3, 0x2, 0x2, 0x2, 0xb0d, 0xb0e, 0x3, 
       0x2, 0x2, 0x2, 0xb0e, 0x1cd, 0x3, 0x2, 0x2, 0x2, 0xb0f, 0xb0d, 0x3, 
       0x2, 0x2, 0x2, 0xb10, 0xb11, 0x8, 0xe8, 0x1, 0x2, 0xb11, 0xb12, 0x5, 
       0x1d0, 0xe9, 0x2, 0xb12, 0xb24, 0x3, 0x2, 0x2, 0x2, 0xb13, 0xb14, 
       0xc, 0x7, 0x2, 0x2, 0xb14, 0xb15, 0x7, 0x54, 0x2, 0x2, 0xb15, 0xb23, 
       0x5, 0x1d0, 0xe9, 0x2, 0xb16, 0xb17, 0xc, 0x6, 0x2, 0x2, 0xb17, 0xb18, 
       0x7, 0x53, 0x2, 0x2, 0xb18, 0xb23, 0x5, 0x1d0, 0xe9, 0x2, 0xb19, 
       0xb1a, 0xc, 0x5, 0x2, 0x2, 0xb1a, 0xb1b, 0x7, 0x5b, 0x2, 0x2, 0xb1b, 
       0xb23, 0x5, 0x1d0, 0xe9, 0x2, 0xb1c, 0xb1d, 0xc, 0x4, 0x2, 0x2, 0xb1d, 
       0xb1e, 0x7, 0x5c, 0x2, 0x2, 0xb1e, 0xb23, 0x5, 0x1d0, 0xe9, 0x2, 
       0xb1f, 0xb20, 0xc, 0x3, 0x2, 0x2, 0xb20, 0xb21, 0x7, 0x26, 0x2, 0x2, 
       0xb21, 0xb23, 0x5, 0xc, 0x7, 0x2, 0xb22, 0xb13, 0x3, 0x2, 0x2, 0x2, 
       0xb22, 0xb16, 0x3, 0x2, 0x2, 0x2, 0xb22, 0xb19, 0x3, 0x2, 0x2, 0x2, 
       0xb22, 0xb1c, 0x3, 0x2, 0x2, 0x2, 0xb22, 0xb1f, 0x3, 0x2, 0x2, 0x2, 
       0xb23, 0xb26, 0x3, 0x2, 0x2, 0x2, 0xb24, 0xb22, 0x3, 0x2, 0x2, 0x2, 
       0xb24, 0xb25, 0x3, 0x2, 0x2, 0x2, 0xb25, 0x1cf, 0x3, 0x2, 0x2, 0x2, 
       0xb26, 0xb24, 0x3, 0x2, 0x2, 0x2, 0xb27, 0xb28, 0x8, 0xe9, 0x1, 0x2, 
       0xb28, 0xb29, 0x5, 0x1d2, 0xea, 0x2, 0xb29, 0xb39, 0x3, 0x2, 0x2, 
       0x2, 0xb2a, 0xb2b, 0xc, 0x5, 0x2, 0x2, 0xb2b, 0xb2c, 0x7, 0x54, 0x2, 
       0x2, 0xb2c, 0xb2d, 0x7, 0x54, 0x2, 0x2, 0xb2d, 0xb38, 0x5, 0x1d2, 
       0xea, 0x2, 0xb2e, 0xb2f, 0xc, 0x4, 0x2, 0x2, 0xb2f, 0xb30, 0x7, 0x53, 
       0x2, 0x2, 0xb30, 0xb31, 0x7, 0x53, 0x2, 0x2, 0xb31, 0xb38, 0x5, 0x1d2, 
       0xea, 0x2, 0xb32, 0xb33, 0xc, 0x3, 0x2, 0x2, 0xb33, 0xb34, 0x7, 0x53, 
       0x2, 0x2, 0xb34, 0xb35, 0x7, 0x53, 0x2, 0x2, 0xb35, 0xb36, 0x7, 0x53, 
       0x2, 0x2, 0xb36, 0xb38, 0x5, 0x1d2, 0xea, 0x2, 0xb37, 0xb2a, 0x3, 
       0x2, 0x2, 0x2, 0xb37, 0xb2e, 0x3, 0x2, 0x2, 0x2, 0xb37, 0xb32, 0x3, 
       0x2, 0x2, 0x2, 0xb38, 0xb3b, 0x3, 0x2, 0x2, 0x2, 0xb39, 0xb37, 0x3, 
       0x2, 0x2, 0x2, 0xb39, 0xb3a, 0x3, 0x2, 0x2, 0x2, 0xb3a, 0x1d1, 0x3, 
       0x2, 0x2, 0x2, 0xb3b, 0xb39, 0x3, 0x2, 0x2, 0x2, 0xb3c, 0xb3d, 0x8, 
       0xea, 0x1, 0x2, 0xb3d, 0xb3e, 0x5, 0x1d4, 0xeb, 0x2, 0xb3e, 0xb47, 
       0x3, 0x2, 0x2, 0x2, 0xb3f, 0xb40, 0xc, 0x4, 0x2, 0x2, 0xb40, 0xb41, 
       0x7, 0x62, 0x2, 0x2, 0xb41, 0xb46, 0x5, 0x1d4, 0xeb, 0x2, 0xb42, 
       0xb43, 0xc, 0x3, 0x2, 0x2, 0xb43, 0xb44, 0x7, 0x63, 0x2, 0x2, 0xb44, 
       0xb46, 0x5, 0x1d4, 0xeb, 0x2, 0xb45, 0xb3f, 0x3, 0x2, 0x2, 0x2, 0xb45, 
       0xb42, 0x3, 0x2, 0x2, 0x2, 0xb46, 0xb49, 0x3, 0x2, 0x2, 0x2, 0xb47, 
       0xb45, 0x3, 0x2, 0x2, 0x2, 0xb47, 0xb48, 0x3, 0x2, 0x2, 0x2, 0xb48, 
       0x1d3, 0x3, 0x2, 0x2, 0x2, 0xb49, 0xb47, 0x3, 0x2, 0x2, 0x2, 0xb4a, 
       0xb4b, 0x8, 0xeb, 0x1, 0x2, 0xb4b, 0xb4c, 0x5, 0x1d6, 0xec, 0x2, 
       0xb4c, 0xb58, 0x3, 0x2, 0x2, 0x2, 0xb4d, 0xb4e, 0xc, 0x5, 0x2, 0x2, 
       0xb4e, 0xb4f, 0x7, 0x64, 0x2, 0x2, 0xb4f, 0xb57, 0x5, 0x1d6, 0xec, 
       0x2, 0xb50, 0xb51, 0xc, 0x4, 0x2, 0x2, 0xb51, 0xb52, 0x7, 0x65, 0x2, 
       0x2, 0xb52, 0xb57, 0x5, 0x1d6, 0xec, 0x2, 0xb53, 0xb54, 0xc, 0x3, 
       0x2, 0x2, 0xb54, 0xb55, 0x7, 0x69, 0x2, 0x2, 0xb55, 0xb57, 0x5, 0x1d6, 
       0xec, 0x2, 0xb56, 0xb4d, 0x3, 0x2, 0x2, 0x2, 0xb56, 0xb50, 0x3, 0x2, 
       0x2, 0x2, 0xb56, 0xb53, 0x3, 0x2, 0x2, 0x2, 0xb57, 0xb5a, 0x3, 0x2, 
       0x2, 0x2, 0xb58, 0xb56, 0x3, 0x2, 0x2, 0x2, 0xb58, 0xb59, 0x3, 0x2, 
       0x2, 0x2, 0xb59, 0x1d5, 0x3, 0x2, 0x2, 0x2, 0xb5a, 0xb58, 0x3, 0x2, 
       0x2, 0x2, 0xb5b, 0xb63, 0x5, 0x1d8, 0xed, 0x2, 0xb5c, 0xb63, 0x5, 
       0x1da, 0xee, 0x2, 0xb5d, 0xb5e, 0x7, 0x62, 0x2, 0x2, 0xb5e, 0xb63, 
       0x5, 0x1d6, 0xec, 0x2, 0xb5f, 0xb60, 0x7, 0x63, 0x2, 0x2, 0xb60, 
       0xb63, 0x5, 0x1d6, 0xec, 0x2, 0xb61, 0xb63, 0x5, 0x1dc, 0xef, 0x2, 
       0xb62, 0xb5b, 0x3, 0x2, 0x2, 0x2, 0xb62, 0xb5c, 0x3, 0x2, 0x2, 0x2, 
       0xb62, 0xb5d, 0x3, 0x2, 0x2, 0x2, 0xb62, 0xb5f, 0x3, 0x2, 0x2, 0x2, 
       0xb62, 0xb61, 0x3, 0x2, 0x2, 0x2, 0xb63, 0x1d7, 0x3, 0x2, 0x2, 0x2, 
       0xb64, 0xb65, 0x7, 0x60, 0x2, 0x2, 0xb65, 0xb66, 0x5, 0x1d6, 0xec, 
       0x2, 0xb66, 0x1d9, 0x3, 0x2, 0x2, 0x2, 0xb67, 0xb68, 0x7, 0x61, 0x2, 
       0x2, 0xb68, 0xb69, 0x5, 0x1d6, 0xec, 0x2, 0xb69, 0x1db, 0x3, 0x2, 
       0x2, 0x2, 0xb6a, 0xb71, 0x5, 0x1de, 0xf0, 0x2, 0xb6b, 0xb6c, 0x7, 
       0x56, 0x2, 0x2, 0xb6c, 0xb71, 0x5, 0x1d6, 0xec, 0x2, 0xb6d, 0xb6e, 
       0x7, 0x55, 0x2, 0x2, 0xb6e, 0xb71, 0x5, 0x1d6, 0xec, 0x2, 0xb6f, 
       0xb71, 0x5, 0x1e8, 0xf5, 0x2, 0xb70, 0xb6a, 0x3, 0x2, 0x2, 0x2, 0xb70, 
       0xb6b, 0x3, 0x2, 0x2, 0x2, 0xb70, 0xb6d, 0x3, 0x2, 0x2, 0x2, 0xb70, 
       0xb6f, 0x3, 0x2, 0x2, 0x2, 0xb71, 0x1dd, 0x3, 0x2, 0x2, 0x2, 0xb72, 
       0xb75, 0x5, 0x16e, 0xb8, 0x2, 0xb73, 0xb75, 0x5, 0x3c, 0x1f, 0x2, 
       0xb74, 0xb72, 0x3, 0x2, 0x2, 0x2, 0xb74, 0xb73, 0x3, 0x2, 0x2, 0x2, 
       0xb75, 0xb7a, 0x3, 0x2, 0x2, 0x2, 0xb76, 0xb79, 0x5, 0x1e2, 0xf2, 
       0x2, 0xb77, 0xb79, 0x5, 0x1e6, 0xf4, 0x2, 0xb78, 0xb76, 0x3, 0x2, 
       0x2, 0x2, 0xb78, 0xb77, 0x3, 0x2, 0x2, 0x2, 0xb79, 0xb7c, 0x3, 0x2, 
       0x2, 0x2, 0xb7a, 0xb78, 0x3, 0x2, 0x2, 0x2, 0xb7a, 0xb7b, 0x3, 0x2, 
       0x2, 0x2, 0xb7b, 0x1df, 0x3, 0x2, 0x2, 0x2, 0xb7c, 0xb7a, 0x3, 0x2, 
       0x2, 0x2, 0xb7d, 0xb7e, 0x5, 0x1de, 0xf0, 0x2, 0xb7e, 0xb7f, 0x7, 
       0x60, 0x2, 0x2, 0xb7f, 0x1e1, 0x3, 0x2, 0x2, 0x2, 0xb80, 0xb81, 0x7, 
       0x60, 0x2, 0x2, 0xb81, 0x1e3, 0x3, 0x2, 0x2, 0x2, 0xb82, 0xb83, 0x5, 
       0x1de, 0xf0, 0x2, 0xb83, 0xb84, 0x7, 0x61, 0x2, 0x2, 0xb84, 0x1e5, 
       0x3, 0x2, 0x2, 0x2, 0xb85, 0xb86, 0x7, 0x61, 0x2, 0x2, 0xb86, 0x1e7, 
       0x3, 0x2, 0x2, 0x2, 0xb87, 0xb88, 0x7, 0x46, 0x2, 0x2, 0xb88, 0xb89, 
       0x5, 0x4, 0x3, 0x2, 0xb89, 0xb8a, 0x7, 0x47, 0x2, 0x2, 0xb8a, 0xb8b, 
       0x5, 0x1d6, 0xec, 0x2, 0xb8b, 0xba3, 0x3, 0x2, 0x2, 0x2, 0xb8c, 0xb8d, 
       0x7, 0x46, 0x2, 0x2, 0xb8d, 0xb91, 0x5, 0xc, 0x7, 0x2, 0xb8e, 0xb90, 
       0x5, 0x28, 0x15, 0x2, 0xb8f, 0xb8e, 0x3, 0x2, 0x2, 0x2, 0xb90, 0xb93, 
       0x3, 0x2, 0x2, 0x2, 0xb91, 0xb8f, 0x3, 0x2, 0x2, 0x2, 0xb91, 0xb92, 
       0x3, 0x2, 0x2, 0x2, 0xb92, 0xb94, 0x3, 0x2, 0x2, 0x2, 0xb93, 0xb91, 
       0x3, 0x2, 0x2, 0x2, 0xb94, 0xb95, 0x7, 0x47, 0x2, 0x2, 0xb95, 0xb96, 
       0x5, 0x1dc, 0xef, 0x2, 0xb96, 0xba3, 0x3, 0x2, 0x2, 0x2, 0xb97, 0xb98, 
       0x7, 0x46, 0x2, 0x2, 0xb98, 0xb9c, 0x5, 0xc, 0x7, 0x2, 0xb99, 0xb9b, 
       0x5, 0x28, 0x15, 0x2, 0xb9a, 0xb99, 0x3, 0x2, 0x2, 0x2, 0xb9b, 0xb9e, 
       0x3, 0x2, 0x2, 0x2, 0xb9c, 0xb9a, 0x3, 0x2, 0x2, 0x2, 0xb9c, 0xb9d, 
       0x3, 0x2, 0x2, 0x2, 0xb9d, 0xb9f, 0x3, 0x2, 0x2, 0x2, 0xb9e, 0xb9c, 
       0x3, 0x2, 0x2, 0x2, 0xb9f, 0xba0, 0x7, 0x47, 0x2, 0x2, 0xba0, 0xba1, 
       0x5, 0x1b0, 0xd9, 0x2, 0xba1, 0xba3, 0x3, 0x2, 0x2, 0x2, 0xba2, 0xb87, 
       0x3, 0x2, 0x2, 0x2, 0xba2, 0xb8c, 0x3, 0x2, 0x2, 0x2, 0xba2, 0xb97, 
       0x3, 0x2, 0x2, 0x2, 0xba3, 0x1e9, 0x3, 0x2, 0x2, 0x2, 0xba4, 0xba5, 
       0x9, 0x7, 0x2, 0x2, 0xba5, 0x1eb, 0x3, 0x2, 0x2, 0x2, 0x156, 0x1f1, 
       0x1f8, 0x1fc, 0x200, 0x209, 0x20d, 0x211, 0x213, 0x219, 0x21e, 0x225, 
       0x22a, 0x22c, 0x232, 0x237, 0x23c, 0x241, 0x24c, 0x25a, 0x25f, 0x267, 
       0x26e, 0x274, 0x279, 0x284, 0x287, 0x295, 0x29a, 0x29f, 0x2a4, 0x2aa, 
       0x2b4, 0x2bf, 0x2c7, 0x2d1, 0x2d9, 0x2e5, 0x2ea, 0x2ed, 0x2f2, 0x2f8, 
       0x300, 0x308, 0x315, 0x332, 0x337, 0x33b, 0x343, 0x34c, 0x35a, 0x35d, 
       0x369, 0x36c, 0x37c, 0x381, 0x387, 0x38c, 0x392, 0x395, 0x398, 0x3a4, 
       0x3af, 0x3bd, 0x3c4, 0x3cd, 0x3d4, 0x3d9, 0x3e8, 0x3ef, 0x3f5, 0x3f9, 
       0x3fd, 0x401, 0x405, 0x40a, 0x40e, 0x412, 0x414, 0x419, 0x420, 0x425, 
       0x427, 0x42d, 0x432, 0x436, 0x449, 0x44e, 0x45e, 0x463, 0x469, 0x46f, 
       0x471, 0x475, 0x47a, 0x47e, 0x486, 0x48d, 0x495, 0x498, 0x49d, 0x4a5, 
       0x4aa, 0x4b1, 0x4b8, 0x4bd, 0x4c4, 0x4d0, 0x4d5, 0x4d9, 0x4e3, 0x4e8, 
       0x4f0, 0x4f3, 0x4f8, 0x500, 0x503, 0x508, 0x50d, 0x512, 0x517, 0x51e, 
       0x523, 0x52b, 0x530, 0x535, 0x53a, 0x540, 0x546, 0x549, 0x54c, 0x555, 
       0x55b, 0x561, 0x564, 0x567, 0x56f, 0x574, 0x579, 0x57f, 0x582, 0x58d, 
       0x596, 0x5a0, 0x5a5, 0x5b0, 0x5b5, 0x5c2, 0x5c7, 0x5d3, 0x5dd, 0x5e2, 
       0x5ea, 0x5ed, 0x5f4, 0x5fc, 0x602, 0x60b, 0x615, 0x619, 0x61c, 0x625, 
       0x633, 0x636, 0x63f, 0x644, 0x64b, 0x650, 0x658, 0x664, 0x66b, 0x679, 
       0x68f, 0x6b1, 0x6bd, 0x6c3, 0x6ce, 0x6da, 0x6f4, 0x6f8, 0x6fd, 0x701, 
       0x705, 0x70d, 0x711, 0x715, 0x71c, 0x725, 0x72d, 0x73c, 0x748, 0x74e, 
       0x754, 0x769, 0x76e, 0x773, 0x77e, 0x789, 0x793, 0x796, 0x79b, 0x7a4, 
       0x7aa, 0x7b3, 0x7b7, 0x7bb, 0x7c0, 0x7d3, 0x7dd, 0x7f3, 0x7fa, 0x802, 
       0x80a, 0x815, 0x82c, 0x836, 0x841, 0x857, 0x85c, 0x862, 0x86a, 0x86e, 
       0x873, 0x87b, 0x881, 0x885, 0x889, 0x88d, 0x893, 0x898, 0x89d, 0x8a1, 
       0x8a5, 0x8ab, 0x8b0, 0x8b5, 0x8b9, 0x8bd, 0x8bf, 0x8c4, 0x8c9, 0x8ce, 
       0x8d2, 0x8d6, 0x8da, 0x8df, 0x8e7, 0x8ed, 0x8f1, 0x8f5, 0x8f9, 0x8ff, 
       0x904, 0x909, 0x90d, 0x911, 0x913, 0x918, 0x927, 0x935, 0x941, 0x94a, 
       0x959, 0x966, 0x96f, 0x975, 0x97c, 0x981, 0x988, 0x98d, 0x994, 0x999, 
       0x9a0, 0x9a5, 0x9ae, 0x9b3, 0x9b7, 0x9bb, 0x9c0, 0x9c7, 0x9ce, 0x9d3, 
       0x9da, 0x9df, 0x9e6, 0x9eb, 0x9f4, 0x9f9, 0x9fd, 0xa04, 0xa0a, 0xa11, 
       0xa18, 0xa1f, 0xa27, 0xa2e, 0xa36, 0xa3a, 0xa41, 0xa48, 0xa4f, 0xa57, 
       0xa5e, 0xa66, 0xa6c, 0xa72, 0xa7e, 0xa83, 0xa88, 0xa93, 0xa9c, 0xaa3, 
       0xaaa, 0xaaf, 0xab3, 0xabc, 0xac7, 0xac9, 0xad3, 0xade, 0xae9, 0xaf4, 
       0xaff, 0xb0b, 0xb0d, 0xb22, 0xb24, 0xb37, 0xb39, 0xb45, 0xb47, 0xb56, 
       0xb58, 0xb62, 0xb70, 0xb74, 0xb78, 0xb7a, 0xb91, 0xb9c, 0xba2, 
  };

  _serializedATN.insert(_serializedATN.end(), serializedATNSegment0,
    serializedATNSegment0 + sizeof(serializedATNSegment0) / sizeof(serializedATNSegment0[0]));
  _serializedATN.insert(_serializedATN.end(), serializedATNSegment1,
    serializedATNSegment1 + sizeof(serializedATNSegment1) / sizeof(serializedATNSegment1[0]));


  atn::ATNDeserializer deserializer;
  _atn = deserializer.deserialize(_serializedATN);

  size_t count = _atn.getNumberOfDecisions();
  _decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    _decisionToDFA.emplace_back(_atn.getDecisionState(i), i);
  }
}

Java9_v2Parser::Initializer Java9_v2Parser::_init;
